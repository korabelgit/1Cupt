// (С) АБИ Украина 2004

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем сооМФОФормат Экспорт;                        // соответствие МФО -> Формат
Перем сооФорматИмяФайлаОбработкиФормата Экспорт;   // соответствие Формат -> ИмяФайлаОбработки
Перем НастройкиОбработки Экспорт;                  	// настройки обработки

Перем Конфигурация Экспорт;                  	   	// текущая конфигурация (БУ, УПП, УТП или УТ)

Перем ОбъектыТиповойКонфигурации Экспорт; 			//

Перем РегИнфо Экспорт; 								// регистрационная информация

Перем СокращенияТиповОрганизаций;
Перем ИмяКаталогаКБ Экспорт;
//Перем ТекстЗапросаПоискаСделки;
Перем ТекстЗапросаПоискаСделкиПриход;
Перем ТекстЗапросаПоискаСделкиРасход;
Перем ДлинаНомераДокументов Экспорт;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем ВерсияКБ Экспорт;
Перем АдресОтправки Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация, настройки...

// Процедура запускается при первом запуске обработки
// Автоматически отображает форму "ФормаНастроек". 
//
Процедура ПервыйЗапускОбработки() Экспорт
	
	Предупреждение(НСтр("ru='Необходимо настроить параметры обработки ""Обмен данными с системами Клиент-Банк""';uk='Необхідно настроїти параметри обробки ""Обмін даними із системами Клієнт-Банк""'"),
	,НСтр("ru='Первый запуск обработки ""Обмен данными с системами Клиент-Банк""';uk='Перший запуск обробки ""Обмін даними із системами Клієнт-Банк""'"));
	
	ИмяКаталогаКБ = КаталогПрограммы();
	
	СохранитьЗначение("КБ8:ИмяКаталогаКБ", ИмяКаталогаКБ);
	НастройкиОбработки.Вставить("ИмяКаталогаКБ", ИмяКаталогаКБ);
	
	ВидыСортировок = Новый СписокЗначений; 
	
	ВидыСортировок.Добавить("Контрагент", "1");
	ВидыСортировок.Добавить("Сумма", "2");
	ВидыСортировок.Добавить("ПриходРасход,Сумма", "3");
	ВидыСортировок.Добавить("Статус", "4");
	
	СохранитьЗначение("КБ8:ТипСортировки", ВидыСортировок);
	НастройкиОбработки.Вставить("ТипСортировки", ВидыСортировок);
	
	//Записывать новых контрагентов, юрфизлица в группы
	РодительНовыхПоУмолчанию = "Новые (клиент-банк)";
	
	// Проверка, что группы с таким наименованием не существует
	
	спрКонтрРодительСсылка = Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаКонтрагенты")].ПустаяСсылка();
	спрКонтрГруппаЭл = Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаКонтрагенты")].НайтиПоНаименованию(РодительНовыхПоУмолчанию,,спрКонтрРодительСсылка);
	Если спрКонтрГруппаЭл.Пустая() И НЕ спрКонтрГруппаЭл.ЭтоГруппа Тогда
		СпрКонртГруппа = Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаКонтрагенты")].СоздатьГруппу();
		СпрКонртГруппа.ОбменДанными.Загрузка = Истина;
		СпрКонртГруппа.Наименование = РодительНовыхПоУмолчанию;
		СпрКонртГруппа.Записать();
		
		СохранитьЗначение("КБ8:РодительНовыхКонтрагентовПлатимМы", СпрКонртГруппа.Ссылка.Код);
		СохранитьЗначение("КБ8:РодительНовыхКонтрагентовПлатятНам", СпрКонртГруппа.Ссылка.Код);
		НастройкиОбработки.Вставить("РодительНовыхКонтрагентовПлатимМы", СпрКонртГруппа.Ссылка);
		НастройкиОбработки.Вставить("РодительНовыхКонтрагентовПлатятНам", СпрКонртГруппа.Ссылка);
		
	Иначе
		
		//сошлемся на найденную группу
		
		СохранитьЗначение("КБ8:РодительНовыхКонтрагентовПлатимМы", спрКонтрГруппаЭл.Код);
		СохранитьЗначение("КБ8:РодительНовыхКонтрагентовПлатятНам", спрКонтрГруппаЭл.Код);
		
		НастройкиОбработки.Вставить("РодительНовыхКонтрагентовПлатимМы", спрКонтрГруппаЭл);
		НастройкиОбработки.Вставить("РодительНовыхКонтрагентовПлатятНам", спрКонтрГруппаЭл);
		
	КонецЕсли;		
	
	Если Конфигурация = "УПП" Или Конфигурация = "БУ" Или Конфигурация = "УТП" Тогда
		
		СохранитьЗначение("КБ8:ВхСчетРасчетов", 	"361");
		СохранитьЗначение("КБ8:ИсхСчетРасчетов", 	"631");
		СохранитьЗначение("КБ8:ВхСчетАвансов", 		"6811");
		СохранитьЗначение("КБ8:ИсхСчетАвансов", 	"3711");
		СохранитьЗначение("КБ8:СчетУчетаДС", 		"311");
		НастройкиОбработки.Вставить("ВхСчетРасчетов", 	ПланыСчетов.Хозрасчетный.НайтиПоКоду("361"));
		НастройкиОбработки.Вставить("ИсхСчетРасчетов", 	ПланыСчетов.Хозрасчетный.НайтиПоКоду("631"));
		НастройкиОбработки.Вставить("ВхСчетАвансов", 	ПланыСчетов.Хозрасчетный.НайтиПоКоду("6811"));
		НастройкиОбработки.Вставить("ИсхСчетАвансов", 	ПланыСчетов.Хозрасчетный.НайтиПоКоду("3711"));
		НастройкиОбработки.Вставить("СчетУчетаДС", 		ПланыСчетов.Хозрасчетный.НайтиПоКоду("311"));
		
	КонецЕсли;
	
	СохранитьЗначение("КБ8:КоличествоДнейДляОплатыБанка",		0);
	НастройкиОбработки.Вставить("КоличествоДнейДляОплатыБанка",	0);
	
	СохранитьЗначение("КБ8:АвтоСозданиеКонтрагента", 			Истина);
	НастройкиОбработки.Вставить("АвтоСозданиеКонтрагента", 		Истина);
	
	СохранитьЗначение("КБ8:ПоискСделкиИДоговораПоНомеру", 		Ложь);
	НастройкиОбработки.Вставить("ПоискСделкиИДоговораПоНомеру", Ложь);
	
	СохранитьЗначение("КБ8:ИмпортТолькоВходящихПлатежей", 		Ложь);
	СохранитьЗначение("КБ8:АвтоИмпортВыписок", 					Ложь);
	СохранитьЗначение("КБ8:АвтоЗаполнениеТаблицыЭкспорта", 		Ложь);
	НастройкиОбработки.Вставить("ИмпортТолькоВходящихПлатежей", Ложь);
	НастройкиОбработки.Вставить("АвтоИмпортВыписок", 			Ложь);
	НастройкиОбработки.Вставить("АвтоИмпортВыписок", 			Ложь);
	
	СохранитьЗначение("КБ8:ПытатьсяПроводитьСозданныеДокументы", 		Ложь);
	СохранитьЗначение("КБ8:ОткрыватьСозданныеДокументы", 				Истина);
	СохранитьЗначение("КБ8:ОткрыватьТолькоДокументыСОшибками", 			Ложь);
	НастройкиОбработки.Вставить("ПытатьсяПроводитьСозданныеДокументы", 	Ложь);
	НастройкиОбработки.Вставить("ОткрыватьСозданныеДокументы", 			Истина);
	НастройкиОбработки.Вставить("ОткрыватьТолькоДокументыСОшибками",	Ложь);
	
	СохранитьЗначение("КБ8:РаботаСПочтой", 			"1С");
	НастройкиОбработки.Вставить("РаботаСПочтой", 	"1С");
	
КонецПроцедуры // ПервыйЗапускОбработки()	

// Процедура восстанавливает значение настроек
// 
// Параметры: нет
// 
Процедура ВосстановитьЗначениеНастроек() Экспорт
	
	НастройкиОбработки.Вставить("ИмяКаталогаКБ", ВосстановитьЗначение("КБ8:ИмяКаталогаКБ"));
	ИмяКаталогаКБ = НастройкиОбработки.ИмяКаталогаКБ;
	
	НастройкиОбработки.Вставить("ТипСортировки", ВосстановитьЗначение("КБ8:ТипСортировки"));
	
	НастройкиОбработки.Вставить("ОрганизацияПоУмолчанию", 	Справочники.Организации.НайтиПоКоду(ВосстановитьЗначение("КБ8:ОрганизацияПоУмолчанию")));
	НастройкиОбработки.Вставить("РасчетныйСчетПоУмолчанию", Справочники.БанковскиеСчета.НайтиПоКоду(ВосстановитьЗначение("КБ8:РасчетныйСчетПоУмолчанию")));
	
	КоличествоДнейДляОплатыБанка = ВосстановитьЗначение("КБ8:КоличествоДнейДляОплатыБанка");
	НастройкиОбработки.Вставить("КоличествоДнейДляОплатыБанка",	?(КоличествоДнейДляОплатыБанка=Неопределено,0,КоличествоДнейДляОплатыБанка));
	
	ПоискСделкиИДоговораПоНомеру = ВосстановитьЗначение("КБ8:ПоискСделкиИДоговораПоНомеру");
	НастройкиОбработки.Вставить("ПоискСделкиИДоговораПоНомеру",	?(ПоискСделкиИДоговораПоНомеру=Неопределено,Ложь,ПоискСделкиИДоговораПоНомеру));
	
	НастройкиОбработки.Вставить("АвтоСозданиеКонтрагента", 	ВосстановитьЗначение("КБ8:АвтоСозданиеКонтрагента"));
	
	НастройкиОбработки.Вставить("РодительНовыхКонтрагентовПлатимМы", 	Справочники.Контрагенты.НайтиПоКоду(ВосстановитьЗначение("КБ8:РодительНовыхКонтрагентовПлатимМы")));
	НастройкиОбработки.Вставить("РодительНовыхКонтрагентовПлатятНам", 	Справочники.Контрагенты.НайтиПоКоду(ВосстановитьЗначение("КБ8:РодительНовыхКонтрагентовПлатятНам")));
	
	Если Конфигурация = "УПП" Или Конфигурация = "БУ" Или Конфигурация = "УТП" Тогда
		НастройкиОбработки.Вставить("ВхСчетРасчетов", 	ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВосстановитьЗначение("КБ8:ВхСчетРасчетов")));
		НастройкиОбработки.Вставить("ИсхСчетРасчетов", 	ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВосстановитьЗначение("КБ8:ИсхСчетРасчетов")));
		НастройкиОбработки.Вставить("ВхСчетАвансов", 	ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВосстановитьЗначение("КБ8:ВхСчетАвансов")));
		НастройкиОбработки.Вставить("ИсхСчетАвансов", 	ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВосстановитьЗначение("КБ8:ИсхСчетАвансов")));
		НастройкиОбработки.Вставить("СчетУчетаДС", 		ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВосстановитьЗначение("КБ8:СчетУчетаДС")));
	КонецЕсли;
	
	НастройкиОбработки.Вставить("ИмпортТолькоВходящихПлатежей", 	ВосстановитьЗначение("КБ8:ИмпортТолькоВходящихПлатежей"));
	НастройкиОбработки.Вставить("АвтоИмпортВыписок", 				ВосстановитьЗначение("КБ8:АвтоИмпортВыписок"));
	НастройкиОбработки.Вставить("АвтоЗаполнениеТаблицыЭкспорта", 	ВосстановитьЗначение("КБ8:АвтоЗаполнениеТаблицыЭкспорта"));
	
	НастройкиОбработки.Вставить("ПытатьсяПроводитьСозданныеДокументы", 	ВосстановитьЗначение("КБ8:ПытатьсяПроводитьСозданныеДокументы"));
	НастройкиОбработки.Вставить("ОткрыватьСозданныеДокументы", 			ВосстановитьЗначение("КБ8:ОткрыватьСозданныеДокументы"));
	НастройкиОбработки.Вставить("ОткрыватьТолькоДокументыСОшибками",	ВосстановитьЗначение("КБ8:ОткрыватьТолькоДокументыСОшибками"));
	
	НастройкиОбработки.Вставить("РаботаСПочтой", ВосстановитьЗначение("КБ8:РаботаСПочтой"));
	
	НастройкиОбработки.Вставить("ФорматыОбмена", ВосстановитьЗначение("КБ8:ФорматыОбмена"));
	
КонецПроцедуры // ВосстановитьЗначениеНастроек()	

// Процедура в зависимости от типовой конфигурации инициализирует 
// соответствие ОбъектыТиповойКонфигурации.
//
Процедура ИнициализацияОбъектовКонфигурации() Экспорт
	
	//Управление торговлей для Украины
	ОбъектыТиповойКонфигурации = Новый Соответствие();
	
	Если Конфигурация = "УТ" Тогда
		
		//Справочники
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаОрганизации", 	"Организации");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаСчет", 			"БанковскиеСчета");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаКонтрагенты", 	"Контрагенты");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаПодразделения", 	"Подразделения");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаДоговоры", 		"ДоговорыКонтрагентов");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаБанки", 			"Банки");
		
		//Документы
		ВыпискиВх 	= Новый СписокЗначений;
		ВыпискиВх.Добавить("ПлатежноеПоручениеВходящее",				"Платежное поручение входящее");
		ВыпискиВх.Добавить("ПлатежноеТребованиеВыставленное",			"Платежное требование выставленное");
		ВыпискиВх.Добавить("ПлатежноеТребованиеПоручениеВыставленное",	"Платежное требование-поручение выставленное");
		ВыпискиВх.Добавить("ПлатежныйОрдерПоступлениеДенежныхСредств",	"Платежный ордер: поступление денежных средств");
		ВыпискиВх.Добавить("АккредитивПолученный",						"Аккредитив полученный");
		
		ВыпискиИсх 	= Новый СписокЗначений;
		ВыпискиИсх.Добавить("ПлатежноеПоручениеИсходящее",				"Платежное поручение исходящее");
		ВыпискиИсх.Добавить("ПлатежноеТребованиеПолученное",			"Платежное требование полученное");
		ВыпискиИсх.Добавить("ПлатежноеТребованиеПоручениеПолученное",	"Платежное требование-поручение полученное");
		ВыпискиИсх.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств",	"Платежный ордер: списание денежных средств");
		ВыпискиИсх.Добавить("АккредитивПереданный",						"Аккредитив переданный");
		
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаПриход", ВыпискиВх);
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаРасход", ВыпискиИсх);
		
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаПриходПоУмолчанию", "ПлатежноеПоручениеВходящее");
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаРасходПоУмолчанию", "ПлатежноеПоручениеИсходящее");
		
		//Сделки
		сзСделки = Новый СписокЗначений;
		сзСделки.Добавить("ОтчетКомитентуОПродажах",					"Отчет комитенту о продажах товаров");
		сзСделки.Добавить("СчетНаОплатуПоставщика",						"Счет на оплату поставщика");
		сзСделки.Добавить("АккредитивПолученный",						"Аккредитив полученный");
		сзСделки.Добавить("ПлатежноеПоручениеВходящее",					"Платежное поручение входящее");
		сзСделки.Добавить("ВозвратТоваровПоставщику",					"Возврат товаров поставщику");
		сзСделки.Добавить("ЗаказПоставщику",							"Заказ поставщику");
		сзСделки.Добавить("ПлатежноеТребованиеПолученное",				"Платежное требование полученное");
		сзСделки.Добавить("РасходныйКассовыйОрдер",						"Расходный кассовый ордер");
		сзСделки.Добавить("АккредитивПереданный",						"Аккредитив переданный");
		сзСделки.Добавить("РеализацияТоваровУслуг",						"Реализация товаров и услуг");
		сзСделки.Добавить("ЗаказПокупателя",							"Заказ покупателя");
		сзСделки.Добавить("КорректировкаДолгаПоВозвратнойТаре",			"КорректировкаДолгаПоВозвратнойТаре");
		сзСделки.Добавить("ПриходныйКассовыйОрдер",						"Приходный кассовый ордер");
		сзСделки.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств",		"Платежный ордер: списание денежных средств");
		сзСделки.Добавить("СчетНаОплатуПокупателю",						"Счет на оплату покупателю");
		сзСделки.Добавить("ВозвратТоваровОтПокупателя",					"Возврат товаров от покупателя");
		сзСделки.Добавить("ОтчетКомиссионераОПродажах",					"Отчет комиссионера о продажах");
		сзСделки.Добавить("ПлатежноеТребованиеВыставленное",			"Платежное требование выставленное");
		сзСделки.Добавить("ПлатежныйОрдерПоступлениеДенежныхСредств",	"Платежный ордер: поступление денежных средств");
		сзСделки.Добавить("ПлатежноеПоручениеИсходящее",				"Платежное поручение исходящее");
		сзСделки.Добавить("ПоступлениеДопРасходов",						"Поступление доп. расходов");
		сзСделки.Добавить("ПоступлениеТоваровУслуг",					"Поступление товаров и услуг");
		сзСделки.СортироватьПоЗначению();
		
		ОбъектыТиповойКонфигурации.Вставить("ТипыДокументовСделки", сзСделки);
		
		// Сделка: Счет-Заказ
		СделкиВх 	= Новый СписокЗначений;
		СделкиВх.Добавить("ЗаказПокупателя", 			"Заказ покупателя");
		СделкиВх.Добавить("СчетНаОплатуПокупателю", 	"Счет на оплату покупателю");
		
		СделкиИсх 	= Новый СписокЗначений;
		СделкиИсх.Добавить("ЗаказПоставщику", 			"Заказ поставщику");
		СделкиИсх.Добавить("СчетНаОплатуПоставщика", 	"Счет на оплату поставщика");
		
		ОбъектыТиповойКонфигурации.Вставить("ТипыДокументовСделкиПриход", СделкиВх);
		ОбъектыТиповойКонфигурации.Вставить("ТипыДокументовСделкиРасход", СделкиИсх);
		
		
	ИначеЕсли Конфигурация = "УТП" Тогда
		
		//Справочники
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаОрганизации", 	"Организации");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаСчет", 			"БанковскиеСчета");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаКонтрагенты", 	"Контрагенты");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаПодразделения", 	"Подразделения");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаДоговоры", 		"ДоговорыКонтрагентов");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаБанки", 			"Банки");
		
		//Документы
		ВыпискиВх 	= Новый СписокЗначений;
		ВыпискиВх.Добавить("ПлатежноеПоручениеВходящее",				"Платежное поручение входящее");
		ВыпискиВх.Добавить("ПлатежныйОрдерПоступлениеДенежныхСредств",	"Платежный ордер: поступление денежных средств");
		
		ВыпискиИсх 	= Новый СписокЗначений;
		ВыпискиИсх.Добавить("ПлатежноеПоручениеИсходящее",				"Платежное поручение исходящее");
		ВыпискиИсх.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств",	"Платежный ордер: списание денежных средств");
		
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаПриход", ВыпискиВх);
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаРасход", ВыпискиИсх);
		
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаПриходПоУмолчанию", "ПлатежноеПоручениеВходящее");
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаРасходПоУмолчанию", "ПлатежноеПоручениеИсходящее");
		
		//Сделки
		сзСделки = Новый СписокЗначений;
		сзСделки.Добавить("ОтчетКомитентуОПродажах",					"Отчет комитенту о продажах товаров");
		сзСделки.Добавить("СчетНаОплатуПоставщика",						"Счет на оплату поставщика");
		сзСделки.Добавить("ПлатежноеПоручениеВходящее",					"Платежное поручение входящее");
		сзСделки.Добавить("ВозвратТоваровПоставщику",					"Возврат товаров поставщику");
		сзСделки.Добавить("ЗаказПоставщику",							"Заказ поставщику");
		сзСделки.Добавить("РасходныйКассовыйОрдер",						"Расходный кассовый ордер");
		сзСделки.Добавить("РеализацияТоваровУслуг",						"Реализация товаров и услуг");
		сзСделки.Добавить("ЗаказПокупателя",							"Заказ покупателя");
		сзСделки.Добавить("КорректировкаДолгаПоВозвратнойТаре",			"КорректировкаДолгаПоВозвратнойТаре");
		сзСделки.Добавить("ПриходныйКассовыйОрдер",						"Приходный кассовый ордер");
		сзСделки.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств",		"Платежный ордер: списание денежных средств");
		сзСделки.Добавить("СчетНаОплатуПокупателю",						"Счет на оплату покупателю");
		сзСделки.Добавить("ВозвратТоваровОтПокупателя",					"Возврат товаров от покупателя");
		сзСделки.Добавить("ОтчетКомиссионераОПродажах",					"Отчет комиссионера о продажах");
		сзСделки.Добавить("ПлатежныйОрдерПоступлениеДенежныхСредств",	"Платежный ордер: поступление денежных средств");
		сзСделки.Добавить("ПлатежноеПоручениеИсходящее",				"Платежное поручение исходящее");
		сзСделки.Добавить("ПоступлениеДопРасходов",						"Поступление доп. расходов");
		сзСделки.Добавить("ПоступлениеТоваровУслуг",					"Поступление товаров и услуг");
		сзСделки.СортироватьПоЗначению();
		
		ОбъектыТиповойКонфигурации.Вставить("ТипыДокументовСделки", сзСделки);
		
		// Сделка: Счет-Заказ
		СделкиВх 	= Новый СписокЗначений;
		СделкиВх.Добавить("ЗаказПокупателя", 			"Заказ покупателя");
		СделкиВх.Добавить("СчетНаОплатуПокупателю", 	"Счет на оплату покупателю");
		
		СделкиИсх 	= Новый СписокЗначений;
		СделкиИсх.Добавить("ЗаказПоставщику", 			"Заказ поставщику");
		СделкиИсх.Добавить("СчетНаОплатуПоставщика", 	"Счет на оплату поставщика");
		
		ОбъектыТиповойКонфигурации.Вставить("ТипыДокументовСделкиПриход", СделкиВх);
		ОбъектыТиповойКонфигурации.Вставить("ТипыДокументовСделкиРасход", СделкиИсх);
		
	ИначеЕсли Конфигурация = "УПП" Тогда
		
		//Справочники
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаОрганизации", 	"Организации");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаСчет", 			"БанковскиеСчета");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаКонтрагенты", 	"Контрагенты");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаПодразделения", 	"Подразделения");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаДоговоры", 		"ДоговорыКонтрагентов");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаБанки", 			"Банки");
		//ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаОтветственный", "Пользователи");
		
		//Документы
		ВыпискиВх 	= Новый СписокЗначений;
		ВыпискиВх.Добавить("ПлатежноеПоручениеВходящее",				"Платежное поручение входящее");
		ВыпискиВх.Добавить("ПлатежноеТребованиеВыставленное",			"Платежное требование выставленное");
		ВыпискиВх.Добавить("ПлатежноеТребованиеПоручениеВыставленное",	"Платежное требование-поручение выставленное");
		ВыпискиВх.Добавить("ПлатежныйОрдерПоступлениеДенежныхСредств",	"Платежный ордер: поступление денежных средств");
		ВыпискиВх.Добавить("АккредитивПолученный",						"Аккредитив полученный");
		//ВыпискиВх.Добавить("ОбъявлениеНаВзносНаличными",				"Объявление на взнос наличными");
		
		ВыпискиИсх 	= Новый СписокЗначений;
		ВыпискиИсх.Добавить("ПлатежноеПоручениеИсходящее",				"Платежное поручение исходящее");
		ВыпискиИсх.Добавить("ПлатежноеТребованиеПолученное",			"Платежное требование полученное");
		ВыпискиИсх.Добавить("ПлатежноеТребованиеПоручениеПолученное",	"Платежное требование-поручение полученное");
		ВыпискиИсх.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств",	"Платежный ордер: списание денежных средств");
		ВыпискиИсх.Добавить("АккредитивПереданный",						"Аккредитив переданный");
		//ВыпискиИсх.Добавить("ДенежныйЧек",								"Денежный чек");
		
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаПриход", ВыпискиВх);
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаРасход", ВыпискиИсх);
		
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаПриходПоУмолчанию", "ПлатежноеПоручениеВходящее");
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаРасходПоУмолчанию", "ПлатежноеПоручениеИсходящее");
		
		//Сделки
		сзСделки = Новый СписокЗначений;
		сзСделки.Добавить("ОтчетКомитентуОПродажах",					"Отчет комитенту о продажах товаров");
		сзСделки.Добавить("АктОбОказанииПроизводственныхУслуг",			"Акт об оказании производственных услуг");
		сзСделки.Добавить("СчетНаОплатуПоставщика",						"Счет на оплату поставщика");
		сзСделки.Добавить("АккредитивПолученный",						"Аккредитив полученный");
		сзСделки.Добавить("ПлатежноеПоручениеВходящее",					"Платежное поручение входящее");
		сзСделки.Добавить("ВозвратТоваровПоставщику",					"Возврат товаров поставщику");
		сзСделки.Добавить("ЗаказПоставщику",							"Заказ поставщику");
		//сзСделки.Добавить("КорректировкаДолга",							"Корректировка долга");
		сзСделки.Добавить("ПлатежноеТребованиеПолученное",				"Платежное требование полученное");
		сзСделки.Добавить("РасходныйКассовыйОрдер",						"Расходный кассовый ордер");
		сзСделки.Добавить("АккредитивПереданный",						"Аккредитив переданный");
		сзСделки.Добавить("РеализацияТоваровУслуг",						"Реализация товаров и услуг");
		сзСделки.Добавить("ЗаказПокупателя",							"Заказ покупателя");
		сзСделки.Добавить("КорректировкаДолгаПоВозвратнойТаре",			"КорректировкаДолгаПоВозвратнойТаре");
		//сзСделки.Добавить("ПередачаОС",									"Передача ОС");
		сзСделки.Добавить("ПриходныйКассовыйОрдер",						"Приходный кассовый ордер");
		сзСделки.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств",		"Платежный ордер: списание денежных средств");
		сзСделки.Добавить("СчетНаОплатуПокупателю",						"Счет на оплату покупателю");
		сзСделки.Добавить("ВозвратТоваровОтПокупателя",					"Возврат товаров от покупателя");
		сзСделки.Добавить("ОтчетКомиссионераОПродажах",					"Отчет комиссионера о продажах");
		сзСделки.Добавить("ПлатежноеТребованиеВыставленное",			"Платежное требование выставленное");
		сзСделки.Добавить("ПлатежныйОрдерПоступлениеДенежныхСредств",	"Платежный ордер: поступление денежных средств");
		сзСделки.Добавить("ПлатежноеПоручениеИсходящее",				"Платежное поручение исходящее");
		сзСделки.Добавить("ПоступлениеДопРасходов",						"Поступление доп. расходов");
		сзСделки.Добавить("ПоступлениеТоваровУслуг",					"Поступление товаров и услуг");
		сзСделки.СортироватьПоЗначению();
		
		ОбъектыТиповойКонфигурации.Вставить("ТипыДокументовСделки", сзСделки);
		
		// Сделка: Счет-Заказ
		СделкиВх 	= Новый СписокЗначений;
		СделкиВх.Добавить("ЗаказПокупателя", 			"Заказ покупателя");
		СделкиВх.Добавить("СчетНаОплатуПокупателю", 	"Счет на оплату покупателю");
		
		СделкиИсх 	= Новый СписокЗначений;
		СделкиИсх.Добавить("ЗаказПоставщику", 			"Заказ поставщику");
		СделкиИсх.Добавить("СчетНаОплатуПоставщика", 	"Счет на оплату поставщика");
		
		ОбъектыТиповойКонфигурации.Вставить("ТипыДокументовСделкиПриход", СделкиВх);
		ОбъектыТиповойКонфигурации.Вставить("ТипыДокументовСделкиРасход", СделкиИсх);
		
	ИначеЕсли Конфигурация = "БУ" Тогда
		
		//Справочники
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаОрганизации", 	"Организации");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаСчет", 			"БанковскиеСчета");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаКонтрагенты", 	"Контрагенты");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаПодразделения", 	"Подразделения");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаДоговоры", 		"ДоговорыКонтрагентов");
		ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаБанки", 			"Банки");
		//ОбъектыТиповойКонфигурации.Вставить("ТипСправочникаОтветственный", "Пользователи");
		
		//Документы
		ВыпискиВх 	= Новый СписокЗначений;
		ВыпискиВх.Добавить("ПлатежноеПоручениеВходящее",				"Платежное поручение входящее");
		ВыпискиВх.Добавить("ПлатежныйОрдерПоступлениеДенежныхСредств",	"Платежный ордер: поступление денежных средств");
		
		ВыпискиИсх 	= Новый СписокЗначений;
		ВыпискиИсх.Добавить("ПлатежноеПоручениеИсходящее",				"Платежное поручение исходящее");
		ВыпискиИсх.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств",	"Платежный ордер: списание денежных средств");
		
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаПриход", ВыпискиВх);
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаРасход", ВыпискиИсх);
		
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаПриходПоУмолчанию", "ПлатежноеПоручениеВходящее");
		ОбъектыТиповойКонфигурации.Вставить("ТипДокументаВыпискаРасходПоУмолчанию", "ПлатежноеПоручениеИсходящее");
		
		
		//Сделки
		сзСделки = Новый СписокЗначений;
		сзСделки.Добавить("ОтчетКомитентуОПродажах",					"Отчет комитенту о продажах товаров");
		сзСделки.Добавить("ОтчетКомиссионераОПродажах",					"Отчет комиссионера о продажах");
		сзСделки.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств",		"Платежный ордер: списание денежных средств");
		сзСделки.Добавить("ПлатежныйОрдерПоступлениеДенежныхСредств",	"Платежный ордер: поступление денежных средств");
		сзСделки.Добавить("ПриходныйКассовыйОрдер",						"Приходный кассовый ордер");
		сзСделки.Добавить("РасходныйКассовыйОрдер",						"Расходный кассовый ордер");
		сзСделки.Добавить("ПлатежноеПоручениеВходящее",					"Платежное поручение входящее");
		сзСделки.Добавить("ПлатежноеПоручениеИсходящее",				"Платежное поручение исходящее");
		сзСделки.Добавить("ПоступлениеДопРасходов",						"Поступление доп. расходов");
		сзСделки.Добавить("ПоступлениеТоваровУслуг",					"Поступление товаров и услуг");
		сзСделки.Добавить("РеализацияТоваровУслуг",						"Реализация товаров и услуг");
		сзСделки.Добавить("АктОбОказанииПроизводственныхУслуг",			"Акт об оказании производственных услуг");
		сзСделки.Добавить("ВозвратТоваровПоставщику",					"Возврат товаров поставщику");
		сзСделки.Добавить("ВозвратТоваровОтПокупателя",					"Возврат товаров от покупателя");
		//сзСделки.Добавить("ПередачаОС",									"Передача ОС");
		//сзСделки.Добавить("ДокументРасчетовСКонтрагентом",				"Документ расчетов с контрагентом (ручной учет)");
		//сзСделки.Добавить("ПоступлениеНМА",								"Поступление НМА");
		//сзСделки.Добавить("ПередачаНМА",								"Передача НМА");
		сзСделки.СортироватьПоЗначению();
		
		ОбъектыТиповойКонфигурации.Вставить("ТипыДокументовСделки", сзСделки);
		
		// Сделка: Счет-Заказ
		СделкиВх 	= Новый СписокЗначений;
		СделкиВх.Добавить("СчетНаОплатуПокупателю", 	"Счет на оплату покупателю");
		
		СделкиИсх 	= Новый СписокЗначений;
		СделкиИсх.Добавить("СчетНаОплатуПоставщика", 	"Счет на оплату поставщика");
		
		ОбъектыТиповойКонфигурации.Вставить("ТипыДокументовСделкиПриход", СделкиВх);
		ОбъектыТиповойКонфигурации.Вставить("ТипыДокументовСделкиРасход", СделкиИсх);
		
		
	КонецЕсли;	
	
КонецПроцедуры // ИнициализацияОбъектовКонфигурации()	

// Функция возвращает имя объекта/параметра конфигурации (ОбъектыТиповойКонфигурации[ИмяОбъекта]).
// 
//
Функция ПолучитьИмяОбъектаКонфигурации(ИмяОбъекта) Экспорт
	Возврат ОбъектыТиповойКонфигурации[ИмяОбъекта];
КонецФункции	


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с внешними файлами: 
// AllBanks.ini, AllFormats.ini, ClientBank.ini, Abbrs.ini, reginfo.txt

// Читает файлы AllBanks.ini, AllFormats.ini, ClientBank.ini, Abbrs.ini
// формируется соответствие сооМФОФормат МФО -> Формат
// формируется соответствие сооФорматИмяФайлаОбработкиФормата Формат -> ПолноеИмяФайлаОбработкиФормата
// формируется список значений СписокФорматов для выбора в поле Формат
// доступные для выбора форматы из файла ClientBank.ini
//
// Формируется список значений СокращенияТиповОрганизаций, содержащий возможные сокращения 
//
// В файле AllBanks.ini находится список МФО1, МФО2, ... МФОN;НазваниеФормата
// В файле ClientBank.ini находится список НазваниеФормата;ИмяФайлаОбработкиФормата
// В файле Abbrs.ini находится список сокращений типов организаций
//
// Параметры: нет
//
//
Функция ПрочитатьИниФайлы(ЭлементыФормы) Экспорт
	
	Файл = Новый ТекстовыйДокумент();
	
	ИмяФайлаВБИни = ИмяКаталогаКБ + "AllBanks.ini";
	
	Если НЕ СуществуетФайл(ИмяФайлаВБИни) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Файл.Прочитать(ИмяФайлаВБИни);
	
	сооМФОФормат = Новый Соответствие;
	
	Для н = 1 По Файл.КоличествоСтрок() Цикл
		СтрокаИзФайла = Файл.ПолучитьСтроку(н);
		Если СокрЛП(СтрокаИзФайла) = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Поз = Найти(СтрокаИзФайла,";");
		ИмяФормата = Сред(СтрокаИзФайла,Поз + 1);
		СтрокаИзФайла = Сред(СтрокаИзФайла,1, Поз - 1);
		
		Поз2 = Найти(СтрокаИзФайла,",");
		Пока Поз2 Цикл
			КодМФО = Сред(СтрокаИзФайла,1, Поз2 - 1);
			сооМФОФормат.Вставить(КодМФО, ИмяФормата);
			СтрокаИзФайла = Сред(СтрокаИзФайла,Поз2 + 1);
			Поз2 = Найти(СтрокаИзФайла,",");
		КонецЦикла;	
		
		//Последний код МФО из СтрокаИзФайла
		сооМФОФормат.Вставить(СтрокаИзФайла, ИмяФормата);
	КонецЦикла;
	
	
	ФайлВФ = Новый ТекстовыйДокумент();
	
	ИмяФайлаВФИни = ИмяКаталогаКБ + "AllFormats.ini";
	Если НЕ СуществуетФайл(ИмяФайлаВФИни) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФайлВФ.Прочитать(ИмяФайлаВФИни);
	
	тчВсеФорматыОбмена.Очистить();
	сзВсеФорматыОбмена.Очистить();
	
	Для н = 1 По ФайлВФ.КоличествоСтрок() Цикл
		СтрокаИзФайла = ФайлВФ.ПолучитьСтроку(н);
		Если СокрЛП(СтрокаИзФайла) = "" Тогда
			Продолжить;
		КонецЕсли;
		Поз = Найти(СтрокаИзФайла,";");
		ИмяФормата = Сред(СтрокаИзФайла, 1, Поз - 1);
		
		ИмяФайлаОбработки = Сред(СтрокаИзФайла,Поз + 1);
		ПолноеИмяФайлаОбработки = ИмяКаталогаКБ + ИмяФайлаОбработки;
		
		СтрокаВсеФорматыОбмена = тчВсеФорматыОбмена.Добавить();
		
		СтрокаВсеФорматыОбмена.Установлен = Ложь;
		
		СтрокаВсеФорматыОбмена.ИмяФормата = ИмяФормата;
		СтрокаВсеФорматыОбмена.ИмяФайла = ИмяФайлаОбработки;
		СтрокаВсеФорматыОбмена.СуществуетФайл = СуществуетФайл(ПолноеИмяФайлаОбработки,,Истина);
		
		сзВсеФорматыОбмена.Добавить(ИмяФормата, ИмяФормата);
		
	КонецЦикла;
	
	
	СписокФорматов = ПрочитатьИспользуемыеФорматыОбмена();
	ЭлементыФормы.ФорматОбмена.СписокВыбора = СписокФорматов;
	ЭлементыФормы.ФорматОбмена1.СписокВыбора = СписокФорматов;
	
	ФайлАБ = Новый ТекстовыйДокумент();
	
	ИмяФайлаАБИни = ИмяКаталогаКБ + "Abbrs.ini";
	Если НЕ СуществуетФайл(ИмяФайлаАБИни) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФайлАБ.Прочитать(ИмяФайлаАБИни);
	
	СокращенияТиповОрганизаций = Новый СписокЗначений; 
	Для н = 1 По ФайлАБ.КоличествоСтрок() Цикл
		СтрокаИзФайла = СокрЛП(ФайлАБ.ПолучитьСтроку(н));
		Если СтрокаИзФайла = "" Тогда
			Продолжить;
		КонецЕсли;
		СокращенияТиповОрганизаций.Добавить(СтрокаИзФайла, СтрокаИзФайла);
	КонецЦикла;

	ФорматыОбмена = НастройкиОбработки.ФорматыОбмена;
	Если ФорматыОбмена <> Неопределено И ТипЗнч(ФорматыОбмена) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ТекФорматОбмена Из ФорматыОбмена Цикл
			сооМФОФормат.Вставить(ТекФорматОбмена.МФО, ТекФорматОбмена.ИмяФормата);	
			сооФорматИмяФайлаОбработкиФормата.Вставить(ТекФорматОбмена.ИмяФормата, ИмяКаталогаКБ + "\" + ТекФорматОбмена.ИмяФайлаОбработкиФормата);	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПрочитатьИниФайлы()

// Читает регистрационную информацию с файла КаталогПродукта+"reginfo.txt", записывает в структуру РегИнфо
//
// Параметры: нет
//
//
Процедура ПрочитатьРегИнфо() Экспорт
	
	РегИнфо = Новый Структура;
	ИмяКаталогаКБ = НастройкиОбработки.ИмяКаталогаКБ;
	
	ФайлРИ = Новый ТекстовыйДокумент();
	ИмяФайлаРИ = ИмяКаталогаКБ + "reginfo.txt";
	
	Если НЕ СуществуетФайл(ИмяФайлаРИ,,Истина) Тогда
		РегИнфо.Вставить("РегНомер1", "KLB8");
		РегИнфо.Вставить("РегНомер2", "");
		РегИнфо.Вставить("РегНомер3", "");
		РегИнфо.Вставить("РегНомер4", "");
		РегИнфо.Вставить("НазваниеОрганизации", "");
		Возврат;
	КонецЕсли;
	
	ФайлРИ.Прочитать(ИмяФайлаРИ);
	
	Для н = 1 По ФайлРИ.КоличествоСтрок() Цикл
		Если н > 2 Тогда
			// у нас только 2 строки
			Прервать;
		КонецЕсли; 
		СтрокаИзФайла = ФайлРИ.ПолучитьСтроку(н);
		Если н = 1 Тогда
			// разбираем рег. номер прямо здесь на 4 составляющие
			РегИнфо.Вставить("РегНомер1", Сред(СтрокаИзФайла,  1, 4));
			РегИнфо.Вставить("РегНомер2", Сред(СтрокаИзФайла,  6, 4));
			РегИнфо.Вставить("РегНомер3", Сред(СтрокаИзФайла, 11, 4));
			РегИнфо.Вставить("РегНомер4", Сред(СтрокаИзФайла, 16, 4));
		ИначеЕсли н = 2 Тогда
			РегИнфо.Вставить("НазваниеОрганизации", СтрокаИзФайла);
		Иначе
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры // ПрочитатьРегИнфо()
 
// Записывает регистрационную информацию в файл КаталогПродукта+"reginfo.txt", со структуры РегИнфо
//
// Параметры: нет 
//
//
Процедура ЗаписатьРегИнфо() Экспорт

	ИмяКаталогаКБ = НастройкиОбработки.ИмяКаталогаКБ;
	ФайлРИ = Новый ТекстовыйДокумент();
	ИмяФайлаРИ = ИмяКаталогаКБ + "reginfo.txt";
	
	сТире = "-";
	ФайлРИ.ДобавитьСтроку(РегИнфо.РегНомер1 + сТире + РегИнфо.РегНомер2 + сТире + РегИнфо.РегНомер3 + сТире + РегИнфо.РегНомер4);
	ФайлРИ.ДобавитьСтроку(РегИнфо.НазваниеОрганизации);
	
	ФайлРИ.Записать(ИмяФайлаРИ, КодировкаТекста.ANSI);
	
	Сообщить("Записан файл " + ИмяФайлаРИ);

КонецПроцедуры // ЗаписатьРегИнфо()

// Формирует файл - запрос на форматы обработок
//
// Параметры: 
//
//  сзФайлы      – СписокЗначений - список файлов
//
// Возвращаемое значение:
//
//   Булево   – Истина при удачной записи файла
//                 
//
Функция СформироватьФайлЗапроса(сзФайлы) Экспорт 
	
	ИмяКаталогаКБ = НастройкиОбработки.ИмяКаталогаКБ;
	ФайлЗапроса = Новый ТекстовыйДокумент();
	ИмяФайлаЗапроса = ИмяКаталогаКБ + "qKLB8.txt";
	
	СисИнфо = Новый СистемнаяИнформация;
	
	сТире = "-";
	ФайлЗапроса.ДобавитьСтроку(РегИнфо.РегНомер1 + сТире + РегИнфо.РегНомер2 + сТире + РегИнфо.РегНомер3 + сТире + РегИнфо.РегНомер4);
	ФайлЗапроса.ДобавитьСтроку(РегИнфо.НазваниеОрганизации);
	
	ФайлЗапроса.ДобавитьСтроку("Версия 1С = " + СисИнфо.ВерсияПриложения);
	ФайлЗапроса.ДобавитьСтроку("Конфигурация 1С = " + Метаданные.Синоним + ", релиз " + Метаданные.Версия);
	ФайлЗапроса.ДобавитьСтроку("Версия КБ = " + ВерсияКБ);
	
	Для Каждого эсзФайлы Из сзФайлы Цикл
		ФайлЗапроса.ДобавитьСтроку(эсзФайлы.Значение);
	КонецЦикла; 
	
	Если сзФайлы.Количество() > 2 Тогда
		Сообщить("Запрашиваемое количество обработок превышает разрешенное (разрешено 2 обработки)", СтатусСообщения.Важное);
	КонецЕсли;	
	
	Попытка
		ФайлЗапроса.Записать(ИмяФайлаЗапроса , КодировкаТекста.ANSI);
		Сообщить("Записан файл " + ИмяФайлаЗапроса);
		Возврат Истина;
	Исключение
		// не удалось записать файл
		Возврат Ложь;
	КонецПопытки; 
КонецФункции // СформироватьФайлЗапроса()

// Читает тчИспользуемыеФорматыОбмена из файла ClientBank.ini
// также формирует список значений используемых форматов для выбора на основной форме
//
// Параметры: нет
//
// Возвращаемое значение:
//
//   СписокЗначений – список значений используемых форматов для выбора на основной форме
//
//
Функция ПрочитатьИспользуемыеФорматыОбмена() Экспорт

	ФайлКБ = Новый ТекстовыйДокумент();
	тчИспользуемыеФорматыОбмена.Очистить();
	СписокФорматов = Новый СписокЗначений; // СписокВыбора для ФорматОбмена
	сооФорматИмяФайлаОбработкиФормата = Новый Соответствие;
	
	ИмяКаталогаКБ = НастройкиОбработки.ИмяКаталогаКБ;
	ИмяФайлаКБИни = ИмяКаталогаКБ + "ClientBank.ini";
	
	Если НЕ СуществуетФайл(ИмяФайлаКБИни,,Истина) Тогда
		// файла еще может и не быть и это нормально
		Возврат СписокФорматов;
	КонецЕсли;
	
	ФайлКБ.Прочитать(ИмяФайлаКБИни);
	
	
	Для н = 1 По ФайлКБ.КоличествоСтрок() Цикл
		
		СтрокаИзФайла = ФайлКБ.ПолучитьСтроку(н);
		Если СокрЛП(СтрокаИзФайла) = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Поз = Найти(СтрокаИзФайла,";");
		ИмяФормата = Сред(СтрокаИзФайла, 1, Поз - 1);
		
		ИмяФайлаОбработки = Сред(СтрокаИзФайла,Поз + 1);
		ПолноеИмяФайлаОбработки = ИмяКаталогаКБ + ИмяФайлаОбработки;
		
		сооФорматИмяФайлаОбработкиФормата.Вставить(ИмяФормата, ПолноеИмяФайлаОбработки);
		СписокФорматов.Добавить(ИмяФормата, ИмяФормата);
		
		СтрокаИспользуемыеФорматыОбмена = тчИспользуемыеФорматыОбмена.Добавить();
		
		СтрокаИспользуемыеФорматыОбмена.ИмяФормата = ИмяФормата;
		СтрокаИспользуемыеФорматыОбмена.ИмяФайла = ИмяФайлаОбработки;
		СтрокаИспользуемыеФорматыОбмена.СуществуетФайл = СуществуетФайл(ПолноеИмяФайлаОбработки,,Истина);
	КонецЦикла;
	
	ФорматыОбмена = НастройкиОбработки.ФорматыОбмена;
	Если ФорматыОбмена <> Неопределено И ТипЗнч(ФорматыОбмена) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ТекФорматОбмена Из ФорматыОбмена Цикл
			ИмяФормата = ТекФорматОбмена.ИмяФормата; 
			ИмяФайлаОбработки = ТекФорматОбмена.ИмяФайлаОбработкиФормата;
			ПолноеИмяФайлаОбработки = ИмяКаталогаКБ + ИмяФайлаОбработки;
			
			сооФорматИмяФайлаОбработкиФормата.Вставить(ИмяФормата, ИмяКаталогаКБ + "\" + ИмяФайлаОбработки);	
			
			Если СписокФорматов.НайтиПоЗначению(ИмяФормата) = Неопределено Тогда
				СписокФорматов.Добавить(ИмяФормата, ИмяФормата);
			КонецЕсли;	
			
			СтрокаИспользуемыеФорматыОбмена = тчИспользуемыеФорматыОбмена.Добавить();
			
			СтрокаИспользуемыеФорматыОбмена.ИмяФормата = ИмяФормата;
			СтрокаИспользуемыеФорматыОбмена.ИмяФайла = ИмяФайлаОбработки;
			СтрокаИспользуемыеФорматыОбмена.СуществуетФайл = СуществуетФайл(ПолноеИмяФайлаОбработки,,Истина);
			
		КонецЦикла;	
	КонецЕсли;
	
	СписокФорматов.СортироватьПоЗначению();
	
	Возврат СписокФорматов;
	
КонецФункции // ПрочитатьИспользуемыеФорматыОбмена()

// Записует используемые форматы обмена из тчИспользуемыеФорматыОбмена в файл ClientBank.ini
//
// Параметры: нет
//
//
// Возвращаемое значение:
//
//   Булево   – Истина при удачной записи
//
// 
Функция ЗаписатьИспользуемыеФорматыОбмена() Экспорт
	ИмяКаталогаКБ = НастройкиОбработки.ИмяКаталогаКБ;
	ФайлИФ = Новый ТекстовыйДокумент();
	ИмяФайлаИФ = ИмяКаталогаКБ + "ClientBank.ini";
	
	// по строкам тчИспользуемыеФорматыОбмена
	Для Каждого СтрокатчИФО Из тчИспользуемыеФорматыОбмена Цикл
		ФайлИФ.ДобавитьСтроку(СтрокатчИФО.ИмяФормата + ";" + СтрокатчИФО.ИмяФайла);
	КонецЦикла; 
	Попытка
		ФайлИФ.Записать(ИмяФайлаИФ, КодировкаТекста.ANSI);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции // ЗаписатьИспользуемыеФорматыОбмена()


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, необходимые для поиска сделок, договоров, контрагентов

// Функция проверяет, является ли символ "Символ", цифрой либо символы-разделители 
// "/", "\", "-", "|"
//
// Параметры:
//  	Символ - Строка
//
// Возвращает 
//	Истина - является
//  Ложь - нет
//
Функция ЭтоЦифра(Символ) Экспорт
	Если (Символ >= "0" И Символ <= "9" ) ИЛИ 
		  Символ = "/" ИЛИ Символ = "\" ИЛИ Символ = "-" ИЛИ Символ = "|" ИЛИ Символ = "," ИЛИ Символ = "." ИЛИ Символ = "%" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции // ЭтоЦифра()	

// Функция проверяет, является ли символ "Символ", цифрой либо символы-разделители 
// "/", "\", "-", "|"
//
// Параметры:
//  	Символ - Строка
//
// Возвращает 
//	Истина - является
//  Ложь - нет
//
Функция НомерСодержитЦифры(Номер) Экспорт
	
	ТекНомер = Номер;
	
	Пока СтрДлина (ТекНомер) > 0 Цикл
		Символ = Лев(ТекНомер, 1);	
		
		Если (Символ >= "0" И Символ <= "9" ) Тогда
			Возврат Истина;
		КонецЕсли;	
		
		ТекНомер = Сред(ТекНомер, 2);
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции // ЭтоЦифра()	

// Процедура формирует текст запроса для поиска сделки
//
Процедура СформироватьТекстЗапросаПоискаСделки() Экспорт
	
	// Приход
	типДокСделки = ПолучитьИмяОбъектаКонфигурации("ТипыДокументовСделкиПриход");
	
	ТекстЗапросаПоискаСделкиПриход = "";
	
	ДополнительноеУсловие = "";
	
	Если Конфигурация = "БУ" Тогда
		ДополнительноеУсловие = "
		| ДоговорКонтрагента.ВедениеВзаиморасчетов = &ВедениеВзаиморасчетовПоДоговорам	И ";
	КонецЕсли;	
	
	Для Каждого элТипДокСделки Из типДокСделки Цикл
		ТекстЗапросаПоискаСделкиПриход = ТекстЗапросаПоискаСделкиПриход + "ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Документ." + элТипДокСделки.Значение + "
		|
		|ГДЕ
		|	Контрагент = &Контрагент И
		|	Организация = &Организация И " + ДополнительноеУсловие + "
		|	Номер В (&СписокНомеров)
		|ОБЪЕДИНИТЬ
		|";
		
	КонецЦикла;	
			
	ТекстЗапросаПоискаСделкиПриход = Сред(ТекстЗапросаПоискаСделкиПриход, 1, стрДлина(ТекстЗапросаПоискаСделкиПриход)- 11 );
		
	// Расход
	типДокСделки = ПолучитьИмяОбъектаКонфигурации("ТипыДокументовСделкиРасход");
	
	ТекстЗапросаПоискаСделкиРасход = "";
	Для Каждого элТипДокСделки Из типДокСделки Цикл
		ТекстЗапросаПоискаСделкиРасход = ТекстЗапросаПоискаСделкиРасход + "ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Документ." + элТипДокСделки.Значение + "
		|
		|ГДЕ
		|	Контрагент = &Контрагент И
		|	Организация = &Организация И " + ДополнительноеУсловие + "
		|	Номер В (&СписокНомеров)
		|ОБЪЕДИНИТЬ
		|";
		
	КонецЦикла;	
			
	ТекстЗапросаПоискаСделкиРасход = Сред(ТекстЗапросаПоискаСделкиРасход, 1, стрДлина(ТекстЗапросаПоискаСделкиРасход)- 11 );
	
КонецПроцедуры // СформироватьТекстЗапросаПоискаСделки()

// Фнкция находит сделки в документах, указанных в "типДокСделки" по заданным параметрам
//
// Параметры:
//		Номер - массив строк с возможными номерами выписок
//		Контрагент - СправочникСсылка.Контрагент
//		Организация - СправочникСсылка.Организация
//		
//		типДокСделки - массив строк с названием документов сделок
//
Функция НайтиСделки(Номер, Контрагент, Организация, ПриходРасход) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ПриходРасход = "Приход" Тогда
		Запрос.Текст = ТекстЗапросаПоискаСделкиПриход;
	Иначе	
		Запрос.Текст = ТекстЗапросаПоискаСделкиРасход;
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("СписокНомеров", Номер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Если Конфигурация = "БУ" Тогда
		Запрос.УстановитьПараметр("ВедениеВзаиморасчетовПоДоговорам", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
	КонецЕсли;	
	
	Результат = Запрос.Выполнить();
	ВыборкаТЧ = Результат.Выгрузить();
	
	Возврат ВыборкаТЧ;
	
КонецФункции // НайтиСделки()	

// Функция находит договора по заданным параметрам
//
// Параметры:
//
//		Номер - массив строк с возможными номерами выписок
//		Контрагент - СправочникСсылка.Контрагент
//		Организация - СправочникСсылка.Организация
//		
//
Функция НайтиДоговора(Номер,  Контрагент, Организация) Экспорт
	
	// наименование договора содержит номер
	// Наименование ПОДОБНО %Номер%
	// + или совпадает со значением в реквизите Номер 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("СписокНомеров", Номер);
	
	ТекстНомер = "(Номер В (&СписокНомеров) ИЛИ ";
	Для Каждого элНомера Из Номер Цикл
		ТекстНомер = ТекстНомер + " (Наименование ПОДОБНО ""%" + элНомера + "%"") ИЛИ ";
	КонецЦикла;	
	ТекстНомер = Сред(ТекстНомер, 1, стрДлина(ТекстНомер) - 4) + ")";
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник." + ПолучитьИмяОбъектаКонфигурации("ТипСправочникаДоговоры") + "
	|
	|ГДЕ
	|	Владелец = &Контрагент И
// 	организация в договоре может быть пустая - это означает, что договор применим ко всем организациям 
	|	(Организация = &Организация ИЛИ Организация = &ПустаяОрганизация) И
	|	" + ТекстНомер + "
	|";
		
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Выборка;
	
КонецФункции // НайтиДоговора()	

// Делает запрос к справочнику Юридические Лица и ФизическиеЛица (УТ)
// либо к справочнику Контрагенты для УПП
//
// Параметры:
//
//  ОКПО  – Строка – код по ЕДРПОУ или ДРФО
//  Наименование  – Строка – имя контрагента
//
//  Возвращает: ЮрЛица/ФизЛица с данным ОКПО, либо наименованием (УТ)
//  Возвращает: Контрагент с данным ОКПО, либо наименованием (УПП)
//
Функция НайтиПоОКПО(ОКПО, Наименование) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапросаОКПО = "";
	
	// Если ОКПО пусто, не ищем по нему, только по Наименованию юр лица.
	
	Если Не ПустаяСтрока(ОКПО) Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ПометкаУдаления = ЛОЖЬ
		|	И (Контрагенты.КодПоЕДРПОУ В (&ОКПО))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ПометкаУдаления = ЛОЖЬ
		|	И Контрагенты.КодПоЕДРПОУ = &ПустойОКПО
		|	И (Контрагенты.Наименование = &Имя
		|			ИЛИ Контрагенты.Наименование = &ИмяПреобразованное
		|			ИЛИ Контрагенты.НаименованиеПолное ПОДОБНО &Имя)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		МассивОКПО = Новый Массив;
		МассивОКПО.Добавить(Формат(Число(ОКПО),"ЧГ=0")); //ОКПО
		МассивОКПО.Добавить(Формат(Число(ОКПО),"ЧЦ=8;ЧВН=;ЧГ=0")); //ОКПО8
		МассивОКПО.Добавить(Формат(Число(ОКПО),"ЧЦ=12;ЧВН=;ЧГ=0")); //ОКПО12
		
		Запрос.УстановитьПараметр("ОКПО", МассивОКПО);
		Запрос.УстановитьПараметр("ПустойОКПО", "");
		
	Иначе	
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ПометкаУдаления = ЛОЖЬ
		|	И (Контрагенты.Наименование = &Имя
		|			ИЛИ Контрагенты.Наименование = &ИмяПреобразованное
		|			ИЛИ Контрагенты.НаименованиеПолное ПОДОБНО &Имя)
		|";		
		
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("Имя", Наименование);
	Запрос.УстановитьПараметр("ИмяПреобразованное", ПреобразоватьНаименованиеКонтрагента(Наименование));
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат Выборка;
	
КонецФункции // НайтиПоОКПО()	

Процедура УдалитьВНомереСимволыЛП(Номер) 
	
	ПравСимвол = Прав(Номер, 1);
	НомерДлина = СтрДлина(Номер);
	
	Пока НомерДлина > 0 И (ПравСимвол = "," Или ПравСимвол = "." Или ПравСимвол = "-" Или ПравСимвол = "/" Или ПравСимвол = "\") Цикл
		Номер = Сред(Номер, 1, НомерДлина - 1);
		
		ПравСимвол = Прав(Номер, 1);
		
		НомерДлина = НомерДлина - 1;
		
	КонецЦикла;	
	
	ЛевыйСимвол = Лев(Номер, 1);
	НомерДлина = СтрДлина(Номер);
	
	Пока НомерДлина > 0 И (ЛевыйСимвол = "," Или ЛевыйСимвол = "." Или ЛевыйСимвол = "-" Или ЛевыйСимвол = "/" Или ЛевыйСимвол = "\") Цикл
		Номер = Сред(Номер, 2);
		
		ЛевыйСимвол = Лев(Номер, 1);
		
		НомерДлина = НомерДлина - 1;
	КонецЦикла;	
	
КонецПроцедуры	
	
// Функция ищет подстроки в строке "Содержание" содержащая цифры, либо символы-разделители 
// "/", "\", "-", "|"
//
// Параметры:
//  	Содержание - Строка
//
// Возвращает массив таких подстрок "Номер"
//
//
Функция НайтиНомер(Знач Содержание) Экспорт
	Список = Новый Массив;
	Номер = "";
	Пока СтрДлина (Содержание) > 0 Цикл
		Символ = Лев (Содержание, 1);
		Если ЭтоЦифра(Символ) Тогда
			Номер = Номер + Символ;
		Иначе
			Если Номер <> "" Тогда
				
				УдалитьВНомереСимволыЛП(Номер);
				
				// добавляем новый Номер в Список
				ПозТочка 	= Найти(Номер, ".");
				ПозЗпт 		= Найти(Номер, ",");
				ПозПроцент 	= Найти(Номер, "%");
				НомерДлина = СтрДлина(Номер);
				
				Если ПозТочка > 0 Или ПозПроцент > 0 Или ПозЗпт > 0 Тогда
					// с указанными символами номер пропускаем - дата, сумма, ставка НДС
				Иначе // если правый символ указанный (разделитель) - не включаем его	
					Если Номер <> "" И НомерСодержитЦифры(Номер) Тогда
						Список.Добавить(Номер);
					КонецЕсли;	
				КонецЕсли;
				Номер = "";
				
			КонецЕсли;
		КонецЕсли;	
		Содержание = Сред (Содержание, 2);
	КонецЦикла;
	
	Если Номер <> "" Тогда
		
		УдалитьВНомереСимволыЛП(Номер);
		
		// добавляем новый Номер в Список
		ПозТочка 	= Найти(Номер, ".");
		ПозЗпт 		= Найти(Номер, ",");
		ПозПроцент 	= Найти(Номер, "%");
		НомерДлина = СтрДлина(Номер);
		
		Если ПозТочка > 0 Или ПозПроцент > 0 Или ПозЗпт > 0 Тогда
			// с указанными символами номер пропускаем - дата, сумма, ставка НДС
		Иначе // если правый символ указанный (разделитель) - не включаем его	
			Если Номер <> "" И НомерСодержитЦифры(Номер) Тогда
				Список.Добавить(Номер);
			КонецЕсли;	
		КонецЕсли;
		Номер = "";
		
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции	

// Процедура дополняет массив для поиска сделок дополнительными номерами
//
// Параметры:
//  	Массив - переданный массив
//  	Префикс - Строка - префикс организации
//
Процедура масНомераСделокДополнить(Массив, Префикс) Экспорт
	// Массив дополняем текущими элементами: 
	// 1. нулями до длины = 11 ("ДлинаНомера")
	// 2. префикс + нулями до длины = 11 ("ДлинаНомера")
	// 3. префикс + номер
	
	ДлинаПрефикса = стрДлина(Префикс);
	ДлинаНомера = ДлинаНомераДокументов; //записать в настройки
	ДлинаНомерБезПрефикса = ДлинаНомера - ДлинаПрефикса;
	Колво = Массив.Количество() - 1;
	Для н = 0 По Колво Цикл
		Нули = "00000000000";
		эл = Массив[н];
		эл1 = Лев(Нули, ДлинаНомера - стрДлина (эл)) + эл;
		Массив.Добавить (эл1); // 1. нулями до длины = 11 ("ДлинаНомера")
		эл2 = Лев(Нули, ДлинаНомерБезПрефикса - стрДлина (эл)) + эл;
		Массив.Добавить (Префикс + эл2); // 2. префикс + нулями до длины = 11 ("ДлинаНомера")
		эл3 = Префикс + эл;
		Массив.Добавить (эл3); // 3. префикс + номер
	КонецЦикла;	
	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с почтой
 
// Отправяет письмо с файлом-запросом на форматы обработок
//
// Параметры: нет
//
//
// Возвращаемое значение:
//
//   Булево – Истина при успешном отправлении
//
// 
Функция ОтправитьПисьмоЗапрос() Экспорт 
	
	Почта = Новый Почта;
//	Почта.Отключиться();
	Попытка
		Почта.Подключиться("");
	Исключение
		Предупреждение(НСтр("ru='Не удалось подключится к почте!';uk='Не вдалося підключиться до пошти!'"));
		Возврат Ложь;
	КонецПопытки;
	
	Сообщение = Новый ПочтовоеСообщение();
    Сообщение.Получатели.Добавить(АдресОтправки);
	
	Сообщение.Тема = "qKLB8";
	Сообщение.Текст = "";
	
	
	ИмяКаталогаКБ = НастройкиОбработки.ИмяКаталогаКБ;
	ИмяФайлаЗапроса = ИмяКаталогаКБ + "qKLB8.txt";
	Если НЕ СуществуетФайл(ИмяФайлаЗапроса,,Истина) Тогда
		Предупреждение(НСтр("ru='Не обнаружен файл запроса!';uk='Не виявлений файл запиту!'"));
		Возврат Ложь;
	КонецЕсли; 
	
	Сообщение.Вложения.Добавить(ИмяФайлаЗапроса);
	
	Попытка
		Почта.Послать(Сообщение);
		Почта.Отключиться();
	Исключение
	 	Предупреждение(НСтр("ru='Не удалось послать сообщение!';uk='Не вдалося послати повідомлення!'"));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ОтправитьПисьмоЗапрос()

// Отправяет письмо с файлом-запросом на форматы обработок
//
// Параметры: нет
//
//
// Возвращаемое значение:
//
//   Булево – Истина при успешном отправлении
//
// 
Функция ОтправитьПисьмоЗапросЛук() Экспорт 
	
	Попытка
		АутЛУК = Новый COMОбъект("Outlook.Application");
	Исключение
		Попытка
			Состояние(Нстр("ru = 'Загрузка Outlook...'; uk = 'Завантаження Outlook...'"));
			ЗапуститьПриложение("Outlook");
			АутЛУК = Новый COMОбъект("Outlook.Application");
		Исключение
			Предупреждение(Нстр("ru = 'Невозможно создать приложение Outlook!'; uk = 'Неможливо створити додаток Outlook!'"));
			Возврат Ложь;
		КонецПопытки;
	КонецПопытки;
	
	Состояние(Нстр("ru = 'Создание письма...'; uk = 'Створення листа...'"));
	
	АПП = АутЛУК.Application;
	Письмо = АПП.CreateItem(0);
	
	Письмо.To = АдресОтправки;
	
	Письмо.Subject = "qKLB8";
	Письмо.Body = "";
		
	Состояние(Нстр("ru = 'Вложение файлов...'; uk = 'Вкладення файлів...'"));
	
	ИмяКаталогаКБ = НастройкиОбработки.ИмяКаталогаКБ;
	ИмяФайлаЗапроса = ИмяКаталогаКБ + "qKLB8.txt";
	Если НЕ СуществуетФайл(ИмяФайлаЗапроса,,Истина) Тогда
		Предупреждение(НСтр("ru='Не обнаружен файл запроса!';uk='Не виявлений файл запиту!'"));
		Возврат Ложь;
	КонецЕсли; 
		
	Письмо.Attachments.Add(ИмяФайлаЗапроса, 1);
	Состояние(Нстр("ru = 'Отправка письма...'; uk = 'Відправлення листа...'"));
	
	Попытка
		Письмо.Send();
	Исключение
		Предупреждение(НСтр("ru='Не удалось послать сообщение!';uk='Не вдалося послати повідомлення!'"));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ОтправитьПисьмоЗапросЛук()


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с таблицами
 
//Процедура для тч Импорт либо Экспорт Устанавливает/Снимает/Инвертирует все флажки
//
Процедура УстановитьФлажок(ЗначФлага,тч) Экспорт 
	
	Для Каждого Строка Из тч Цикл
		Если ЗначФлага = Неопределено Тогда
			Строка.Флаг = Не Строка.Флаг;
		Иначе
			Строка.Флаг = ЗначФлага;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

// Сортирует переданную таблицу значений по типу сортировки
//
// Параметры:
//
//  тзСорт - сортируемая таблица
//	ТипСортировки - тип сортировки
//
// Возвращает отсортированную таблицу
//
Функция Сортировать(тзСорт, ТипСортировки) Экспорт
	
	ПорядокСортировки = "";
	Для Каждого эл Из ТипСортировки Цикл
		ПорядокСортировки = ПорядокСортировки + эл.Значение + ",";
	КонецЦикла;
	ПорядокСортировки = Сред(ПорядокСортировки, 1, СтрДлина(ПорядокСортировки) - 1);
	
	тзВрем = тзСорт.Скопировать();    //скопируем тзСорт во временную тзВрем
	тзВрем.Колонки.Добавить("Сумма");
	тзВрем.Колонки.Добавить("ПриходРасход");
	Для Каждого стр Из тзВрем Цикл
		стр.Сумма = стр.Приход + стр.Расход;
		Если стр.Расход > 0 Тогда
			стр.ПриходРасход = 1;
		Иначе
			стр.ПриходРасход = 0;
		КонецЕсли; 
	КонецЦикла;	
	
	тзВрем.Сортировать(ПорядокСортировки);
	тзВрем.Колонки.Удалить("Сумма");
	тзВрем.Колонки.Удалить("ПриходРасход");
	
	Возврат тзВрем;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции создания новых элементов справочника, а также 
// необходимая обработка наименований

// Создаёт новый элемент справочника ЮрЛицо
//
// Параметры:
//
// Реквизиты  – Структура
// Возвращает ссылку на созданный элемент справочника
//
Функция СоздатьСпрЮрЛицо(Реквизиты) Экспорт
	
	спрСсылкаЮрЛицо = ?(Реквизиты.ПР = "П", НастройкиОбработки.РодительНовыхЮрЛицПлатимМы, НастройкиОбработки.РодительНовыхЮрЛицПлатятНам);
	
	спрЮрЛицо = Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаЮрЛицо")];
	
	спрЮрЛицоОб = спрЮрЛицо.СоздатьЭлемент();
	
	спрЮрЛицоОб.Наименование		= ПреобразоватьНаименованиеКонтрагента(Реквизиты.Наименование);
	спрЮрЛицоОб.НаименованиеПолное	= Реквизиты.Наименование;
	спрЮрЛицоОб.КодПоЕДРПОУ			= Реквизиты.ОКПО;
	спрЮрЛицоОб.Родитель			= спрСсылкаЮрЛицо;
	
	// принимаем, что по умолчанию плательщик - возможно в дальнейшем можно вынести в настройки
	спрЮрЛицоОб.ПлательщикНалогаНаПрибыль = Истина;
	
	спрЮрЛицоОб.Комментарий = НСтр("ru='Автоматически создан при импорте с системы ""Клиент-Банк""';uk='Автоматично створений при імпорті із системи ""Клієнт-Банк""'");
	
	спрЮрЛицоОб.Записать();
	
	//создаем расчетный счет юридического лица
	спрРСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
	спрРСчет.Владелец 				= спрЮрЛицоОб.Ссылка;
	спрРСчет.Наименование 			= спрЮрЛицоОб.Ссылка.Наименование;
	спрРСчет.НомерСчета 			= Реквизиты.РСчет;
	спрРСчет.Банк 					= Справочники.Банки.НайтиПоКоду(Реквизиты.МФО);
	// валюта принимаем равной валюте счета, к-ый указан при импорте
	спрРСчет.ВалютаДенежныхСредств 	= Счет.ВалютаДенежныхСредств;
	
	спрРСчет.Записать();
	
	спрЮрЛицоОб.ОсновнойБанковскийСчет = спрРСчет.Ссылка;
	спрЮрЛицоОб.Записать();
	
	Возврат спрЮрЛицоОб.Ссылка;
	
КонецФункции // СоздатьСпрЮрЛицо()	

// Создаёт новый элемент справочника ФизЛицо
//
// Параметры:
//
// Реквизиты  – Структура
// Возвращает ссылку на созданный элемент справочника
//
Функция СоздатьСпрФизЛицо(Реквизиты) Экспорт
	
	спрСсылкаФизЛицо = ?(Реквизиты.ПР = "П", НастройкиОбработки.РодительНовыхФизЛицПлатимМы, НастройкиОбработки.РодительНовыхФизЛицПлатятНам);
	
	спрФизЛицо = Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаФизЛицо")];
	
	спрФизЛицоОб = спрФизЛицо.СоздатьЭлемент();
	
	спрФизЛицоОб.Наименование		= ПреобразоватьНаименованиеКонтрагента(Реквизиты.Наименование);
	спрФизЛицоОб.КодПоДРФО			= Реквизиты.ОКПО;
	спрФизЛицоОб.Родитель			= спрСсылкаФизЛицо;
	
	// принимаем, что по умолчанию физлицо не плательщик - возможно в дальнейшем можно вынести в настройки
	спрФизЛицоОб.ПлательщикНалогаНаПрибыль = Ложь;
	
	спрФизЛицоОб.Комментарий = НСтр("ru='Автоматически создан при импорте с системы ""Клиент-Банк""';uk='Автоматично створений при імпорті із системи ""Клієнт-Банк""'");
	
	спрФизЛицоОб.Записать();
	
	//создаем расчетный счет юридического лица
	спрРСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
	спрРСчет.Владелец 				= спрФизЛицоОб.Ссылка;
	спрРСчет.Наименование 			= спрФизЛицоОб.Ссылка.Наименование;
	спрРСчет.НомерСчета 			= Реквизиты.РСчет;
	спрРСчет.Банк 					= Справочники.Банки.НайтиПоКоду(Реквизиты.МФО);
	// валюта принимаем равной валюте счета, к-ый указан при импорте
	спрРСчет.ВалютаДенежныхСредств 	= Счет.ВалютаДенежныхСредств;
	
	спрРСчет.Записать();
	
	спрФизЛицоОб.ОсновнойБанковскийСчет = спрРСчет.Ссылка;
	спрФизЛицоОб.Записать();
	
	Возврат спрФизЛицоОб.Ссылка;
	
КонецФункции // СоздатьСпрФизЛицо()	

// Создаёт новый элемент справочника Контрагенты
//
// Параметры:
//
//  Реквизиты  – Структура
// Возвращает ссылку на созданный элемент справочника
//
Функция СоздатьСпрКонтрагент(Реквизиты) Экспорт
	
	спрСсылкаКонтрагент = ?(Реквизиты.ПР = "П", НастройкиОбработки.РодительНовыхКонтрагентовПлатятНам, НастройкиОбработки.РодительНовыхКонтрагентовПлатимМы); 
	
	спрКонтрагент = Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаКонтрагенты")];
	
	спрКонтрагентОб = спрКонтрагент.СоздатьЭлемент();
	
	спрКонтрагентОб.Наименование		= ПреобразоватьНаименованиеКонтрагента(Реквизиты.Наименование);
	спрКонтрагентОб.Родитель			= спрСсылкаКонтрагент;
	
	спрКонтрагентОб.КодПоЕДРПОУ			= Реквизиты.ОКПО;
	//спрКонтрагентОб.НаименованиеПолное	= спрКонтрагентОб.Наименование;
	спрКонтрагентОб.НаименованиеПолное	= Реквизиты.Наименование;
	
	Если Конфигурация = "УПП" Или Конфигурация = "УТ" Тогда
		Если Реквизиты.ПР = "П" Тогда
			спрКонтрагентОб.Покупатель 	= Истина;
		Иначе	
			спрКонтрагентОб.Поставщик 	= Истина;
		КонецЕсли;	
	ИначеЕсли Конфигурация = "БУ" Тогда
		спрКонтрагентОб.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	ИначеЕсли Конфигурация = "УТП" Тогда
		Если Реквизиты.ПР = "П" Тогда
			спрКонтрагентОб.Покупатель 	= Истина;
		Иначе	
			спрКонтрагентОб.Поставщик 	= Истина;
		КонецЕсли;	
		спрКонтрагентОб.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;	
		
	спрКонтрагентОб.Комментарий = НСтр("ru='Автоматически создан при импорте с системы ""Клиент-Банк""';uk='Автоматично створений при імпорті із системи ""Клієнт-Банк""'");
	
	спрКонтрагентОб.Записать();
	
	// Создадим Основной Договор, ВидыВзаиморасчетов - ПоСделкам (УТ), Владелец - Контрагент
	Договор = Справочники[ПолучитьИмяОбъектаКонфигурации("ТипСправочникаДоговоры")].СоздатьЭлемент();
	Договор.Владелец 				= спрКонтрагентОб.Ссылка;
	Договор.Наименование 			= НСтр("ru='Основной договор';uk='Основний договір'");
	// валюта принимаем равной валюте счета, к-ый указан при импорте
	Договор.ВалютаВзаиморасчетов 	= Счет.ВалютаДенежныхСредств;
		
	Если НЕ ЗначениеЗаполнено(Договор.Владелец) Тогда
		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	Иначе
		Если Конфигурация = "УПП" Или Конфигурация = "УТ" Или Конфигурация = "УТП" Тогда
			Если (Договор.Владелец.Покупатель И Договор.Владелец.Поставщик) ИЛИ (Договор.Владелец.Покупатель) Тогда
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			ИначеЕсли Договор.Владелец.Поставщик Тогда
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			Иначе
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
			КонецЕсли;
		Иначе	
			Если Реквизиты.ПР = "П" Тогда
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			Иначе
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	Договор.ВидДоговора 			= ВидДоговора; 
	
	Договор.ВедениеВзаиморасчетов 	= Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	
	Если Конфигурация = "БУ" Тогда
		Договор.ВедениеВзаиморасчетовНУ = Договор.ВедениеВзаиморасчетов;
	ИначеЕсли Конфигурация = "УПП" Тогда	
		Договор.ВедениеВзаиморасчетовРегл = Договор.ВедениеВзаиморасчетов;
	КонецЕсли;
	
	Договор.СхемаНалоговогоУчета    = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.ПоПервомуСобытию;

	Если Конфигурация = "БУ" Или Конфигурация = "УТП" Тогда 
		Договор.СложныйНалоговыйУчет = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеЗначениеСложныйНалоговыйУчет");
	КонецЕсли;	
	
	Договор.Организация 			= Организация;

	Договор.Комментарий = НСтр("ru='Автоматически создан при импорте с системы ""Клиент-Банк""';uk='Автоматично створений при імпорті із системи ""Клієнт-Банк""'");
	Договор.Записать();
	
	// в созданном Контрагенте, дополним поле "ОсновнойДоговорКонтрагента"
	спрКонтрагентОб.ОсновнойДоговорКонтрагента 		= Договор.Ссылка;
	спрКонтрагентОб.Записать();	
	
	спрКонтрагентОб.ОсновнойБанковскийСчет 		= ДобавитьСчетКонтрагента(спрКонтрагентОб.Ссылка, Реквизиты.РСчет, Реквизиты.МФО);
	спрКонтрагентОб.Записать();	
		
	Возврат спрКонтрагентОб.Ссылка;
	
КонецФункции // СоздатьСпрКонтрагент()	

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция НайтиДоговорКонтрагента(ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, КодВалюты="") Экспорт

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	Если НЕ ЗначениеЗаполнено(КодВалюты) Тогда
		ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
	Иначе
		ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду(КодВалюты);
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
		КонецЕсли;	
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат НСтр("ru='Не найден';uk='Не знайдений'")
	КонецЕсли;
	
КонецФункции // ПолучитьДоговорКонтрагента()

Функция ДобавитьБанкПоМФО(МФО)
	
	Если ПустаяСтрока(МФО) Тогда
		Сообщить(Нстр("ru = 'Ошибка создания банка: Не указан МФО!'; uk = 'Помилка створення банку: Не зазначений МФО!'"));
		Возврат Неопределено;
	КонецЕсли;	
	
	МФО = СокрЛП(МФО);
	
	// ищем по МФО
	НайтиБанк = Справочники.Банки.НайтиПоКоду(МФО, Истина);
	
	Если ЗначениеЗаполнено(НайтиБанк) Тогда
		Возврат НайтиБанк;
	КонецЕсли;	
	
	КлассификаторБанков = Справочники.Банки.ПолучитьМакет("КлассификаторБанков");
	
	// Области классификатора
	ОбластьКодМФО         	= КлассификаторБанков.Области.КодМФО;
	ОбластьНаименование 	= КлассификаторБанков.Области.Наименование;
	ОбластьГород  			= КлассификаторБанков.Области.Город;
	ОбластьАдрес  			= КлассификаторБанков.Области.Адрес;
	ОбластьЕДРПОУ  			= КлассификаторБанков.Области.ЕДРПОУ;
	ОбластьТелефоны			= КлассификаторБанков.Области.Телефоны;
	ОбластьКоррСчет			= КлассификаторБанков.Области.КоррСчет;
	
	ИскомаяСтрока = КлассификаторБанков.НайтиТекст(МФО,,ОбластьКодМФО,,Истина);
	
	Если ИскомаяСтрока = Неопределено Тогда
		Сообщить(Нстр("ru = 'Ошибка создания банка: В классификаторе банков нет элемента с МФО = '; uk = 'Помилка створення банку: У класифікаторі банків немає елемента із МФО = '") + МФО);
		Возврат Неопределено;
	Иначе	
		НомерСтроки = ИскомаяСтрока.Верх;
	КонецЕсли;	
	
	// для найденной строки из классификатора определим все реквизиты банка
	КодМФО         	= КлассификаторБанков.Область(НомерСтроки, ОбластьКодМФО.Лево, 			НомерСтроки, ОбластьКодМФО.Право).Текст;
	Наименование 	= КлассификаторБанков.Область(НомерСтроки, ОбластьНаименование.Лево, 	НомерСтроки, ОбластьНаименование.Право).Текст;
	Город  			= КлассификаторБанков.Область(НомерСтроки, ОбластьГород.Лево, 			НомерСтроки, ОбластьГород.Право).Текст;
	Адрес  			= КлассификаторБанков.Область(НомерСтроки, ОбластьАдрес.Лево, 			НомерСтроки, ОбластьАдрес.Право).Текст;
	ЕДРПОУ  		= КлассификаторБанков.Область(НомерСтроки, ОбластьЕДРПОУ.Лево, 			НомерСтроки, ОбластьЕДРПОУ.Право).Текст;
	Телефоны		= КлассификаторБанков.Область(НомерСтроки, ОбластьТелефоны.Лево, 		НомерСтроки, ОбластьТелефоны.Право).Текст;
	КоррСчет		= КлассификаторБанков.Область(НомерСтроки, ОбластьКоррСчет.Лево, 		НомерСтроки, ОбластьКоррСчет.Право).Текст;
	
	НовыйЭлемент = Справочники.Банки.СоздатьЭлемент();

	НовыйЭлемент.Код 			= КодМФО;
	НовыйЭлемент.Наименование 	= Наименование;
	НовыйЭлемент.Город 			= Город;
	НовыйЭлемент.Адрес 			= Адрес;
	НовыйЭлемент.КодПоЕДРПОУ 	= ЕДРПОУ;
	НовыйЭлемент.Телефоны 		= Телефоны;
	НовыйЭлемент.КоррСчет 		= КоррСчет;

	НовыйЭлемент.Записать();
	
	Сообщить(НСтр("ru = 'Создан банк с МФО = '; uk = 'Створений банк із МФО = '") + КодМФО);
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции	

// Добавляет новый банковский счет контрагенту
//
// Параметры:
//
//  НомерСчета  – Строка
//  Контрагент  – СправочникСсылка.Контрагенты
// Возвращает ссылку на созданный элемент справочника - СправочникСсылка.БанковскиеСчета
//
Функция ДобавитьСчетКонтрагента(Контрагент, НомерСчета, МФО) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(НомерСчета) Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;	
	
	спрБанкСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
	спрБанкСчет.Владелец 		= Контрагент;
	спрБанкСчет.Наименование 	= "По счету №"+ СокрЛП(НомерСчета);
	
	НайтиБанк = ДобавитьБанкПоМФО(МФО);
	
	Если ЗначениеЗаполнено(МФО) Тогда
		спрБанкСчет.Банк = НайтиБанк;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(спрБанкСчет.Банк) Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;	
	
	спрБанкСчет.НомерСчета 		= НомерСчета;
	спрБанкСчет.ВидСчета		= "Текущий";
	спрБанкСчет.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
	
	спрБанкСчет.Записать();
	
	Возврат спрБанкСчет.Ссылка;
	
КонецФункции // СоздатьСпрКонтрагент()	

// По номеру счета для контрагента ищем банковский счет (для УПП)
//
// Параметры:
//
//  НомерСчета  – Строка
//  Контрагент  – СправочникСсылка.Контрагенты
//
// Возвращает ссылку на найденный элемент - СправочникСсылка.БанковскиеСчета
Функция НайтиСчетКонтрагента(НомерСчета, Контрагент) Экспорт
	Если НЕ ЗначениеЗаполнено(НомерСчета) Или НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	И БанковскиеСчета.НомерСчета = &НомерСчета";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НомерСчета",	НомерСчета);
	Запрос.УстановитьПараметр("Владелец",	Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() = 0 Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;	
	
КонецФункции // НайтиСчетКонтрагента()	
	
// Убирает в коротком названии контрагента символы "
// перебирает в СокращенияТиповОрганизаций все сокращения и если сокращение подошло
// перемещает сокращение в конец краткого названия отделяя запятой
// Сокращение "подходит", если 
//
// - строка сокращения начинается с первой позиции в строке 
// - сразу после сокращения идет пробел или "
// 
// 
// Пример преобразования: ООО "Добро" -> Добро, ООО 
//
// Параметры:
//
//  НаименованиеКонтрагента  – Строка - преобразовываемое краткое название контрагента
//
// Возвращаемое значение:
//
//   Строка    – преобразованое краткое название контрагента
// 
Функция ПреобразоватьНаименованиеКонтрагента(НаименованиеКонтрагента)
	//НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
	Рез = НаименованиеКонтрагента;
	Для Каждого СокращениеЭлемент Из СокращенияТиповОрганизаций Цикл
		Сокращение = СокращениеЭлемент.Значение;
		// проверяем на 1-ую позицию
		Если Найти(Врег(НаименованиеКонтрагента), Врег(Сокращение)) = 1 Тогда
			Поз = СтрДлина(Сокращение) + 1;
			ПроверяемСимвол = Сред(НаименованиеКонтрагента, Поз, 1);
			Если (ПроверяемСимвол = " ") ИЛИ (ПроверяемСимвол = """") Тогда
				// нашли
				Рез = СокрЛП(Сред(НаименованиеКонтрагента, Поз+1));
				Рез = Рез + ", " + Сокращение;
				Прервать;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	// теперь уберем "
	Рез = СтрЗаменить(Рез, """", "");
	Возврат Рез;
КонецФункции // ПреобразоватьНаименованиеКонтрагента()

// Функция заменяет определённые символы в переданной строке 
//
// Параметры: 
// 		Стр - Строка - переданная строка для замены 
//
//
// Возвращаемое значение:
//
//   Строка - преобразованное значение
//
// 
Функция ЗаменитьСимволы(Стр) Экспорт
	СтрВозврата = Стр;
	СтрВозврата = СтрЗаменить(СтрВозврата, "Ї", "Є");
	СтрВозврата = СтрЗаменить(СтрВозврата, "ї", "є");
	СтрВозврата = СтрЗаменить(СтрВозврата, "Ў", "І");
	СтрВозврата = СтрЗаменить(СтрВозврата, "ў", "і");
	СтрВозврата = СтрЗаменить(СтрВозврата, "•", "ї");
	СтрВозврата = СтрЗаменить(СтрВозврата, "°", "Ї");
	Возврат СтрВозврата;
КонецФункции

// Функция заменяет определённые символы в переданной строке 
// в порядке, обратном функции ЗаменитьСимволы
// 
// Параметры: 
// 		Стр - Строка - переданная строка для замены 
//
//
// Возвращаемое значение:
//
//   Строка - преобразованное значение
//
// 
Функция ЗаменитьСимволыНазад(Стр) Экспорт
    Рез = СтрЗаменить(Стр,"Ї","Є");
    Рез = СтрЗаменить(Рез,"ї","є");
    Рез = СтрЗаменить(Рез,"Ў","І");
    Рез = СтрЗаменить(Рез,"ў","і");
    Рез = СтрЗаменить(Рез,"°","Ї");
    Рез = СтрЗаменить(Рез,"•","ї");
    Рез = СтрЗаменить(Рез, Символы.ПС, " ");
	Возврат Рез;
КонецФункции

Функция ПолучитьКодЕДРПОУ() Экспорт
	
	КодПоЕДРПОУ = "";
	
	Если ЗначениеЗаполнено(Организация) Тогда 
		Если Конфигурация = "УТ" Тогда
			КодПоЕДРПОУ = Организация.КодПоЕДРПОУ;
		Иначе	
			Данные = Новый Структура("Организация",Организация); 
			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(, Данные);
			Если КодыОрганизации.Количество()> 0 Тогда
				КодПоЕДРПОУ = КодыОрганизации[0].КодПоЕДРПОУ;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	Возврат КодПоЕДРПОУ;
			
КонецФункции			

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Определяет заполнено ли переданное значение
//
// Параметры: 
//  Значение - значение, заполенение которого надо проверить
//
// Возвращаемое значение:
//  Истина - значение не заполнено, ложь - иначе.
//
Функция клЗначениеНеЗаполнено(Значение) Экспорт

	Результат = Ложь;
	ТипЗначения = ТипЗнч(Значение);

	// Сначала примитивные типы
	Если Значение = Неопределено Тогда
		Результат = Истина;
	ИначеЕсли Значение = NULL Тогда
		Результат = Истина;
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Если СокрЛП(Значение) = "" Тогда
			Результат = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Если Значение = 0 Тогда
			Результат = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Если Значение = Дата('00010101') Тогда
			Результат = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Ложь; // Булево будем считать не пустым
		
	//Отдельное определение, так как конструкторов данного типа не существует	
	ИначеЕсли ТипЗначения = Тип("РежимПроведенияДокумента") Тогда
		Если Значение = РежимПроведенияДокумента.Неоперативный или Значение = РежимПроведенияДокумента.Оперативный тогда
			Результат = Ложь;
		КонецЕсли;
		
	// Для остальных будем считать значение пустым, если оно равно
	// дефолтному значению своего типа
	Иначе
		Если Значение = Новый(ТипЗначения) Тогда
			Результат = Истина;
		КонецЕсли; 
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции // клЗначениеНеЗаполнено()

// Возвращает курс валюты на дату
//
//
// Параметры:
//  Валюта    - Валюта (элемент справочника "Валюты")
//  ДатаКурса - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Курс, с учетом кратности
//
Функция клКурсДляВалюты(Валюта, ДатаКурса) Экспорт

	Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	Возврат Структура;
	
КонецФункции

// Процедура устанавливает номер документа.
//
// Параметры:
//  ДокументОбъект  - ДокументОбъект. Экземпляр документа, которому 
//                    необходимо присвоить новый номер
//
Процедура клУстановитьНомерДокумента(ДокументОбъект) Экспорт

	// Если  нет реквизита "Организация" или для нее не задан префикс, то 
	// используем пустой префикс,
	// иначе используем префикс организации.
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если Не клЕстьРеквизит("Организация", МетаданныеДокумента)
	 Или НЕ ЗначениеЗаполнено(ДокументОбъект.Организация.Префикс) Тогда

		ДокументОбъект.УстановитьНовыйНомер("00");

	Иначе

		ДокументОбъект.УстановитьНовыйНомер(ДокументОбъект.Организация.Префикс);

	КонецЕсли;

КонецПроцедуры // клУстановитьНомерДокумента()

// Позволяет определить есть ли среди реквизитов документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция клЕстьРеквизит(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // клЕстьРеквизит()

// Позволяет определить есть ли среди табличных частей документа
// табличная часть с переданным именем.
//
// Параметры: 
//  ИмяТЧ - строковое имя искомой таб части, 
//  МетаданныеДокумента - объект описания метаданных документа, среди табличных частей которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли табличную часть с таким именем, Ложь - не нашли.
//
Функция клЕстьТабличнаяЧасть(ИмяТЧ, МетаданныеДокумента) Экспорт

	Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТЧ) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // клЕстьТабличнаяЧасть()

// Функция возвращает курс ставку НДС
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты, валюта, по которой необходимо получить курс
//  ДатаКурса - Дата, календарная дата, на которую необходимо получить курс валюты
//
// Возвращаемое значение:
//	Курс переданной валюты на переданную дату, 1 в случае отсутствия значения.
//
Функция клПолучитьСтавкуНДС(СтавкаНДС) Экспорт

 	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		Возврат 20;
	КонецЕсли;

	Возврат 0;

КонецФункции // клПолучитьСтавкуНДС()

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция клПолучитьЗначениеПоУмолчанию(Пользователь, Настройка) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);

	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Значение
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
		|
		|ГДЕ
		|	Пользователь = &Пользователь
		| И Настройка    = &Настройка
		|";

	Выборка = Запрос.Выполнить().Выбрать();

	ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();
	
	Если Выборка.Количество() = 0 Тогда
		Если Настройка = "ОткрыватьПриЗапускеПанельФункций" Тогда
			Возврат Истина;
		ИначеЕсли Настройка = "ПоказыватьОписанияПанелиФункций" Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат ПустоеЗначение;
	ИначеЕсли Выборка.Следующий() Тогда
		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;

КонецФункции // клПолучитьЗначениеПоУмолчанию()

// Проверяет существование файла, выдает предупреждение, если файла нет
// Предупреждение может не выдаваться, если НеВыдаватьПредупреждения = Истина; 
// 
//
// Параметры:
//
//  ИмяПроверяемогоФайла  				– Строка  – имя файла, который проверяем
//  ТекстДополнительногоПредупреждения  – Строка –  текст, который будет присоединен к
//											предупреждению
//  НеВыдаватьПредупреждения 			– Булево - при Истина предупреждение не выдается
//  
//
// Возвращаемое значение:
//
//   Булево    – Истина - существует, Ложь - нет
// 
Функция СуществуетФайл(ИмяПроверяемогоФайла, ТекстДополнительногоПредупреждения = "", НеВыдаватьПредупреждения = Ложь) Экспорт
	ПроверяемФайл = Новый Файл(ИмяПроверяемогоФайла);
	Если ПроверяемФайл.Существует() Тогда
		Возврат Истина;
	Иначе
		
		Если Не НеВыдаватьПредупреждения Тогда
		
			ТекстПредупреждения = НСтр("ru='Файла с именем ';uk='Файлу з ім''ям '") + ИмяПроверяемогоФайла 
			+ НСтр("ru=' не существует!';uk=' не існує!'");
			
			Если НЕ ПустаяСтрока(ТекстДополнительногоПредупреждения) Тогда
				ТекстПредупреждения = ТекстПредупреждения + " " + ТекстДополнительногоПредупреждения;
			КонецЕсли; 
			
			Предупреждение(ТекстПредупреждения);
			
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли; 
КонецФункции // СуществуетФайл()

// Возвращает параметры для выбора сделки по виду операции.
//
Функция клОпределитьПараметрыВыбораСделки(ВидОперации=Неопределено) Экспорт
	
	ЗаказПокупателяПриход =  Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Расход","ЗаказПокупателя"); // Расход по регистру взаиморасчетов
    ЗаказПокупателяРасход =  Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Приход","ЗаказПокупателя"); // Приход по регистру взаиморасчетов
    ЗаказПоставщикуПриход =  Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Расход","ЗаказПоставщику"); // Расход по регистру взаиморасчетов
	ЗаказПоставщикуРасход =  Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Приход","ЗаказПоставщику"); // Приход по регистру взаиморасчетов
		
	Если ЗначениеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		ПараметрыСделкиПоВидуОпераций = Новый Соответствие();

		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,ЗаказПоставщикуРасход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);
		
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,ЗаказПокупателяПриход);
        ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,ЗаказПоставщикуПриход);
		
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,ЗаказПоставщикуРасход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);
		
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,ЗаказПокупателяПриход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,ЗаказПоставщикуПриход);
		
		Если Конфигурация = "УПП" Тогда
	 		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПлатежныйОрдерСписание.ОплатаПоставщику,ЗаказПоставщикуРасход);
	 		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПлатежныйОрдерСписание.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);
	 		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПлатежныйОрдерПоступление.ОплатаПокупателя,ЗаказПокупателяПриход);
	 		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПлатежныйОрдерПоступление.ВозвратДенежныхСредствПоставщиком,ЗаказПоставщикуПриход);
			ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,ЗаказПоставщикуРасход);
			ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);
	 		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППВходящее.ОплатаПокупателя,ЗаказПокупателяПриход);
	 		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППВходящее.ВозвратДенежныхСредствПоставщиком,ЗаказПоставщикуПриход);
		ИначеЕсли Конфигурация = "УТ" Или Конфигурация = "УТП" Тогда
			ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,ЗаказПоставщикуРасход);
			ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);
		КонецЕсли;	
			
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику,ЗаказПоставщикуРасход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);
				
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя,ЗаказПокупателяПриход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком,ЗаказПоставщикуПриход);
			
		Возврат ПараметрыСделкиПоВидуОпераций[ВидОперации];
		
	Иначе
		
		Возврат ЗаказПокупателяПриход;
		
	Конецесли;
	
КонецФункции // клОпределитьПараметрыВыбораСделки()

// Возвращает для определённого вида документа вид операции
//
Функция клОпределитьВидОперации(ВидДокумента) Экспорт
	
	Если ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		Возврат Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
	ИначеЕсли ВидДокумента = "ПлатежноеТребованиеПолученное" Тогда	
		Возврат Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
	ИначеЕсли ВидДокумента = "ПлатежноеТребованиеПоручениеПолученное" Тогда	
		Возврат Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда	
		Если Конфигурация = "УТ" Или Конфигурация = "БУ" Или Конфигурация = "УТП" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
		Иначе	
			Возврат Перечисления.ВидыОперацийПлатежныйОрдерСписание.ОплатаПоставщику;
		КонецЕсли;	
	ИначеЕсли ВидДокумента = "АккредитивПереданный" Тогда	
		Возврат Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
		
	ИначеЕсли ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда	
		Если Конфигурация = "УТ" Или Конфигурация = "БУ" Или Конфигурация = "УТП" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		Иначе
			Возврат Перечисления.ВидыОперацийППВходящее.ОплатаПокупателя;
		КонецЕсли;	
	ИначеЕсли ВидДокумента = "ПлатежноеТребованиеВыставленное" Тогда	
		Возврат Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
	ИначеЕсли ВидДокумента = "ПлатежноеТребованиеПоручениеВыставленное" Тогда	
		Возврат Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда	
		Если Конфигурация = "УТ" Или Конфигурация = "БУ" Или Конфигурация = "УТП" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		Иначе
			Возврат Перечисления.ВидыОперацийПлатежныйОрдерПоступление.ОплатаПокупателя;
		КонецЕсли;	
	ИначеЕсли ВидДокумента = "АккредитивПолученный" Тогда	
		Возврат Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции // клОпределитьВидОперации()	

// Процедура открывает форму выбора расчетного документа (сделки) (БУ)
//
// Параметры:
//
//  ПараметрОдин – Тип.Вид – описание параметра. 
//                 продолжение описания параметра. 
//  ПараметрДва  – Тип.Вид – описание параметра. 
//                 продолжение описания параметра.
//
Процедура клВыборРасчетногоДокумента(СтруктураПараметров,Элемент,ТипыДокументов) Экспорт

	ФормаВыбора = Документы.ДокументРасчетовСКонтрагентом.ПолучитьФорму("ФормаВыбора",Элемент);

	ФормаВыбора.Организация        = СтруктураПараметров.Организация;
	ФормаВыбора.Контрагент         = СтруктураПараметров.Контрагент;
	ФормаВыбора.ДоговорКонтрагента = СтруктураПараметров.ДоговорКонтрагента;
	ФормаВыбора.КонПериода         = СтруктураПараметров.КонецПериода;
	ФормаВыбора.Счет               = СтруктураПараметров.СчетДляОпределенияОстатков;
	ФормаВыбора.ОстаткиОбороты     = СтруктураПараметров.СторонаСчета;
	ФормаВыбора.РежимВыбора        = Истина;
	ФормаВыбора.мТипыДокументов    = ТипыДокументов;
	Если СтруктураПараметров.Свойство("НачалоПериода") Тогда
		ФормаВыбора.НачПериода         = СтруктураПараметров.НачалоПериода;
		ФормаВыбора.мПереданИнтервал = Истина;
	Иначе
		ФормаВыбора.мПереданИнтервал = Ложь;
	КонецЕсли; 

	ФормаВыбора.Открыть();

КонецПроцедуры // клВыборРасчетногоДокумента()

// Процедура выполняет стандартные действия при начале выбора сделки в формах документов.
//
// Параметры:
//  ДокументОбъект        - объект редактируемого документа;
//  ФормаДокумента        - форма редактируемого документа;
//  ЭлементФормы          - элемент формы документа, который надо заполнить; 
//  ДоговорКонтрагента - ссылка на справочник, определяет договор контрагента по сделке;
//  Сделка                - ссылка на документ, определяет собственно сделку;
//  СтрокаВидаДвижения    - строка, "Приход" или "Расход", определяет какие документы могут выступать
//                          в качестве расчетных: если документ выполняет расход по регистру то берем те,
//                          которые выполняют приход, и наоборот;
//  СтрокаТипаЗаказа      - строка, содержащая тип заказа (поставщику или покупателя).
//
Процедура клНачалоВыбораЗначенияСделки(ДокументОбъект, ФормаДокумента, ЭлементФормы, ДоговорКонтрагента, Сделка,
	                          СтрокаВидаДвижения, Знач СтрокаТипаЗаказа) Экспорт

	// Тип выбираемого значения зависит от договора.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение(НСтр("ru = 'Не выбран договор контрагента!'; uk = 'Не обраний договір контрагента!'"));
		//ФормаДокумента.ТекущийЭлемент = ФормаДокумента.ЭлементыФормы.Контрагент;
		Возврат;
	КонецЕсли;
	
	Если Конфигурация = "УТ" Или Конфигурация = "УПП" Или Конфигурация = "УТП" Тогда
		// Тип выбираемого значения зависит от договора.
		Если ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			СтандартнаяОбработка = Ложь;
			Предупреждение(Нстр("ru = 'По договорам с видом """"Прочее"""" не ведутся взаиморасчеты по сделкам!'; uk = 'По договорах з видом """"Інше"""" не ведуться взаєморозрахунки по угодах!'"));
			//ФормаДокумента.ТекущийЭлемент = ФормаДокумента.ЭлементыФормы.Контрагент;
			Возврат;
		КонецЕсли;
	КонецЕсли;	

	Если Конфигурация <> "УПП" И ДоговорКонтрагента.ВедениеВзаиморасчетов = 
		 Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда

		// Заполним возможный список типов документов, которые могут быть расчетными.
		СписокТипов = Новый СписокЗначений;
		Если СтрокаВидаДвижения = "Приход" Тогда

			// Заполним список документов, которые могут делать расход по регистру.
			// Список документов зависит от вида договора
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			 Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,         		Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя, 		Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                 		Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,             		Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,         		Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,				 		Метаданные.Документы["АккредитивПолученный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,			Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Имя,	Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Представление());
				
				Если Конфигурация = "УТ" Тогда
					СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПоручениеВыставленное"].Имя,	Метаданные.Документы["ПлатежноеТребованиеПоручениеВыставленное"].Представление());
					Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
						СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,               Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
					КонецЕсли;
				КонецЕсли;	
				
			ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			      Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя, 		Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                 		Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомитентуОПродажах"].Имя,            		Метаданные.Документы["ОтчетКомитентуОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеДопРасходов"].Имя,             		Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,            		Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,             		Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,         		Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,				 		Метаданные.Документы["АккредитивПолученный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,			Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Имя,	Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Представление());

				Если Конфигурация = "УТ" Тогда
					СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку"].Имя, Метаданные.Документы["ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку"].Представление());
					СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПоручениеВыставленное"].Имя,	Метаданные.Документы["ПлатежноеТребованиеПоручениеВыставленное"].Представление());
				КонецЕсли;	
				
			Иначе // Прочее

				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,         		Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя, 		Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                 		Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомитентуОПродажах"].Имя,            		Метаданные.Документы["ОтчетКомитентуОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеДопРасходов"].Имя,             		Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,            		Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,            	 	Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,         		Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,				 		Метаданные.Документы["АккредитивПолученный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,			Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Имя,	Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Представление());

				Если Конфигурация = "УТ" Тогда
					СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку"].Имя, Метаданные.Документы["ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку"].Представление());
					СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПоручениеВыставленное"].Имя,	Метаданные.Документы["ПлатежноеТребованиеПоручениеВыставленное"].Представление());
				КонецЕсли;	
				
			КонецЕсли;
		Иначе

			// Заполним список документов, которые могут делать приход по регистру.
			// Список документов зависит от вида договора
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			 Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя, 	Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                 	Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомиссионераОПродажах"].Имя,         	Метаданные.Документы["ОтчетКомиссионераОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,             	Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,             	Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        	Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПереданный"].Имя,        			Метаданные.Документы["АккредитивПереданный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПолученное"].Имя,        	Метаданные.Документы["ПлатежноеТребованиеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя,	Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Представление());

				Если Конфигурация = "УПП" Тогда
					СписокТипов.Добавить(Метаданные.Документы["АктОбОказанииПроизводственныхУслуг"].Имя, 	Метаданные.Документы["АктОбОказанииПроизводственныхУслуг"].Представление());
					СписокТипов.Добавить(Метаданные.Документы["ПередачаОС"].Имя,                         	Метаданные.Документы["ПередачаОС"].Представление());
				ИначеЕсли Конфигурация = "УТ" Тогда
					СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПоручениеПолученное"].Имя,Метаданные.Документы["ПлатежноеТребованиеПоручениеПолученное"].Представление());
				КонецЕсли;	
				
			ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			      Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

				СписокТипов.Добавить(Метаданные.Документы["АвансовыйОтчет"].Имя,                     	Метаданные.Документы["АвансовыйОтчет"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,           	Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя, 	Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                 	Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,             	Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        	Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПереданный"].Имя,        			Метаданные.Документы["АккредитивПереданный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПолученное"].Имя,        	Метаданные.Документы["ПлатежноеТребованиеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя,	Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Представление());

				Если Конфигурация = "УТ" Тогда
					СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки"].Имя, Метаданные.Документы["ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки"].Представление());
					СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПоручениеПолученное"].Имя,Метаданные.Документы["ПлатежноеТребованиеПоручениеПолученное"].Представление());
					Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
						СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,               Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
					КонецЕсли;
				КонецЕсли;	
				
			Иначе // Прочее

				СписокТипов.Добавить(Метаданные.Документы["АвансовыйОтчет"].Имя,                     	Метаданные.Документы["АвансовыйОтчет"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,           	Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя, 	Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                 	Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомиссионераОПродажах"].Имя,         	Метаданные.Документы["ОтчетКомиссионераОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,             	Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,             	Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        	Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПереданный"].Имя,        			Метаданные.Документы["АккредитивПереданный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПолученное"].Имя,        	Метаданные.Документы["ПлатежноеТребованиеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя,	Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Представление());

				Если Конфигурация = "УПП" Тогда
					СписокТипов.Добавить(Метаданные.Документы["АктОбОказанииПроизводственныхУслуг"].Имя, 	Метаданные.Документы["АктОбОказанииПроизводственныхУслуг"].Представление());
					СписокТипов.Добавить(Метаданные.Документы["ПередачаОС"].Имя,                         	Метаданные.Документы["ПередачаОС"].Представление());
				ИначеЕсли Конфигурация = "УТ" Тогда
					СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки"].Имя, Метаданные.Документы["ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки"].Представление());
					СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПоручениеПолученное"].Имя,Метаданные.Документы["ПлатежноеТребованиеПоручениеПолученное"].Представление());
				КонецЕсли;	
				
			КонецЕсли;
		КонецЕсли;

		// Пользователь выбирает тип расчетного документа
		ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов, ЭлементФормы);

		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат; // пользователь отказался от выбора
		КонецЕсли;

		ТипДокументаСделки = ВыбранныйЭлемент.Значение;

	ИначеЕсли СтрокаТипаЗаказа = "ЗаказПоставщику" Тогда

		ТипДокументаСделки = СтрокаТипаЗаказа;
		Если ДокументОбъект.Метаданные().Реквизиты.Найти("Сделка") = Неопределено Тогда
			ЕстьТипСчет = Истина;
		Иначе
			ЕстьТипСчет = ДокументОбъект.Метаданные().Реквизиты.Сделка.Тип.СодержитТип( Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
		КонецЕсли;
		Если ЕстьТипСчет Тогда
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

				ТипДокументаСделки = "СчетНаОплатуПоставщика";
				Сделка = Документы[ТипДокументаСделки].ПустаяСсылка();

			ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			      Или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда

				ТипДокументаСделки = СтрокаТипаЗаказа;
				Сделка = Документы[ТипДокументаСделки].ПустаяСсылка();

			КонецЕсли; 
		Иначе
			СписокТипов = Новый СписокЗначений;
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя, Метаданные.Документы["ЗаказПоставщику"].Представление());
		КонецЕсли;

	ИначеЕсли СтрокаТипаЗаказа = "ЗаказПокупателя" Тогда

		ТипДокументаСделки = СтрокаТипаЗаказа;
		Если ДокументОбъект.Метаданные().Реквизиты.Найти("Сделка") = Неопределено Тогда
			ЕстьТипСчет = Истина;
		Иначе
			ЕстьТипСчет = ДокументОбъект.Метаданные().Реквизиты.Сделка.Тип.СодержитТип( Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		КонецЕсли;

		Если ЕстьТипСчет Тогда
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

				ТипДокументаСделки = "СчетНаОплатуПокупателю";
				Сделка = Документы[ТипДокументаСделки].ПустаяСсылка();
				
			ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			      Или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда

				ТипДокументаСделки = СтрокаТипаЗаказа;
				Сделка = Документы[ТипДокументаСделки].ПустаяСсылка();


			КонецЕсли; 
			СписокТипов = Новый СписокЗначений;
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя, Метаданные.Документы["ЗаказПоставщику"].Представление());
		КонецЕсли; 

	Иначе // сделка может быть только заказом (поставщику или покупателя)
		Если ТипЗнч(Сделка) <> Тип("ДокументСсылка." + СтрокаТипаЗаказа) Тогда
			Сделка = Документы[СтрокаТипаЗаказа].ПустаяСсылка();
		КонецЕсли;

		ТипДокументаСделки = СтрокаТипаЗаказа;
	КонецЕсли; 

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,ЭлементФормы,);

	// Отфильруем список документов по договору.
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

	ФормаВыбора.Открыть();

КонецПроцедуры // клНачалоВыбораЗначенияСделки()

// Процедура выполняет стандартные действия при начале выбора договора взаиморасчетов в формах документов.
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа;
//  ФормаДокумента                    - форма редактируемого документа;
//  ЭлементФормы                      - элемент формы документа, который надо заполнить; 
//  Контрагент                        - ссылка на справочник, определяет контрагента по договору взаиморасчетов;
//  ВидДоговораВзаиморасчетов         - вид договора взаиморасчетов для отбора, значение перечисления ВидыДоговоровКонтрагентов;
//  СтандартнаяОбработка              - булево, признак выполнения стандартной (системной) обработки события,
//  СтруктураДополнительныхПараметров - структура, содержит дополнительные значения отбора, необязаетльный,
//                                      ключ - имя отбора, значение - структура, определяющая отбор с ключами:
//                                      ЗначениеОтбора (если не задан, то отбор не устанавливается), 
//                                      ВидСравненияОтбора (если не задан, то ВидСравнения.Равно), 
//                                      ДоступностьОтбора (если не задан, то Ложь).
//
Процедура клНачалоВыбораЗначенияДоговораВзаиморасчетов(ДокументОбъект, Организация, ЭлементФормы, Контрагент,
	                                                 ВидыДоговораВзаиморасчетов) Экспорт
	СтандартнаяОбработка = Ложь;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,ЭлементФормы,);

	Если ВидыДоговораВзаиморасчетов<>Неопределено Тогда
		// Оставим в выборе только "правильные" договоры
		Если ТипЗнч(ВидыДоговораВзаиморасчетов) = Тип("СписокЗначений") Тогда
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                        = ВидСравнения.ВСписке;
		Иначе
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                        = ВидСравнения.Равно;
		КонецЕсли;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = ВидыДоговораВзаиморасчетов;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
	КонецЕсли;
	ФормаВыбора.ПараметрОтборПоВладельцу                                               = Контрагент;

	// Еще надо фильтровать по организации, если она заполнена
	Если ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                            = Организация;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры // клНачалоВыбораЗначенияДоговораВзаиморасчетов()

// Возвращает вид договора с контрагентом по виду операции
//
Функция клОпределитьВидДоговораСКонтрагентом(ВидОперации=Неопределено) Экспорт
	
	Если Конфигурация = "УПП" Тогда
		СПоставщиком  	= Новый СписокЗначений;
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		
		СПокупателем  	= Новый СписокЗначений;
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		
		Прочее  		= Новый СписокЗначений;
		Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		
		Если ЗначениеЗаполнено(ВидОперации) тогда

			//Определение вида операции

			ВидДоговораПоВидуОпераций = Новый Соответствие();

			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,СПокупателем);
				
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
	        ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
	 		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПлатежныйОрдерСписание.ОплатаПоставщику,СПоставщиком);
	 		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПлатежныйОрдерСписание.РасчетыПоКредитамИЗаймам,Прочее);
	 		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПлатежныйОрдерСписание.ВозвратДенежныхСредствПокупателю,СПокупателем);
	 		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПлатежныйОрдерПоступление.ОплатаПокупателя,СПокупателем);
	 		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПлатежныйОрдерПоступление.РасчетыПоКредитамИЗаймам,Прочее);
	 		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПлатежныйОрдерПоступление.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,СПокупателем);
			
	 		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППВходящее.ОплатаПокупателя,СПокупателем);
	 		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППВходящее.РасчетыПоКредитамИЗаймам,Прочее);
	 		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППВходящее.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю,СПокупателем);
			
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			
			ВидДоговора=ВидДоговораПоВидуОпераций[ВидОперации];
			
			Если НЕ ВидДоговора = Неопределено Тогда
				
				Возврат ВидДоговора;
				
			Иначе
				
				Возврат Новый СписокЗначений;
				
			КонецЕсли;
			
		Иначе
			
			Возврат Новый СписокЗначений;
			
		Конецесли;
	ИначеЕсли Конфигурация = "УТ" Тогда
		
		СПоставщиком  	= Новый СписокЗначений;
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		
		СПокупателем  	= Новый СписокЗначений;
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		
		Прочее  		= Новый СписокЗначений;
		Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		
		Если ЗначениеЗаполнено(ВидОперации) тогда

			//Определение вида операции

			ВидДоговораПоВидуОпераций = Новый Соответствие();

			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,СПокупателем);
				
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами,Прочее);
	        ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,СПокупателем);
				
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,СПокупателем);
			
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю,СПокупателем);
			
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			
			ВидДоговора=ВидДоговораПоВидуОпераций[ВидОперации];
			
			Если НЕ ВидДоговора = Неопределено Тогда
				
				Возврат ВидДоговора;
				
			Иначе
				
				Возврат Новый СписокЗначений;
				
			КонецЕсли;
			
		Иначе
			
			Возврат Новый СписокЗначений;
			
		Конецесли;
		
	ИначеЕсли Конфигурация = "БУ" Тогда
		СПоставщиком = Новый СписокЗначений;
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

		СПокупателем = Новый СписокЗначений;
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

		Прочее = Новый СписокЗначений;
		Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);

		Если ЗначениеЗаполнено(ВидОперации) тогда

			//Определение вида операции

			ВидДоговораПоВидуОпераций = Новый Соответствие();

			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,СПокупателем);

			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,СПоставщиком);

			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);

			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);

			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,СПокупателем);

			ВидДоговора = ВидДоговораПоВидуОпераций[ВидОперации];

			Если НЕ ВидДоговора = Неопределено Тогда
				Возврат ВидДоговора;
			Иначе
				Возврат Новый СписокЗначений;

			КонецЕсли;

		Иначе

			Возврат Новый СписокЗначений;

		Конецесли;
		
	ИначеЕсли Конфигурация = "УТП" Тогда
		
		СПоставщиком  	= Новый СписокЗначений;
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		
		СПокупателем  	= Новый СписокЗначений;
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		
		Прочее  		= Новый СписокЗначений;
		Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		
		Если ЗначениеЗаполнено(ВидОперации) тогда

			//Определение вида операции

			ВидДоговораПоВидуОпераций = Новый Соответствие();

			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,СПокупателем);
				
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами,Прочее);
	        ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,СПокупателем);
				
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,СПокупателем);
			
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю,СПокупателем);
			
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			
			ВидДоговора=ВидДоговораПоВидуОпераций[ВидОперации];
			
			Если НЕ ВидДоговора = Неопределено Тогда
				
				Возврат ВидДоговора;
				
			Иначе
				
				Возврат Новый СписокЗначений;
				
			КонецЕсли;
			
		Иначе
			
			Возврат Новый СписокЗначений;
			
		Конецесли;
		
	КонецЕсли;	
	
КонецФункции // клОпределитьВидДоговораСКонтрагентом()

// Функция выполняет необходимые действия формирования текста назначения платежа
//
Функция клСформироватьНазначениеПлатежа(Док, РасшифровкаДок) Экспорт

	СуммаДокумента 	= Док.СуммаДокумента;
	СуммаНДС 		= РасшифровкаДок.СуммаНДС;
	СтавкаНДС 		= РасшифровкаДок.СтавкаНДС;
	СчетКонтрагента = Док.СчетКонтрагента;
	
	ТекстНазначение="";
	
	Если ТекстНазначение="" И НЕ СчетКонтрагента.Пустая() Тогда
		ТекстНазначение = СчетКонтрагента.ТекстНазначения;
	КонецЕсли;	

	ТекстСумма="Сумма " + Формат(СуммаДокумента, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00") + Символы.ПС;
	ТекстСумма = ТекстСумма + "НДС(" + ?(НЕ ЗначениеЗаполнено(СтавкаНДС), "без налога", СтавкаНДС) + ") " + Формат(СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+Символы.ПС;
	
	НазначениеПлатежа = ТекстНазначение + Символы.ПС + ТекстСумма;
	
	Возврат НазначениеПлатежа;

КонецФункции // клСформироватьНазначениеПлатежа()

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
ВерсияКБ = "1.3.4";
АдресОтправки = "release@abbyy.ua";