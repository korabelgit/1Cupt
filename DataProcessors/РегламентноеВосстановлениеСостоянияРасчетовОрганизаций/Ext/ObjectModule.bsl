Перем мВалютаРегламентированногоУчета Экспорт;
Перем мКэшВидовСубконтоПоСчетам;

// Определяет рабочий период документа
//
// Параметры:
//  СтруктураПараметров - структура, содержащая набор параметров.
//
Функция ОпределитьПериод(ДатаКон) Экспорт

	// По последовательности определяем дату
	Периоды = Новый Структура("Приобретение,Реализация");

	Отбор = Новый Структура("Организация", Организация);
	Если АвансыПоПриобретению тогда
		Периоды.приобретение = Последовательности.РасчетыПоПриобретениюОрганизации.ПолучитьГраницу(Отбор);
		Если Периоды.приобретение.Дата>КонецДня(ДатаКон) тогда
			ОбщегоНазначения.СообщитьОбОшибке("Граница последовательности по приобретению организации <"+Строка(Организация)+"> больше чем дата обработки.
			|Восстановление расчетов по приобретению производиться не будет.");
		КонецЕсли;
	КонецЕсли;	
	Если АвансыПоРеализации тогда
		Периоды.Реализация = Последовательности.РасчетыПоРеализацииОрганизации.ПолучитьГраницу(Отбор);
		Если Периоды.Реализация.Дата>КонецДня(ДатаКон) тогда
			ОбщегоНазначения.СообщитьОбОшибке("Граница последовательности по реализации организации <"+Строка(Организация)+"> больше чем дата обработки.
			|Восстановление расчетов по реализации производиться не будет.");
		КонецЕсли;
	КонецЕсли;	
	Возврат  Периоды;
КонецФункции // ОпределитьПериод()

Процедура ВосстановитьПоследовательностиПоРасчетам() Экспорт
	
	Если НЕ АвансыПоПриобретению И НЕ АвансыПоРеализации Тогда 
		Возврат;	
	КонецЕсли; 
	
	Периоды  = ОпределитьПериод(ДатаАктуализации);
	мКэшВидовСубконтоПоСчетам = Неопределено;
	
	ВидыРегламентныхОпераций = Перечисления.ВидыРегламентныхОпераций;
	УдаляемыеВидыРегОпераций = Новый Массив();
	Если АвансыПоПриобретению тогда
		УдаляемыеВидыРегОпераций.Добавить(ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовПриобретение);
	КонецЕсли;
	Если АвансыПоРеализации тогда
		УдаляемыеВидыРегОпераций.Добавить(ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовРеализация);
	КонецЕсли;
	УдаляемыеВидыРегОпераций.Добавить(ВидыРегламентныхОпераций.КорректировкиПриВзаиморасчетахВВалюте);
	УдаляемыеВидыРегОпераций.Добавить(ВидыРегламентныхОпераций.ПереоценкаВалютныхСчетов);
	УдаляемыеВидыРегОпераций.Добавить(ВидыРегламентныхОпераций.СуммовыеРазницы);
	
	
	ТекстЗапроса = "";
	
	Если АвансыПоПриобретению Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""РасчетыПоПриобретениюОрганизации"" КАК ИмяПоследовательности,
		|	РасчетыПоПриобретениюОрганизации.Период КАК Период,
		|
		|	РасчетыПоПриобретениюОрганизации.Организация КАК Организация,
		|	РасчетыПоПриобретениюОрганизации.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|
		|	РасчетыПоПриобретениюОрганизации.Контрагент КАК Контрагент,
		|	РасчетыПоПриобретениюОрганизации.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	РасчетыПоПриобретениюОрганизации.Сделка КАК Сделка,
		|	РасчетыПоПриобретениюОрганизации.КоррСчет КАК КоррСчет,
		|	РасчетыПоПриобретениюОрганизации.СчетОплаты КАК СчетОплаты,
		|	РасчетыПоПриобретениюОрганизации.СчетАванса КАК СчетАванса,
		|	РасчетыПоПриобретениюОрганизации.НаправлениеДвижения КАК НаправлениеДвижения,
		|	РасчетыПоПриобретениюОрганизации.КурсДокумента КАК КурсДокумента,
		|	РасчетыПоПриобретениюОрганизации.КратностьДокумента КАК КратностьДокумента,
		|	РасчетыПоПриобретениюОрганизации.ВалютаДокумента КАК ВалютаДокумента,
		|	РасчетыПоПриобретениюОрганизации.РасчетыВозврат КАК РасчетыВозврат,
		|	РасчетыПоПриобретениюОрганизации.КоррСубконто1 КАК КоррСубконто1,
		|	РасчетыПоПриобретениюОрганизации.КоррСубконто2 КАК КоррСубконто2,
		|	РасчетыПоПриобретениюОрганизации.КоррСубконто3 КАК КоррСубконто3,
		|	РасчетыПоПриобретениюОрганизации.СуммаСНДСВал КАК СуммаСНДСВал,
		|	РасчетыПоПриобретениюОрганизации.СуммаСНДСРегл КАК СуммаСНДСРегл,
		|
		|	РасчетыПоПриобретениюОрганизации.ВидДокумента КАК ВидДокумента,
		|	РасчетыПоПриобретениюОрганизации.ВидДвиженияПоРасчетам КАК ВидДвиженияПоРасчетам,
		|	РасчетыПоПриобретениюОрганизации.Документ КАК Документ,
		|	РасчетыПоПриобретениюОрганизации.ВидОперации КАК ВидОперации,
		|
		|   РасчетыПоПриобретениюОрганизации.Регистратор КАК Регистратор
		|
		|ИЗ
		|	РегистрСведений.РасчетыПоПриобретениюОрганизации КАК РасчетыПоПриобретениюОрганизации
		|
		|ГДЕ
		|	РасчетыПоПриобретениюОрганизации.Период МЕЖДУ &НачалоПериодаПриобретение И &КонецПериода
		|	И РасчетыПоПриобретениюОрганизации.Активность
		|	И РасчетыПоПриобретениюОрганизации.Организация = &Организация
		|	И НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров 
		|";
		
	КонецЕсли;
	
	Если АвансыПоПриобретению И АвансыПоРеализации Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
	КонецЕсли;	
	
	Если АвансыПоРеализации Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""РасчетыПоРеализацииОрганизации"" КАК ИмяПоследовательности,
		|	РасчетыПоРеализацииОрганизации.Период КАК Период,
		|
		|	РасчетыПоРеализацииОрганизации.Организация КАК Организация,
		|	РасчетыПоРеализацииОрганизации.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|
		|	РасчетыПоРеализацииОрганизации.Контрагент КАК Контрагент,
		|	РасчетыПоРеализацииОрганизации.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	РасчетыПоРеализацииОрганизации.Сделка КАК Сделка,
		|	РасчетыПоРеализацииОрганизации.КоррСчет КАК КоррСчет,
		|	РасчетыПоРеализацииОрганизации.СчетОплаты КАК СчетОплаты,
		|	РасчетыПоРеализацииОрганизации.СчетАванса КАК СчетАванса,
		|	РасчетыПоРеализацииОрганизации.НаправлениеДвижения КАК НаправлениеДвижения,
		|	РасчетыПоРеализацииОрганизации.КурсДокумента КАК КурсДокумента,
		|	РасчетыПоРеализацииОрганизации.КратностьДокумента КАК КратностьДокумента,
		|	РасчетыПоРеализацииОрганизации.ВалютаДокумента КАК ВалютаДокумента,
		|	РасчетыПоРеализацииОрганизации.РасчетыВозврат КАК РасчетыВозврат,
		|	РасчетыПоРеализацииОрганизации.КоррСубконто1 КАК КоррСубконто1,
		|	РасчетыПоРеализацииОрганизации.КоррСубконто2 КАК КоррСубконто2,
		|	РасчетыПоРеализацииОрганизации.КоррСубконто3 КАК КоррСубконто3,
		|	РасчетыПоРеализацииОрганизации.СуммаСНДСВал КАК СуммаСНДСВал,
		|	РасчетыПоРеализацииОрганизации.СуммаСНДСРегл КАК СуммаСНДСРегл,
		|
		|	РасчетыПоРеализацииОрганизации.ВидДокумента КАК ВидДокумента,
		|	РасчетыПоРеализацииОрганизации.ВидДвиженияПоРасчетам КАК ВидДвиженияПоРасчетам,
		|	РасчетыПоРеализацииОрганизации.Документ КАК Документ,
		|	РасчетыПоРеализацииОрганизации.ВидОперации КАК ВидОперации,
		|
		|   РасчетыПоРеализацииОрганизации.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.РасчетыПоРеализацииОрганизации КАК РасчетыПоРеализацииОрганизации
		|
		|ГДЕ
		|	РасчетыПоРеализацииОрганизации.Период МЕЖДУ &НачалоПериодаРеализация И &КонецПериода
		|	И РасчетыПоРеализацииОрганизации.Активность
		|	И РасчетыПоРеализацииОрганизации.Организация = &Организация
		|	И НЕ РасчетыПоРеализацииОрганизации.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров 
		|";
		
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Регистратор
		|
 		|ИТОГИ 
		|	МИНИМУМ(Период),
		|	СУММА(СуммаСНДСВал),
		|	СУММА(СуммаСНДСРегл) 
		|ПО
		|	Регистратор
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Если АвансыПоПриобретению Тогда
		МоментВремениПриобретение = Периоды.Приобретение;
		ДатаНачПриобретение       = МоментВремениПриобретение.Дата;
		Запрос.УстановитьПараметр("НачалоПериодаПриобретение", ДатаНачПриобретение);
	КонецЕсли;
	
	Если АвансыПоРеализации Тогда
		МоментВремениРеализация   = Периоды.Реализация;
		ДатаНачРеализация         = МоментВремениРеализация.Дата;
		Запрос.УстановитьПараметр("НачалоПериодаРеализация",   ДатаНачРеализация);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаАктуализации));
	Запрос.УстановитьПараметр("Организация",  Организация);
		
	Результат = Запрос.Выполнить();
	ТаблицаДвижений = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПоследовательностьРасчетыПоПриобретениюОрганизации = Последовательности.РасчетыПоПриобретениюОрганизации;
	ПоследовательностьРасчетыПоРеализацииОрганизации   = Последовательности.РасчетыПоРеализацииОрганизации;
	
	Результат = ОбработатьДвижения(ТаблицаДвижений, УдаляемыеВидыРегОпераций);
	
	Если Результат.Ошибка Тогда
		
		Если АвансыПоПриобретению Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке(
				"Организация <" + Организация + ">: Обнаружена ошибка при проведении документа """ + Результат.Документ + """.
			    | Граница последовательности расчетов по приобретению установлена на " + Результат.ГраницаПоПриобретению,
				,
				"Восстановление последовательности расчетов по приобретению"
			);
			ПоследовательностьРасчетыПоПриобретениюОрганизации.УстановитьГраницу(
				Новый МоментВремени(Результат.ГраницаПоПриобретению, Результат.Документ),
				Новый Структура("Организация", Организация)
			);
			
		КонецЕсли;	
		
		Если АвансыПоРеализации Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке(
				"Организация <" + Организация + ">: Обнаружена ошибка при проведении документа """ + Результат.Документ + """.
			    | Граница последовательности расчетов по реализации установлена на " + Результат.ГраницаПоРеализации,
				,
				"Восстановление последовательности расчетов по реализации"
			);
			ПоследовательностьРасчетыПоРеализацииОрганизации.УстановитьГраницу(
				Новый МоментВремени(Результат.ГраницаПоРеализации, Результат.Документ),
				Новый Структура("Организация", Организация)
			);
			
		КонецЕсли;		
		
	Иначе
		
		Если АвансыПоПриобретению Тогда
			
			#Если Клиент Тогда
			Сообщить("Организация <" + Организация + ">: Восстановление последовательности расчетов по приобретению успешно завершено");
			#КонецЕсли
			ПоследовательностьРасчетыПоПриобретениюОрганизации.УстановитьГраницу(
				Новый МоментВремени(Результат.ГраницаПоПриобретению),
				Новый Структура("Организация", Организация)
			);
			
		КонецЕсли;	
		
		Если АвансыПоРеализации Тогда
			
			#Если Клиент Тогда
			Сообщить("Организация <" + Организация + ">: Восстановление последовательности расчетов по реализации успешно завершено");
			#КонецЕсли
			ПоследовательностьРасчетыПоРеализацииОрганизации.УстановитьГраницу(
				Новый МоментВремени(Результат.ГраницаПоРеализации),
				Новый Структура("Организация", Организация)
			);
			
		КонецЕсли;	
		
	КонецЕсли;
		
	#Если Клиент Тогда
	Состояние("Организация <" + Организация + ">: Корректировка движений успешна завершена.");
	#КонецЕсли

КонецПроцедуры // ВосстановитьПоследовательностиПоРасчетам

Функция ОбработатьДвижения(ТаблицаДвижений, УдаляемыеВидыРегОпераций)
	
	ЕстьОшибка = Ложь;
	ДокументОшибки = Неопределено;
	
	ГраницаПоПриобретению = КонецДня(ДатаАктуализации);
	ГраницаПоРеализации   = КонецДня(ДатаАктуализации);
	
	НаборЗаписейПоследовательностьРасчетыПоПриобретениюОрганизации = Последовательности.РасчетыПоПриобретениюОрганизации.СоздатьНаборЗаписей();
	НаборЗаписейПоследовательностьРасчетыПоРеализацииОрганизации   = Последовательности.РасчетыПоРеализацииОрганизации.СоздатьНаборЗаписей();
	
	Для каждого Документ из ТаблицаДвижений.Строки Цикл
		СформированныеДвижения = Новый Структура();
		ВидДокумента = Документ.Строки[0].ВидДокумента;
		ИмяПоследовательности = Документ.Строки[0].ИмяПоследовательности;
		Если ИмяПоследовательности = "РасчетыПоПриобретениюОрганизации" Тогда
			ПоследовательностьДляРегистрации = НаборЗаписейПоследовательностьРасчетыПоПриобретениюОрганизации;
		Иначе
			ПоследовательностьДляРегистрации = НаборЗаписейПоследовательностьРасчетыПоРеализацииОрганизации;
		КонецЕсли; 
 		НаправленияДвиженияДляДокументаДвиженияДенежныхСредств 	= Неопределено;
 		НаправленияДвиженияДляДокументаПриобретенияРеализации	= Неопределено;
		
		// Для корректировки долга требуется почти полное перепроведение
		Если ВидДокумента = "КорректировкаДолга" Тогда
			
			ДокументОбъект = Документ.Регистратор.ПолучитьОбъект();
			ДокументОбъект.РежимВосстановленияПоследовательностейРасчетов = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			Продолжить; 
			
		КонецЕсли; 
		
		НаправленияДвиженияДляДокументаДвиженияДенежныхСредств 	= БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента).НаправлениеДвижения;
		НаправленияДвиженияДляДокументаПриобретенияРеализации	= БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента).НаправлениеДвижения;
		
		Если НЕ (НаправленияДвиженияДляДокументаДвиженияДенежныхСредств = Неопределено) тогда
			// Документ обрабатывается в блоке движений денежных средств			
			СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенегИзРегистраСведений(Документ.Строки,ТаблицаДвижений.Колонки);
			// Регистрация в последовательности
			ПоследовательностьДляРегистрации.Отбор.Регистратор.Установить(Документ.регистратор);
			ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();
			ЗаписьРегистрации.Период = Документ.Строки[0].Период;
			ЗаписьРегистрации.Организация = Организация;
			ПоследовательностьДляРегистрации.Записать();
			
			#Если Клиент Тогда
				Состояние("Корректировка движений документа: " + СтруктураПараметров.Заголовок);
			#КонецЕсли
			
			ПроводкиБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Хозрасчетный, Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиБУ, УдаляемыеВидыРегОпераций);
			
			СформированныеДвижения.Вставить("ПроводкиБУ", ПроводкиБУ);
			
			НачатаТранзакцияДляБлокировки = Ложь; 
			Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") И НЕ ТранзакцияАктивна() Тогда
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				НачатаТранзакцияДляБлокировки = Истина; 
			КонецЕсли;	
			Если БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(СтруктураПараметров, СформированныеДвижения, мВалютаРегламентированногоУчета) = Ложь Тогда	
				ЕстьОшибка = Истина;
				Если ДокументОшибки = Неопределено тогда
					ДокументОшибки = Документ.Регистратор;
				КонецЕслИ;
				Если ИмяПоследовательности = "РасчетыПоПриобретениюОрганизации" Тогда
					ГраницаПоПриобретению = МИН(СтруктураПараметров.Период, ГраницаПоПриобретению);
				Иначе
					ГраницаПоРеализации = МИН(СтруктураПараметров.Период, ГраницаПоРеализации);
				КонецЕсли; 
				Если НачатаТранзакцияДляБлокировки Тогда
					ОтменитьТранзакцию();
				КонецЕсли;	
				Продолжить;
			КонецЕсли;
			Если НачатаТранзакцияДляБлокировки Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;	
			Если СтруктураПараметров.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
				НачатаТранзакцияДляБлокировки = Ложь; 
				Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") И НЕ ТранзакцияАктивна() Тогда
					НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
					НачатаТранзакцияДляБлокировки = Истина; 
				КонецЕсли;	
				БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеОплата(СтруктураПараметров, мВалютаРегламентированногоУчета,,СформированныеДвижения.ПроводкиБУ,,);
				Если НачатаТранзакцияДляБлокировки Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли;	
			КонецЕсли;
 		ИначеЕсли НЕ (НаправленияДвиженияДляДокументаПриобретенияРеализации = Неопределено) тогда
			// Документ приобретения или реализации
			// Документ обрабатывается в блоке движений денежных средств			
			СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАвансаИзРегистраСведений(Документ.Строки,ТаблицаДвижений.Колонки);
			// Регистрация в последовательности
			ПоследовательностьДляРегистрации.Отбор.Регистратор.Установить(Документ.регистратор);
			ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();
			ЗаписьРегистрации.Период = Документ.Строки[0].Период;
			ЗаписьРегистрации.Организация = Организация;
			ПоследовательностьДляРегистрации.Записать();
			
			#Если Клиент Тогда
				Состояние("Корректировка движений документа: " + СтруктураПараметров.Заголовок);
			#КонецЕсли
			
			ПроводкиБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Хозрасчетный                           , Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиБУ, УдаляемыеВидыРегОпераций);
			
			СформированныеДвижения.Вставить("ПроводкиБУ", ПроводкиБУ);
			НачатаТранзакцияДляБлокировки = Ложь; 
			Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") И НЕ ТранзакцияАктивна() Тогда
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				НачатаТранзакцияДляБлокировки = Истина; 
			КонецЕсли;	
			БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметров, СформированныеДвижения, мВалютаРегламентированногоУчета);
			Если НачатаТранзакцияДляБлокировки Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;	
			
			Если СтруктураПараметров.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
				НачатаТранзакцияДляБлокировки = Ложь; 
				Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") И НЕ ТранзакцияАктивна() Тогда
					НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
					НачатаТранзакцияДляБлокировки = Истина; 
				КонецЕсли;	
				БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеПриобретение(СтруктураПараметров,мВалютаРегламентированногоУчета,,СформированныеДвижения.ПроводкиБУ,,,,СформированныеДвижения);
				Если НачатаТранзакцияДляБлокировки Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли;	
			КонецЕсли;
		Иначе
			ЕстьОшибка = Истина;
			Если ДокументОшибки = Неопределено тогда
				ДокументОшибки = Документ.Регистратор;
			КонецЕслИ;
			Если ИмяПоследовательности = "РасчетыПоПриобретениюОрганизации" Тогда
				ГраницаПоПриобретению = МИН(Документ.Строки[0].Период, ГраницаПоПриобретению);
			Иначе
				ГраницаПоРеализации = МИН(Документ.Строки[0].Период, ГраницаПоРеализации);
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Если ПереоценкаВалютныхСчетовВДокументе Тогда
			//Учет курсовых разниц
			СтруктураПараметров = БухгалтерскийУчет.ПодготовкаСтруктурыПараметровДляПереоценкиСчетаИзРегистраСведений(Документ.Строки[0]);
			Если СформированныеДвижения.Свойство("ПроводкиБУ") = Ложь Тогда
				ПроводкиБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Хозрасчетный, Истина);
				СформированныеДвижения.Вставить("ПроводкиБУ", ПроводкиБУ);
			КонецЕсли;		
			Если (СтруктураПараметров.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда
				СтруктураПараметров.Вставить("Ссылка", СтруктураПараметров.Регистратор);
				ПроводкиБУ.Записать();
				НачатаТранзакцияДляБлокировки = Ложь; 
				Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") И НЕ ТранзакцияАктивна() Тогда
					НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
					НачатаТранзакцияДляБлокировки = Истина; 
				КонецЕсли;	
				БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(СтруктураПараметров, ПроводкиБУ, мВалютаРегламентированногоУчета, Истина);
				Если НачатаТранзакцияДляБлокировки Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли;	
				СформированныеДвижения.Вставить("ПроводкиБУ", ПроводкиБУ);
			КонецЕсли; // Учет курсовых разниц
		КонецЕсли;
		
		Для Каждого Движение Из СформированныеДвижения Цикл
			Движение.Значение.Записать();
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый Структура("Ошибка, Документ, ГраницаПоПриобретению, ГраницаПоРеализации", ЕстьОшибка, ДокументОшибки, ГраницаПоПриобретению, ГраницаПоРеализации);
	
КонецФункции // ОбработатьДвижения

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
