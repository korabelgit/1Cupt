////////// ОБЩИЕ КОМАНДЫ ВСЕХ ОБРАБОТЧИКОВ //////////////

// Функция осуществляет подключение устройства.
//
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат      		= Истина;
	ВыходныеПараметры 	= Новый Массив();
	ОбъектДрайвера 		= Неопределено;

	БазаТоваров  = Неопределено;

	Параметры.Свойство("БазаТоваров",  БазаТоваров);

	Если БазаТоваров  = Неопределено Тогда
	 	ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.'"));
		Результат = Ложь;
	Иначе
		ОбъектДрайвера = Новый Структура("Параметры", Параметры);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;
	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = Истина;
	ВыходныеПараметры = Новый Массив();

	// Выгрузка товаров в ККМ Offline
	Если Команда = "ВыгрузитьТовары" Тогда
		Товары 				= ВходныеПараметры[0];
		Результат = ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, Товары, ВыходныеПараметры);
											  
	// Очистить базу ККМ Offline
	ИначеЕсли Команда = "ОчиститьБазу" Тогда
		Результат = ОчиститьТоварыВВесах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);

		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// КОМАНДЫ ОБРАБОТЧИКА

// Функция осуществляет выгрузку таблицы товаров в ККМ, подключенную в режиме Offline.
//
// Параметры:
//  ОбъектДрайвера                 - <*>
//                                 - Объект драйвера торгового оборудования.
//
//  Товары                         - <ТаблицаЗначений>
//                                 - Таблица товаров, подлежащих выгрузке в весы.
//                                   Таблица имеет следующие колонки:
//                                     PLU                        - <Число>
//                                                                - Идентификатор товара в весах.
//									   Штрихкод 				  - <Строка>
//                                                                - Штрихкод товара на кассе.
//                                     Номенклатура               - <СправочникСсылка.Номенклатура>
//                                                                - Номенклатура.
//                                     ХарактеристикаНоменклатуры - <СправочникСсылка.ХарактеристикиНоменклатуры>
//                                                                - Характеристика номенклатуры.
//                                     Цена                       - <Число>
//                                                                - Цена номенклатуры.
//
Функция ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, Товары, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	Префикс = "2" + МенеджерОборудованияСервер.ПолучитьКонстанту("ПрефиксВесовогоТовара");

	Файл = Новый ТекстовыйДокумент();
	
	Для каждого текЭлемент Из Товары Цикл
		Строка = ПостроитьПоле(Формат(текЭлемент.PLU, "ЧГ=0"), 8) + "|" 				// PLU (8)
		+ ПостроитьПоле(ПредставлениеТовара(текЭлемент), 30) + "|" 						// Наименование1 (30)
		+ "                              |"												// Наименование2 (30)
		+ ПостроитьПоле(Формат(текЭлемент.Цена * 100, "ЧЦ=8; ЧДЦ=0; ЧН=0; ЧГ=0"), 15) 	// Цена (10)
		+ "     |" 																		// Срок хранения (5)
		+ "       |"																	// Вес тары (7)
		+ "     |"																		// Использовать до (5)
		+ ПостроитьПоле(Формат(текЭлемент.Штрихкод, "ЧГ=0"), 8) + "|"					// Код товара (8)
		+ ПостроитьПоле(Формат(Префикс, "ЧН=0; ЧГ=0"), 4) + "|"							// Код группы (4)
		+ "     |"																		// Код Производителя (5)
		+ "   |"																		// ПЛУ Тип (3)
		+ "   |"																		// КодЗаголовка (3)
		+ "                                                          |"					// Состав1 58
		+ "                                                          |"					// Состав2 58
		+ "                                                          |"					// Состав3 58
		+ "                                                          |"					// Состав4 58
		+ "                                                          |"					// Состав5 58
		+ "                                                          |"					// Состав6 58
		+ "                                                          |"					// Состав7 58
		+ "                                                          |"					// Состав8 58
		+ "                                                          |"					// Состав9 58
		+ "                                                          ";					// Состав10 58
		Файл.ДобавитьСтроку(Строка);
	КонецЦикла;
	
	Попытка
		Файл.Записать(Параметры.БазаТоваров, КодировкаТекста.ANSI);
	Исключение
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", Параметры.БазаТоваров));
		Результат = Ложь;
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Обрезает передаваемую строку по длине поля. если поле слишком короткое - дополняет нулями
Функция ПостроитьПоле(Текст, ДлинаПоля)
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Если СтрДлина(ТекстПолный) < ДлинаПоля Тогда
		КолвоПробелов = ДлинаПоля - СтрДлина(ТекстПолный);
		Для й = 1 По КолвоПробелов Цикл
			ТекстПолный = ТекстПолный + " ";
		КонецЦикла;
	КонецЕсли;
	Возврат ТекстПолный;
КонецФункции

// Функция осуществляет очистку таблицы товаров в весы с печатью этикеток.
//
Функция ОчиститьТоварыВВесах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	ВыходныеПараметры.Добавить(999);
	ВыходныеПараметры.Добавить(НСтр("ru='Данные весы не подерживают автоматическую очистку товаров.
	| Для очистки товаров в весах запустите приложение загрузки 
	| данных в весы и нажмите кнопку ""Очистить PLU в весах""'"));
	Результат = Ложь;

	Возврат Результат;

КонецФункции

// Функция осуществляет проверку путей по которым хранятся файлы обмена
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	Перем ТекПараметр;
	Результат = Истина;
	Каталог = Неопределено;
	ТекстОшибки = "";

	Параметры.Свойство("БазаТоваров", ТекПараметр);
	ПолучитьКаталогИИмяФайлаТО(ТекПараметр, Каталог, Неопределено);
	Файл = Новый Файл(Каталог);
	Если НЕ Файл.Существует() Тогда
		Результат = Ложь;
		ТекстОшибки1 = НСтр("ru='Каталог ""%Каталог%"" не существует.'")+Символы.ПС;
		ТекстОшибки = ТекстОшибки + СтрЗаменить(ТекстОшибки1, "%Каталог%", Каталог);
	КонецЕсли;
	
	ВыходныеПараметры.Добавить(?(Результат, 0, 999));
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура полное имя файла разбивает на путь в файлу и имя самого файла
//
// Параметры
//  ПолноеИмяФайла  – Строка, содержащая полное имя файла на диске.
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
Процедура ПолучитьКаталогИИмяФайлаТО(Знач ПолноеИмяФайла, ИмяКаталога, ИмяФайла)
	
	// находим последний с конца "\" все что до него - это путь, после - имя
	НомерПозиции = СтрДлина(ПолноеИмяФайла);
	Пока НомерПозиции <> 0 Цикл
		
		Если Сред(ПолноеИмяФайла, НомерПозиции, 1) = "\" Тогда
			
			ИмяКаталога = Сред(ПолноеИмяФайла, 1, НомерПозиции - 1);
			ИмяФайла = Сред(ПолноеИмяФайла, НомерПозиции + 1);
			Возврат;
			
		КонецЕсли;
		
		НомерПозиции = НомерПозиции - 1;
		
	КонецЦикла;
	
	// так и не нашли слешей, значит все- это имя файла
	ИмяФайла = ПолноеИмяФайла;
	ИмяКаталога = "";
	
КонецПроцедуры

// Формирует представление товара
//
// Параметры
//  Выборка  – <ВыборкаИзРезультатаЗапроса > – Исходные данные
//
// Возвращаемое значение:
//   Строка - Описание характеристик ТМЦ
//
Функция ПредставлениеТовара(Выборка)

	Результат = "";
	Если Выборка.ХарактеристикаНоменклатуры <> Неопределено
	   И Выборка.ХарактеристикаНоменклатуры <> "" Тогда
		Результат = Результат + " (" + Выборка.ХарактеристикаНоменклатуры + ")";
	КонецЕсли;

	Результат = Выборка.Номенклатура + Результат;

	Возврат Результат;

КонецФункции