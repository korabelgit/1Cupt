//////////////////////////////////////////////////////////////////////////////////
//// ВСПОМОГАТЕЛЬНЫЙ МОДУЛЬ УПРАВЛЕНИЯ ПОДКЛЮЧАЕМЫМ ОБОРУДОВАНИЕМ (на сервере) ////////
//////////////////////////////////////////////////////////////////////////////////

// Функция возвращает список подключенного в справочнике ПО
Функция ПолучитьСписокОборудования(ТипыПО = Неопределено, Идентификатор = Неопределено, РабочееМесто = Неопределено) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.ПолучитьСписокОборудования(ТипыПО, Идентификатор, РабочееМесто);

КонецФункции

// Функция возвращает по идентификатору устройства его параметры
Функция ПолучитьПараметрыУстройства(Идентификатор) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.ПолучитьПараметрыУстройства(Идентификатор);

КонецФункции

// Процедура предназначена для сохранения параметров устройства
//в реквизит Параметры типа хранилище значения в элементе справочника
Функция СохранитьПараметрыУстройства(Идентификатор, Параметры) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.СохранитьПараметрыУстройства(Идентификатор, Параметры);

КонецФункции

// Функция возвращает структуру с данными устройства
//(со значениями реквизитов элемента справочника)
Функция ПолучитьДанныеУстройства(Идентификатор) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.ПолучитьДанныеУстройства(Идентификатор);

КонецФункции

// Функция возвращает по идентификатору наименование драйвера устройства
Функция ПолучитьИмяДрайвераЭкземпляра(НаименованиеОбработчикаДрайвера) Экспорт

	Результат = "";

	Для каждого ИмяПеречисления Из Метаданные.Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ЗначенияПеречисления Цикл
		Если НаименованиеОбработчикаДрайвера = ИмяПеречисления.Синоним Тогда
			Результат = ИмяПеречисления.Имя;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Функция возвращает из переменной сеанса имя компьютера клиента
Функция ПолучитьРабочееМестоКлиента() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса.РабочееМестоКлиента;

КонецФункции

// Функция возвращает список рабочих мест, соответствующих указанному имени компьютера
Функция НайтиРабочиеМестаПоИД(ИдентификаторКлиента) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РабочиеМеста.Ссылка
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.Код = &Код
	|	И РабочиеМеста.ПометкаУдаления = ЛОЖЬ
	|");

	Запрос.УстановитьПараметр("Код", ИдентификаторКлиента);

	СписокКомпьютеров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат СписокКомпьютеров;

КонецФункции

// Функция устанавливает в переменную сеанса имя компьютера клиента
Процедура УстановитьРабочееМестоКлиента(РабочееМестоКлиента) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.РабочееМестоКлиента = РабочееМестоКлиента;
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Функция возвращает макет слип чека по наименованию макета
//
Функция ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры) Экспорт

	Документ = Новый ТекстовыйДокумент();
	СлипЧек  = "";

	Макет    = Справочники.ПодключаемоеОборудование.ПолучитьМакет(ИмяМакета);
	Область  = Макет.ПолучитьОбласть("Чек" + ШиринаСлипЧека);

	Для Каждого Параметр Из Параметры Цикл
		Область.Параметры[Параметр.Ключ] = Параметр.Значение;
	КонецЦикла;

	Если Область <> Неопределено Тогда
		Документ.Вывести(Область);

		Для Индекс = 1 По Документ.КоличествоСтрок() Цикл
			СлипЧек = СлипЧек + Документ.ПолучитьСтроку(Индекс)
			        + ?(Индекс = Документ.КоличествоСтрок(), "", Символ(13) + Символ(10));
		КонецЦикла;
	КонецЕсли;

	Возврат СлипЧек;

КонецФункции

// Функция получает макет драйвера и сохраняет его во временное хранилище,
// возвращая ссылку на временное хранилище
Функция ПолучитьМакетССервера(ИмяМакета) Экспорт

	Ссылка = ПоместитьВоВременноеХранилище(Справочники.ПодключаемоеОборудование.ПолучитьМакет(ИмяМакета));

	Возврат Ссылка;

КонецФункции

// Функция возвращает значение константы
//
Функция ПолучитьКонстанту(ИмяКонстанты) Экспорт
	
	Константа = Константы[ИмяКонстанты].Получить();
	Возврат Константа;
	
КонецФункции

// Функция возвращает имя перечисления из его метаданных
//
Функция ПолучитьИмяТипаОборудования(ТипОборудования) Экспорт

	Результат = Неопределено;
	
	МтОбъект = ТипОборудования.Метаданные();
	Индекс = Перечисления.ТипыПодключаемогоОборудования.Индекс(ТипОборудования);
	Результат = МтОбъект.ЗначенияПеречисления[Индекс].Имя;

	Возврат Результат;

КонецФункции

// Функция возвращает созданное рабочее место клиента
Функция СоздатьРабочееМестоКлиента(Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	РабочееМесто = Справочники.РабочиеМеста.СоздатьЭлемент();

	РабочееМесто.Код           = Параметры.ИдентификаторКлиента;
	РабочееМесто.ИмяКомпьютера = Параметры.ИмяКомпьютера;
	РабочееМесто.СетевойПорт   = Параметры.СетевойПорт;

	МенеджерОборудованияКлиентСервер.ЗаполнитьНаименованиеРабочегоМеста(РабочееМесто, ПользователиИнформационнойБазы.ТекущийПользователь());

	РабочееМесто.Записать();

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РабочееМесто.Ссылка;

КонецФункции // СоздатьРабочееМестоКлиентаПоИД()

// Процедура устанавливает значения параметров сеанса, относящихся к подключаемому оборудованию
Процедура УстановитьПараметрыСеансаПодключаемогоОборудования(ИмяПараметра, УстановленныеПараметры) Экспорт

	Если ИмяПараметра = "РабочееМестоКлиента" Тогда
		
		//Если с идентификатором клиента текущего сеанса связано одно рабочее место,
		// то его сразу и запишем в параметры сеанса
		ТекущееРМ           = Справочники.РабочиеМеста.ПустаяСсылка();
		СистемнаяИнформация = Новый СистемнаяИнформация();

		СписокРМ = НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
		Если СписокРМ.Количество() = 0 Тогда
			
			// Будет создано с клиента.
			
		ИначеЕсли СписокРМ.Количество() = 1 Тогда
			
			ТекущееРМ = СписокРМ[0];
			
		ИначеЕсли СписокРМ.Количество() > 1 Тогда
			
			// Будет выбрано на клиенте.
			
		КонецЕсли;
		
		УстановитьРабочееМестоКлиента(ТекущееРМ);
		
		УстановленныеПараметры.Вставить("РабочееМестоКлиента");
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает набор пользовательских настроек,
// связанных с механизмом подключаемого оборудования
Функция ПолучитьПользовательскиеНастройкиПодключаемогоОборудования() Экспорт

	СписокНастроек = ХранилищеОбщихНастроек.ПолучитьСписок("ПользовательскиеНастройкиПодключаемогоОборудования");

	Настройки = Новый Структура();

	Для Каждого Элемент из СписокНастроек Цикл
		КлючНастройки = Элемент.Значение;
		ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить("ПользовательскиеНастройкиПодключаемогоОборудования", КлючНастройки);
		Если ЗначениеНастройки <> Неопределено Тогда
			Настройки.Вставить(КлючНастройки, ЗначениеНастройки);
		КонецЕсли;
	КонецЦикла;

	Возврат Настройки;

КонецФункции

Процедура СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек) Экспорт

	Для Каждого Элемент Из СписокНастроек Цикл
		ХранилищеОбщихНастроек.Сохранить("ПользовательскиеНастройкиПодключаемогоОборудования", Элемент.Ключ, Элемент.Значение);
	КонецЦикла;

	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры