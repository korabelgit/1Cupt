// Функция возвращает текстовую строку, сформированную на основании спец. шаблона,
// подставляя значения переданных параметров.	
// 
// Параметры
//  СтрокаШаблон – Строка – Строка шаблон, в тексте которой
//                 есть указания на то, куда вставить представления 
//                 параметров. 
//                 Параметры отмечаются текстом %1...¤20¤.
//                 Символ "¤" можно набрать при помощи Alt+0164
//  Пар1...Пар20 – произвольного типа – параметры,
//                 строковое представление которых будет 
//                 подставлятся в шаблон.
//
// Возвращаемое значение:
//   Строка   – сформированная текстовая строка
//
Функция СтрШаблонУкр(Знач СтрокаШаблон, 
										Знач Пар1  = "", Знач Пар2  = "",
										Знач Пар3  = "", Знач Пар4  = "", Знач Пар5  = "",
										Знач Пар6  = "", Знач Пар7  = "", Знач Пар8  = "",
										Знач Пар9  = "", Знач Пар10 = "", Знач Пар11 = "",
										Знач Пар12 = "", Знач Пар13 = "", Знач Пар14 = "",
										Знач Пар15 = "", Знач Пар16 = "", Знач Пар17 = "",
										Знач Пар18 = "", Знач Пар19 = "", Знач Пар20 = "") Экспорт
										
	ПризнакПараметра = "¤";
	МетаСимвол       = "\¤"; //заменяется на признак параметра
	
	Для Счетчик = 1 По 20 Цикл
			
		ПерваяПозицияВхожденияПараметра = Найти(СтрокаШаблон, ""+ ПризнакПараметра + Счетчик + ПризнакПараметра);
				
		Если ПерваяПозицияВхожденияПараметра = 0 Тогда
			// этот параметр не используется
			Продолжить;	
		КонецЕсли; 
				
		ПараметрВСтроку = "";
		Выполнить("ПараметрВСтроку = Строка(Пар" + Счетчик + ")");
				
		СтрокаШаблон = СтрЗаменить(СтрокаШаблон, ПризнакПараметра + Счетчик + ПризнакПараметра, ПараметрВСтроку);
				
	КонецЦикла;									
		
	ПозицияМетаСимвола = СтрЗаменить(СтрокаШаблон, МетаСимвол,ПризнакПараметра);

	Возврат СтрокаШаблон;
	
КонецФункции // СтрШаблонУкр()

//Если параметр КодЯзыка совпадает с кодом языка интерфейса,
//	то представление получается через ОбъектМетаданных.Представление()
//Если не совпадает, то возвращаются синонимы в зависимости от имени объекта
// 
// Параметры
//  Объект		 - Ссылка на объект, для которого нужно получить перевод
//  КодЯзыка  	 – Строка – код языка в формате uk/ru
//
Функция ПолучитьЛокализованныйСинонимОбъекта(Ссылка, КодЯзыка) Экспорт

	МетаданныеДляСсылки = Ссылка.Метаданные();
	ПолноеИмяОбъектаМетаданных = МетаданныеДляСсылки.ПолноеИмя();
	
	Если Метаданные.Документы.Содержит(МетаданныеДляСсылки) Тогда
		Если КодЯзыка = ЛокализацияПовтИсп.КодЯзыкаИнтерфейса() Тогда
			// "переводить" не нужно
			Возврат МетаданныеДляСсылки.Представление();
		КонецЕсли;
		// это документ
		ИмяДляПеревода = МетаданныеДляСсылки.Имя;
	ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеДляСсылки) Тогда
		// это перечисление
		Если КодЯзыка = ЛокализацияПовтИсп.КодЯзыкаИнтерфейса() Тогда
			// "переводить" не нужно
			Возврат Строка(Ссылка);
		КонецЕсли;
		// имя элемента перечисления получить из метаданных "трудно", 
		// поэтому для перевода будем использовать синоним на языке интерфейса		
		Если Ссылка = Перечисления[МетаданныеДляСсылки.Имя].ПустаяСсылка() Тогда 
			Возврат ""; 
		КонецЕсли;
		ИндексЗначения = Перечисления[МетаданныеДляСсылки.Имя].Индекс(Ссылка);
		ИмяДляПеревода = МетаданныеДляСсылки.ЗначенияПеречисления[ИндексЗначения].Имя;
	КонецЕсли; 
	
	РезультатПеревода = "";
	СинонимМетаданных = МетаданныеДляСсылки.Синоним;
	РезультатПеревода = ЛокализацияПовтИсп.ОбработатьПереводы(ПолноеИмяОбъектаМетаданных, ИмяДляПеревода, КодЯзыка, СинонимМетаданных);
	
	Возврат РезультатПеревода;
КонецФункции // ПредставлениеОбъекта()

// Возвращает представление объекта на указанном языке
// Фактически обрабатываются документы и перечисления
// Параметры
//  Ссылка    – <произвольный>
//  КодЯзыка  – <строка> – код языка
//
// Возвращаемое значение:
//   <Строка>   – представление объекта
//
Функция ПолучитьЛокализованноеПредставление(Ссылка, КодЯзыка) Экспорт

	ТипЗначенияСсылки = ТипЗнч(Ссылка);
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗначенияСсылки) Тогда
		// это документ
		Возврат ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка, ПолучитьЛокализованныйСинонимОбъекта(Ссылка, КодЯзыка), КодЯзыка);
		
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначенияСсылки) Тогда

		Возврат ПолучитьЛокализованныйСинонимОбъекта(Ссылка, КодЯзыка);
		
	Иначе
		
		Возврат Строка(Ссылка);
		
	КонецЕсли;	
	
КонецФункции // ПолучитьЛокализованноеПредставление()

Процедура ПроверитьПереводСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, ИмяОтчета, ПереводитьСубконто = Истина, ПерезаписатьСхему = Ложь) Экспорт	
	
	Если (НЕ ЛокализацияПовтИсп.ТестовыйРежим()) И (НЕ ПерезаписатьСхему) Тогда
	  	Возврат;
	КонецЕсли; 
	
	ЯзыкФормированияПечатныхФормОтчетов = ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов();
	
	Если ЯзыкФормированияПечатныхФормОтчетов = "ru" Тогда
		// предполагаем, что все схемы СКД изначально на русском языке - переводить схему не требуется
		Возврат;
	КонецЕсли;
	
	Для Каждого НаборДанных ИЗ СхемаКомпоновкиДанных.НаборыДанных Цикл
		Для Каждого Поле Из НаборДанных.Поля Цикл
			Заголовок = Поле.Заголовок;
			Если ПустаяСтрока(Заголовок) Тогда
				// автозаголовок
				Если ЛокализацияПовтИсп.ТестовыйРежим() Тогда
					Сообщить("ПроверитьПереводСхемыКомпоновкиДанных, отчет " + ИмяОтчета + ", поле " + Поле.Поле + " установлен признак Автозаголовок!. Необходимо отключить признак");
				КонецЕсли; 
			Иначе
				НовыйЗаголовок = ЛокализацияПовтИсп.ПолучитьПереводТекста(Заголовок,,,ПереводитьСубконто);
				Если ПерезаписатьСхему Тогда
					Поле.Заголовок = НовыйЗаголовок;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;	
	
	Для Каждого Поле Из СхемаКомпоновкиДанных.ВычисляемыеПоля Цикл
		Заголовок = Поле.Заголовок;
		НовыйЗаголовок = ЛокализацияПовтИсп.ПолучитьПереводТекста(Заголовок,,,ПереводитьСубконто);
		Если ПерезаписатьСхему Тогда
			Поле.Заголовок = НовыйЗаголовок;
		КонецЕсли; 
	КонецЦикла; 
	

КонецПроцедуры // ПроверитьПереводСхемыКомпоновкиДанных()

Процедура ПеревестиМакетКомпоновкиДанных(МакетКомпоновкиДанных, СтрокаОтбор = "", ОбрабатыватьСтрокуОтбора = Истина, ПереводитьСубконто = Истина) Экспорт	
	
	ЯзыкФормированияПечатныхФормОтчетов = ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов();
	
	Если ЯзыкФормированияПечатныхФормОтчетов = "ru" Тогда
		// предполагаем, что все макеты СКД изначально на русском языке - переводить макет не требуется
		Возврат;
	КонецЕсли; 
	
	ПослеТекстаОтбор = Ложь;
	
	Для Каждого ОписаниеМакетаОбластиМакетаКомпоновкиДанных Из МакетКомпоновкиДанных.Макеты Цикл
		Если ТипЗнч(ОписаниеМакетаОбластиМакетаКомпоновкиДанных.Макет) <> Тип("МакетОбластиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		Для Каждого СтрокаТаблицыОбластиКомпоновкиДанных Из ОписаниеМакетаОбластиМакетаКомпоновкиДанных.Макет Цикл
			Для Каждого ЯчейкаТаблицыОбластиКомпоновкиДанных Из СтрокаТаблицыОбластиКомпоновкиДанных.Ячейки Цикл
				Для Каждого ПолеОбластиКомпоновкиДанных Из ЯчейкаТаблицыОбластиКомпоновкиДанных.Элементы Цикл
					
					ЗначениеПоля = ПолеОбластиКомпоновкиДанных.Значение;
					ТипЗначениеПоля = ТипЗнч(ЗначениеПоля);
					
					Если ТипЗначениеПоля <> Тип("Строка") Тогда
						Продолжить;
					КонецЕсли; 
					
					Если ПослеТекстаОтбор Тогда
						Если ОбрабатыватьСтрокуОтбора Тогда
							ПолеОбластиКомпоновкиДанных.Значение = СтрокаОтбор;
							ПослеТекстаОтбор = Ложь;
							Продолжить;
						Иначе
							ПослеТекстаОтбор = Ложь;
							Продолжить;
						КонецЕсли; 		
					КонецЕсли; 
					
					Если ПустаяСтрока(ЗначениеПоля) Тогда
					    Продолжить;
					КонецЕсли;
					
					// обрабатываем исключения
					НовоеЗначениеПоля = ЛокализацияПовтИсп.ОбработатьИсключенияЗначенийПолейСКД(ЗначениеПоля, ЯзыкФормированияПечатныхФормОтчетов);
					
					Если НовоеЗначениеПоля <> Неопределено Тогда
						ПолеОбластиКомпоновкиДанных.Значение = НовоеЗначениеПоля;
						Продолжить;	
					КонецЕсли;	
					
					// обычный перевод
					НовоеЗначениеПоля = ЛокализацияПовтИсп.ПолучитьПереводДляОтчетовНаСКД(ЗначениеПоля, ЯзыкФормированияПечатныхФормОтчетов, ПереводитьСубконто);
					ПолеОбластиКомпоновкиДанных.Значение = НовоеЗначениеПоля;
					
					Если НовоеЗначениеПоля = НСтр("ru='Отбор:';uk='Відбір:'", ЯзыкФормированияПечатныхФормОтчетов) Тогда
						ПослеТекстаОтбор = Истина;
					КонецЕсли; 
					
				КонецЦикла;
			КонецЦикла; 				
		КонецЦикла; 			
	КонецЦикла; 	

КонецПроцедуры // ПеревестиМакетКомпоновкиДанных()

// Переводит или преобразует в строку отбор СКД
//
// Параметры:
//
// Возвращаемое значение:
//   Строка - Строка(Отбор) или строка переведенная на язык формирования отчетов
//
Функция ПеревестиОтборСКД(КомпоновщикНастроек) Экспорт
	
	ЯзыкФормированияПечатныхФормОтчетов = ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов();
	
	Если ЯзыкФормированияПечатныхФормОтчетов = "ru" Тогда
		// предполагаем, что все схемы СКД изначально на русском языке - переводить отбор не требуется
		Возврат Строка(КомпоновщикНастроек.Настройки.Отбор);
	КонецЕсли; 
	
	Результат = ПеревестиЭлементыОтбораСКД(КомпоновщикНастроек, КомпоновщикНастроек.Настройки.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ, ЯзыкФормированияПечатныхФормОтчетов);
	
	Возврат Результат;

КонецФункции // ПеревестиОтборСКД()

Функция ПеревестиЭлементыОтбораСКД(КомпоновщикНастроек, ЭлементыОтбора, ТипГруппыЭлементовОтбора, ЯзыкФормирования) Экспорт
	
	Результат = "";
	
	Если ТипГруппыЭлементовОтбора = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ Тогда
		СуффиксТипаГруппы = НСтр("ru=' ИЛИ';uk=' АБО '", ЯзыкФормирования);
	Иначе
		СуффиксТипаГруппы = НСтр("ru=' И';uk=' І'", ЯзыкФормирования);
	КонецЕсли; 
	
	КоличествоЭлементов = ЭлементыОтбора.Количество();
	
	Для инд = 0 По КоличествоЭлементов - 1 Цикл
		
		ЭлементОтбора = ЭлементыОтбора[инд];
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли; 
		
		ПоследнийЭлемент = (инд = КоличествоЭлементов - 1);
		
		ТипЭлемента = ТипЗнч(ЭлементОтбора);
		Если ТипЭлемента = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ЗаголовокПоляОтбора = ЛокализацияПовтИсп.ПолучитьПереводТекста(ПолучитьЗаголовокПоляОтбораСКД(КомпоновщикНастроек, ЭлементОтбора.ЛевоеЗначение));
			
			Результат = Результат 
						+ ЗаголовокПоляОтбора 
						+ " " + ПеревестиВидСравненияСКД(ЭлементОтбора.ВидСравнения, ЯзыкФормирования) + " "
						+ ?(Строка(ЭлементОтбора.ПравоеЗначение) = "", """""", Строка(ЭлементОтбора.ПравоеЗначение))
						+ ?(ПоследнийЭлемент, "", СуффиксТипаГруппы + Символы.ПС);
		Иначе
			
			Если ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				ПрефиксТипаГруппы = НСтр("ru='НЕ';uk='НЕ'", ЯзыкФормирования);
			Иначе
				ПрефиксТипаГруппы = "";
			КонецЕсли; 
			
						
			Результат = Результат 
						+ ПрефиксТипаГруппы
						+ " ( " 
						+ ПеревестиЭлементыОтбораСКД(КомпоновщикНастроек, ЭлементОтбора.Элементы, ЭлементОтбора.ТипГруппы, ЯзыкФормирования)
						+ " ) " 
						+ ?(ПоследнийЭлемент, "", СуффиксТипаГруппы + Символы.ПС);
		КонецЕсли; 
		
	КонецЦикла;	
	
	ДлинаСуффикса = СтрДлина(СуффиксТипаГруппы + Символы.ПС);
	Если Прав(Результат, ДлинаСуффикса) = СуффиксТипаГруппы + Символы.ПС Тогда
		Результат = Лев(Результат, СтрДлина(Результат) - ДлинаСуффикса);
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции // ПеревестиЭлементОтбораСКД()

Функция ПолучитьЗаголовокПоляОтбораСКД(КомпоновщикНастроек, Поле)
	
	ДоступноеПоле = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(Поле);
	
	Если ДоступноеПоле <> Неопределено Тогда
		Возврат ДоступноеПоле.Заголовок;
	КонецЕсли;
	
	Возврат "";

КонецФункции // ПолучитьЗаголовокПоляОтбораСКД()

Функция ПеревестиВидСравненияСКД(ВидСравнения, ЯзыкФормирования) Экспорт
	
	Если ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		Возврат НСтр("ru='Больше';uk='Більше'", ЯзыкФормирования);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда	
		Возврат НСтр("ru='Больше или равно';uk='Більше або дорівнює'", ЯзыкФормирования);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда	
		Возврат НСтр("ru='В группе';uk='В групі'", ЯзыкФормирования);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда	
		Возврат НСтр("ru='В списке';uk='В списку'", ЯзыкФормирования);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда	
		Возврат НСтр("ru='В группе из списка';uk='В групі зі списку'", ЯзыкФормирования);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда	
		Возврат НСтр("ru='Заполнено';uk='Заповнено'", ЯзыкФормирования);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда	
		Возврат НСтр("ru='Меньше';uk='Менше'", ЯзыкФормирования);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда	
		Возврат НСтр("ru='Меньше или равно';uk='Менше або дорівнює'", ЯзыкФормирования);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда	
		Возврат НСтр("ru='Не в группе';uk='Не в групі'", ЯзыкФормирования);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда	
		Возврат НСтр("ru='Не в списке';uk='Не в списку'", ЯзыкФормирования);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда	
		Возврат НСтр("ru='Не в группе из списка';uk='Не в групі зі списку'", ЯзыкФормирования);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда	
		Возврат НСтр("ru='Не заполнено';uk='Не заповнено'", ЯзыкФормирования);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда	
		Возврат НСтр("ru='Не равно';uk='Не дорівнює'", ЯзыкФормирования);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда	
		Возврат НСтр("ru='Не содержит';uk='Не містить'", ЯзыкФормирования);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда	
		Возврат НСтр("ru='Равно';uk='Дорівнює'", ЯзыкФормирования);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда			
		Возврат НСтр("ru='Содержит';uk='Містить'", ЯзыкФормирования);
	КонецЕсли; 

КонецФункции // ПеревестиВидСравненияСКД()

// Процедура вызывается для обновления рс ПереводыТекстов из макета НачальноеЗаполнение рс
Процедура ОбновитьРегистрСведенийПереводыТекстовИзМакетаНачальногоЗаполнения(Перезаписывать = Истина) Экспорт
	
	Макет = РегистрыСведений.ПереводыТекстов.ПолучитьМакет("НачальноеЗаполнение");
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	ОбластьРесурсов = Макет.ПолучитьОбласть("Ресурсы");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	| 	ПереводыТекстов.ХешRU   КАК ХешRU,
	|   ПереводыТекстов.ХешUK   КАК ХешUK,
	| 	ПереводыТекстов.УИД     КАК УИД,
	| 	ПереводыТекстов.ТекстRU КАК ТекстRU,
	| 	ПереводыТекстов.ТекстUK КАК ТекстUK
	|
	|ИЗ 
	|	РегистрСведений.ПереводыТекстов КАК ПереводыТекстов
	|ГДЕ    
	|   ПереводыТекстов.ХешRU = &ХешRU
	|   И ПереводыТекстов.ТекстRU = &ТекстRU
	|";
	
	Для Сч = 2 По КоличествоЗаписей Цикл
		
		ТекстRU = СокрЛП(ОбластьРесурсов.Область(Сч, 1).Текст);
		ТекстUK = СокрЛП(ОбластьРесурсов.Область(Сч, 2).Текст);
		
		Запрос.УстановитьПараметр("ХешRU",   ЛокализацияПовтИсп.ПолучитьХешСтроки(ТекстRU));
		Запрос.УстановитьПараметр("ТекстRU", ТекстRU);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			
			БылаЗапись = Ложь;
			Перезаписываем = Ложь;
			Удаляем = Ложь;
			
			Пока Выборка.Следующий() Цикл 
				
				Если ЗначениеЗаполнено(Выборка.ТекстUK) Тогда
					Если Перезаписывать Тогда
						Перезаписываем = Истина;
					Иначе
						// уже есть необходимая запись. Следующие такие же удаляем, новых не пишем
						Перезаписываем = Ложь;
						БылаЗапись     = Истина;
					КонецЕсли; 
				Иначе
					Перезаписываем = Истина;
				КонецЕсли; 
				
				Если Перезаписываем И (НЕ БылаЗапись) Тогда
					
					Запись = РегистрыСведений.ПереводыТекстов.СоздатьМенеджерЗаписи();
					
					Запись.ХешRU = Выборка.ХешRU;
					Запись.ХешUK = Выборка.ХешUK;
					Запись.УИД   = Выборка.УИД;
					
					Запись.Прочитать();
					
					Если Запись.Выбран() Тогда
						
						Запись.ТекстUK = ТекстUK;	
						Запись.Записать(Истина);
						
						БылаЗапись     = Истина;
						
					КонецЕсли; 
					
				КонецЕсли; 
				
				Если Удаляем Тогда
					
					НаборЗаписей = РегистрыСведений.ПереводыТекстов.СоздатьНаборЗаписей();
					
					НаборЗаписей.Отбор.ХешRU.Установить(Выборка.ХешRU);
					НаборЗаписей.Отбор.ХешUK.Установить(Выборка.ХешUK);
					НаборЗаписей.Отбор.УИД.Установить(Выборка.УИД);
					
					НаборЗаписей.Записать(Истина);
					
				КонецЕсли; 
				
				Если БылаЗапись Тогда
					// все следущие записи с таким ТекстRU - удаляем, дублирование не надо.
					Удаляем = Истина;
				КонецЕсли; 
				
			КонецЦикла;	
			
		Иначе
			
			// записей с таким ТекстRU еще не было - добавляем новую
			
			Запись = РегистрыСведений.ПереводыТекстов.СоздатьМенеджерЗаписи();
			
			Запись.ТекстRU = ТекстRU;
			Запись.ТекстUK = ТекстUK;
			
			Запись.Записать();
			
		КонецЕсли;	
		
	КонецЦикла;	

КонецПроцедуры // ОбновитьРегистрСведенийПереводыТекстовИзМакетаНачальногоЗаполнения

// Процедура вызывается для обновления хешей в рс ПереводыТекстов
Процедура ОбновитьХешиРегистраСведенийПереводыТекстов() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	| 	ПереводыТекстов.ХешRU   КАК ХешRU,
	|   ПереводыТекстов.ХешUK   КАК ХешUK,
	| 	ПереводыТекстов.УИД     КАК УИД
	|ИЗ 
	|	РегистрСведений.ПереводыТекстов КАК ПереводыТекстов
	|
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			
			Запись = РегистрыСведений.ПереводыТекстов.СоздатьМенеджерЗаписи();
			
			Запись.ХешRU = Выборка.ХешRU;
			Запись.ХешUK = Выборка.ХешUK;
			Запись.УИД   = Выборка.УИД;
				
			Запись.Прочитать();
				
			Если Запись.Выбран() Тогда
				
				Запись.Записать(Истина);
					
			КонецЕсли; 
			
		КонецЦикла;	

КонецПроцедуры // ОбновитьХешиРегистраСведенийПереводыТекстов

// Загружает синонимы объектов, реквизитов, измерений и т.д. из метаданных всей конфигурации в рс ПереводыТекстов
//
// Параметры: нет
Процедура ЗагрузитьТекстыИзМетаданных() Экспорт
	
	
	// Константы
	Для Каждого МДКонстанта Из Метаданные.Константы Цикл
		Синоним = МДКонстанта.Синоним;
		Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
	КонецЦикла; 
	
	// Справочники
	Для Каждого МДСправочник Из Метаданные.Справочники Цикл
		Синоним = МДСправочник.Синоним;
		Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		Для Каждого МДРеквизит Из МДСправочник.Реквизиты Цикл
			Синоним = МДРеквизит.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДТабличнаяЧасть Из МДСправочник.ТабличныеЧасти Цикл
			Синоним = МДТабличнаяЧасть.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			Для Каждого МДРеквизит Из МДТабличнаяЧасть.Реквизиты Цикл
				Синоним = МДРеквизит.Синоним;
				Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	// Документы
	Для Каждого МДДокумент Из Метаданные.Документы Цикл
		Синоним = МДДокумент.Синоним;
		Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		Для Каждого МДРеквизит Из МДДокумент.Реквизиты Цикл
			Синоним = МДРеквизит.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДТабличнаяЧасть Из МДДокумент.ТабличныеЧасти Цикл
			Синоним = МДТабличнаяЧасть.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			Для Каждого МДРеквизит Из МДТабличнаяЧасть.Реквизиты Цикл
				Синоним = МДРеквизит.Синоним;
				Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	// Перечисления
	Для Каждого МДПеречисление Из Метаданные.Перечисления Цикл
		Синоним = МДПеречисление.Синоним;
		Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		Для Каждого МДЗначение Из МДПеречисление.ЗначенияПеречисления Цикл
			Синоним = МДРеквизит.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
	КонецЦикла; 
	
	// Отчеты
	Для Каждого МДОтчет Из Метаданные.Отчеты Цикл
		Синоним = МДОтчет.Синоним;
		Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		Для Каждого МДРеквизит Из МДОтчет.Реквизиты Цикл
			Синоним = МДРеквизит.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДТабличнаяЧасть Из МДОтчет.ТабличныеЧасти Цикл
			Синоним = МДТабличнаяЧасть.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			Для Каждого МДРеквизит Из МДТабличнаяЧасть.Реквизиты Цикл
				Синоним = МДРеквизит.Синоним;
				Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	// Обработки
	Для Каждого МДОбработка Из Метаданные.Обработки Цикл
		Синоним = МДОбработка.Синоним;
		Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		Для Каждого МДРеквизит Из МДОбработка.Реквизиты Цикл
			Синоним = МДРеквизит.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДТабличнаяЧасть Из МДОбработка.ТабличныеЧасти Цикл
			Синоним = МДТабличнаяЧасть.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			Для Каждого МДРеквизит Из МДТабличнаяЧасть.Реквизиты Цикл
				Синоним = МДРеквизит.Синоним;
				Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	// ПВХ
	Для Каждого МДПВХ Из Метаданные.ПланыВидовХарактеристик Цикл
		Синоним = МДПВХ.Синоним;
		Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		Для Каждого МДРеквизит Из МДПВХ.Реквизиты Цикл
			Синоним = МДРеквизит.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДТабличнаяЧасть Из МДПВХ.ТабличныеЧасти Цикл
			Синоним = МДТабличнаяЧасть.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			Для Каждого МДРеквизит Из МДТабличнаяЧасть.Реквизиты Цикл
				Синоним = МДРеквизит.Синоним;
				Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	// Планы счетов
	Для Каждого МДПланСчетов Из Метаданные.ПланыСчетов Цикл
		Синоним = МДПланСчетов.Синоним;
		Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		Для Каждого МДРеквизит Из МДПланСчетов.Реквизиты Цикл
			Синоним = МДРеквизит.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
	КонецЦикла; 
	
	// ПВР
	Для Каждого МДПВР Из Метаданные.ПланыВидовРасчета Цикл
		Синоним = МДПВР.Синоним;
		Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		Для Каждого МДРеквизит Из МДПВР.Реквизиты Цикл
			Синоним = МДРеквизит.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДТабличнаяЧасть Из МДПВР.ТабличныеЧасти Цикл
			Синоним = МДТабличнаяЧасть.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			Для Каждого МДРеквизит Из МДТабличнаяЧасть.Реквизиты Цикл
				Синоним = МДРеквизит.Синоним;
				Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	// Регистры сведений
	Для Каждого МДРегистрСведений Из Метаданные.РегистрыСведений Цикл
		Синоним = МДРегистрСведений.Синоним;
		Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		Для Каждого МДИзмерение Из МДРегистрСведений.Измерения Цикл
			Синоним = МДИзмерение.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДРесурс Из МДРегистрСведений.Ресурсы Цикл
			Синоним = МДРесурс.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДРеквизит Из МДРегистрСведений.Реквизиты Цикл
			Синоним = МДРеквизит.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
	КонецЦикла; 
	
	// Регистры накопления 
	Для Каждого МДРегистрНакопления Из Метаданные.РегистрыНакопления Цикл
		Синоним = МДРегистрНакопления.Синоним;
		Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		Для Каждого МДИзмерение Из МДРегистрНакопления.Измерения Цикл
			Синоним = МДИзмерение.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДРесурс Из МДРегистрНакопления.Ресурсы Цикл
			Синоним = МДРесурс.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДРеквизит Из МДРегистрНакопления.Реквизиты Цикл
			Синоним = МДРеквизит.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
	КонецЦикла; 
	
	// Регистры бухгалтерии
	Для Каждого МДРегистрБухгалтерии Из Метаданные.РегистрыБухгалтерии Цикл
		Синоним = МДРегистрБухгалтерии.Синоним;
		Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		Для Каждого МДИзмерение Из МДРегистрБухгалтерии.Измерения Цикл
			Синоним = МДИзмерение.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДРесурс Из МДРегистрБухгалтерии.Ресурсы Цикл
			Синоним = МДРесурс.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДРеквизит Из МДРегистрБухгалтерии.Реквизиты Цикл
			Синоним = МДРеквизит.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
	КонецЦикла; 
	
	// Регистры расчета 
	Для Каждого МДРегистрРасчета Из Метаданные.РегистрыРасчета Цикл
		Синоним = МДРегистрРасчета.Синоним;
		Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		Для Каждого МДИзмерение Из МДРегистрРасчета.Измерения Цикл
			Синоним = МДИзмерение.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДРесурс Из МДРегистрРасчета.Ресурсы Цикл
			Синоним = МДРесурс.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДРеквизит Из МДРегистрРасчета.Реквизиты Цикл
			Синоним = МДРеквизит.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДПерерасчет Из МДРегистрРасчета.Перерасчеты Цикл
			Синоним = МДПерерасчет.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
	КонецЦикла; 
	
	// Бизнес-процессы
	Для Каждого МДБП Из Метаданные.БизнесПроцессы Цикл
		Синоним = МДБП.Синоним;
		Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		Для Каждого МДРеквизит Из МДБП.Реквизиты Цикл
			Синоним = МДРеквизит.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДТабличнаяЧасть Из МДБП.ТабличныеЧасти Цикл
			Синоним = МДТабличнаяЧасть.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			Для Каждого МДРеквизит Из МДТабличнаяЧасть.Реквизиты Цикл
				Синоним = МДРеквизит.Синоним;
				Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	// Задачи
	Для Каждого МДЗадача Из Метаданные.Задачи Цикл
		Синоним = МДЗадача.Синоним;
		Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		Для Каждого МДРеквизитАдресации Из МДЗадача.РеквизитыАдресации Цикл
			Синоним = МДРеквизитАдресации.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДРеквизит Из МДЗадача.Реквизиты Цикл
			Синоним = МДРеквизит.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
		КонецЦикла; 
		Для Каждого МДТабличнаяЧасть Из МДЗадача.ТабличныеЧасти Цикл
			Синоним = МДТабличнаяЧасть.Синоним;
			Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			Для Каждого МДРеквизит Из МДТабличнаяЧасть.Реквизиты Цикл
				Синоним = МДРеквизит.Синоним;
				Перевод = ЛокализацияПовтИсп.ПолучитьПереводТекста(Синоним);
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	
КонецПроцедуры // ЗагрузитьТекстыИзМетаданных()

Процедура ОтчетПриКомпоновкеРезультата(ОтчетОбъект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	
	ЯзыкФормированияПечатныхФормОтчетов = ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов();
	
	Если ЯзыкФормированияПечатныхФормОтчетов = "ru" Тогда
		// предполагаем, что все макеты в отчетах СКД в конфигурации изначально на русском языке - переводить отчет не требуется
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	СхемаКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных;
	Локализация.ПроверитьПереводСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, Строка(ОтчетОбъект));
	
	Для Каждого ВложеннаяСхемаКомпоновкиДанных ИЗ СхемаКомпоновкиДанных.ВложенныеСхемыКомпоновкиДанных Цикл
		Локализация.ПроверитьПереводСхемыКомпоновкиДанных(ВложеннаяСхемаКомпоновкиДанных.Схема, Строка(ОтчетОбъект));
	КонецЦикла;	
	
	НастройкиОсновнойСхемы = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();

	// Сформируем отчет
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОсновнойСхемы, ДанныеРасшифровки);
	
	СтрокаОтбор = Локализация.ПеревестиОтборСКД(ОтчетОбъект.КомпоновщикНастроек);
	Локализация.ПеревестиМакетКомпоновкиДанных(МакетКомпоновки, СтрокаОтбор);
	
	Для Каждого ТелоМакетаКомпоновкиДанных Из МакетКомпоновки.Тело Цикл
		Если ТипЗнч(ТелоМакетаКомпоновкиДанных) = Тип("ВложенныйОбъектМакетаКомпоновкиДанных") Тогда
			Локализация.ПеревестиМакетКомпоновкиДанных(ТелоМакетаКомпоновкиДанных.КомпоновкаДанных, СтрокаОтбор, Ложь);
		КонецЕсли; 
	КонецЦикла; 
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	

КонецПроцедуры // ОтчетПриКомпоновкеРезультата

Процедура ОбновитьПредставленияСохраненныхНастроек(ПоказателиОтчета, СохраненныеПоказателиОтчета) Экспорт 
	
	Для Каждого СтрокаПоказатели Из ПоказателиОтчета Цикл
		СтрокаСохраненныеПоказатели = СохраненныеПоказателиОтчета.Найти(СтрокаПоказатели.ИмяПоказателя, "ИмяПоказателя");		
		Если СтрокаСохраненныеПоказатели <> Неопределено Тогда
			СтрокаСохраненныеПоказатели.ПредставлениеПоказателя = СтрокаПоказатели.ПредставлениеПоказателя;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры // ОбновитьПредставленияСохраненныхНастроек


// Текст функций ниже теперь перенесен в ЛокализацияПовтИсп
// Вызовы оставлены для совместимости

// Возвращает код языка интерфейса в формате ru/uk
Функция КодЯзыкаИнтерфейса() Экспорт
	Возврат ЛокализацияПовтИсп.КодЯзыкаИнтерфейса();
КонецФункции // КодЯзыкаИнтерфейса()

//По коду языка возвращает строку параметров прописи из справочника Валюты 
//(ПараметрыПрописиНаРусском или ПараметрыПрописиНаУкраинском).
Функция ПараметрыПрописи(Валюта, КодЯзыка) Экспорт
	Возврат ЛокализацияПовтИсп.ПараметрыПрописи(Валюта, КодЯзыка);
КонецФункции // ПараметрыПрописи()

// Возвращает код языка информационной базы, который указан 
// в региональных настройках (в конфигураторе)
Функция КодЯзыкаИнформационнойБазы() Экспорт
	Возврат ЛокализацияПовтИсп.КодЯзыкаИнформационнойБазы();
КонецФункции //КодЯзыкаИнформационнойБазы()

// Функция возвращает имя языка для формирования нерегламентных печатных форм
// документов и некоторых справочников с учетом установленного режима в настройках
// пользователя. По умолчанию это язык информционной базы.
//
// Параметры
//     	РежимПользователя - Установленное значение в настройках пользователя
//
// Возвращаемое значение:
//		Строка   – код языка
//
Функция ПолучитьЯзыкФормированияПечатныхФорм(РежимПользователя = Неопределено) Экспорт
    Возврат ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФорм(РежимПользователя);
КонецФункции // ПолучитьЯзыкФормированияПечатныхФорм()
	
//Преобразует код языка в формат понятный системной фунции Формат()
// Параметры
//  КодЯзыка  	 – Строка – код языка в формате uk/ru
//
// Возвращаемое значение:
//   Строка   	 – код языка в формате ru_RU/uk_UA
//
Функция ОпределитьКодЯзыкаДляФормат(КодЯзыка) Экспорт
	Возврат ЛокализацияПовтИсп.ОпределитьКодЯзыкаДляФормат(КодЯзыка);
КонецФункции // ОпределитьКодЯзыкаДляФормат()

Функция ОбработатьПереводы(ПолноеИмяОбъектаМетаданных, ИмяДляПеревода, КодЯзыка)
	Возврат ЛокализацияПовтИсп.ОбработатьПереводы(ПолноеИмяОбъектаМетаданных, ИмяДляПеревода, КодЯзыка);
КонецФункции //ОбработатьПереводы()

