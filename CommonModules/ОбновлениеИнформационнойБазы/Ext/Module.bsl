////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ДАННЫХ ИНФОРМАЦИОННОЙ БАЗЫ ПРИ СМЕНЕ ВЕРСИИ КОНФИГУРАЦИИ

// Проверить необходимость обновления информационной базы при смене версии конфигурации.
//
Функция НеобходимоОбновлениеИнформационнойБазы() Экспорт
	
	Возврат НеобходимоВыполнитьОбновление(Метаданные.Версия, ВерсияИБ(Метаданные.Имя));
	
КонецФункции

// Проверить права текущего пользователя на выполнение обновления информационной базы.
//
Функция ЕстьПраваНаОбновлениеИнформационнойБазы()
	
	Возврат ПравоДоступа("МонопольныйРежим", Метаданные) И РольДоступна("ПолныеПрава");
	
КонецФункции	

Функция ПроверитьНевозможностьОбновленияИнформационнойБазы() Экспорт
	
	Возврат НеобходимоОбновлениеИнформационнойБазы() И НЕ ЕстьПраваНаОбновлениеИнформационнойБазы();
	
КонецФункции	

// Выполнить неинтерактивное обновление данных ИБ.
//
// Результат:
//      Неопределено - обновление не выполнялось (не требуется)
//      Строка       - номер версии данных до обновления
//
Функция ВыполнитьОбновлениеИнформационнойБазы() Экспорт

	
	ВерсияМетаданных = Метаданные.Версия;
	ВерсияДанных = ВерсияИБ(Метаданные.Имя);
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		 ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	 
	Если НЕ НеобходимоВыполнитьОбновление(ВерсияМетаданных, ВерсияДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Изменился номер версии конфигурации: с ""%1"" на ""%2"". Будет выполнено обновление информационной базы.'"),
		ВерсияДанных, ВерсияМетаданных);
	ЗаписатьИнформацию(Сообщение);
	
	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ЕстьПраваНаОбновлениеИнформационнойБазы() Тогда
		Сообщение = НСтр("ru = 'Недостаточно прав для выполнения обновления. Обратитесь к системному администратору.'");
		ЗаписатьОшибку(Сообщение);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	// Установка монопольного режима для обновления информационной базы.
	Попытка
		УстановитьМонопольныйРежим(Истина);
	Исключение
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно выполнить обновление информационной базы, так как к ней подключены другие сеансы.
				 |Обратитесь к системному администратору.
				 |
				 |Подробности ошибки:
				 |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибку(Сообщение);
		
		ВызватьИсключение Сообщение;
	КонецПопытки;
	
	// Если для пользователей с полными правами применяется дата запрета изменения данных,
	// то отключим этот признак на время выполнения обновления
	ВосстановитьДатуЗапрета = ИзменитьПрименениеДатыЗапретаДляПолныхПрав(Ложь);
	
	// Если установлен запрет изменения данных до 01.04.2011
	// то отключим этот признак на время выполнения обновления
	// иначе перезаполнение некоторых данных, например регистров сведений, таких как "Индекс инфляции" и т.п.
	// может вызвать "лишние" сообщения об ошибках
	ЗапретИзмененияДанныхДо01042011 = ИзменитьПрименениеДатыЗапретаИзмененияДанныхДо01042011(Ложь);
	
	Ошибка = Ложь;
	Попытка
		СписокОбработчиковОбновления = ОбновлениеИнформационнойБазыПереопределяемый.ОбработчикиОбновления();
		
		// Также всегда вызываются процедуры обновления данных библиотеки стандартных подсистем
		//
		Обработчик = СписокОбработчиковОбновления.Добавить();
		Обработчик.Версия = "*";
		Обработчик.Процедура = "СтандартныеПодсистемыСервер.ВыполнитьОбновлениеИнформационнойБазы";
		
		ВыполненныеОбработчики = ВыполнитьИтерациюОбновления(Метаданные.Имя, Метаданные.Версия,
			СписокОбработчиковОбновления);
	Исключение
		Ошибка = Истина;
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обновление информационной базы на версию ""%1"" завершилось с ошибками: 
				|%2'"), ВерсияМетаданных, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьОшибку(Сообщение);
	КонецПопытки;
	
	// Восстановим применение даты запрета изменения данных для пользователей с полными правами
	Если ВосстановитьДатуЗапрета Тогда
		ИзменитьПрименениеДатыЗапретаДляПолныхПрав(Истина);
	КонецЕсли; 
	
	// Восстановим применение даты запрета изменения данных до 01.04.2011
	Если ЗапретИзмененияДанныхДо01042011 Тогда
		ИзменитьПрименениеДатыЗапретаИзмененияДанныхДо01042011(Истина);
	КонецЕсли; 
	
	// Отключение монопольного режима.
	УстановитьМонопольныйРежим(Ложь);
	
	Если Ошибка Тогда
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Обновление информационной базы на версию ""%1"" выполнено успешно.'"), ВерсияМетаданных);
	ЗаписатьИнформацию(Сообщение);
	
	ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновления(
		ВерсияДанных, 
		ВерсияМетаданных, 
		ВыполненныеОбработчики, 
		Истина);
		
	Возврат ВерсияДанных;

КонецФункции

// Выполнить обработчики обновления из списка ОбработчикиОбновления 
// для библиотеки ИдентификаторБиблиотеки до версии ВерсияМетаданныхИБ.
//
// Параметры
//  ИдентификаторБиблиотеки  – Строка – имя конфигурации или идентификатор библиотеки.
//  ВерсияМетаданныхИБ       – Строка – версия метаданных, до которой необходимо
//                                      выполнить обновление.
//  ОбработчикиОбновления    – Соответствие – список обработчиков обновления.
//
// Возвращаемое значение:
//   ДеревоЗначений   – выполненные обработчики обновления.
//
Функция ВыполнитьИтерациюОбновления(Знач ИдентификаторБиблиотеки, Знач ВерсияМетаданныхИБ, 
	Знач ОбработчикиОбновления) Экспорт
	
	ТекущаяВерсияИБ = ВерсияИБ(ИдентификаторБиблиотеки);
	Если ПустаяСтрока(ТекущаяВерсияИБ) Тогда
		 ТекущаяВерсияИБ = "0.0.0.0";
	КонецЕсли;
	НоваяВерсияИБ = ТекущаяВерсияИБ;
	ВерсияМетаданных = ВерсияМетаданныхИБ;
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		 ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	
	ВыполняемыеОбработчики = ОбработчикиОбновленияВИнтервале(ОбработчикиОбновления, ТекущаяВерсияИБ, ВерсияМетаданных);
	Для Каждого Версия Из ВыполняемыеОбработчики.Строки Цикл
		
		Если Версия.Версия = "*" Тогда
			Сообщение = НСтр("ru = 'Выполняются обязательные процедуры обновления информационной базы.'");
		Иначе
			НоваяВерсияИБ = Версия.Версия;
			
			Если ИдентификаторБиблиотеки = Метаданные.Имя Тогда 
				Сообщение = НСтр("ru = 'Выполняется обновление информационной базы с версии %1 на версию %2.'");
			Иначе
				Сообщение = НСтр("ru = 'Выполняется обновление информационной базы родительской конфигурации %3 с версии %1 на версию %2.'");
			КонецЕсли;
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
							 ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			
		КонецЕсли;
		
		ЗаписатьИнформацию(Сообщение);
		
		Для Каждого Обработчик Из Версия.Строки Цикл
			ОбщегоНазначения.ВыполнитьБезопасно(Обработчик.Процедура);
		КонецЦикла;
		
		Если Версия.Версия = "*" Тогда
			Сообщение = НСтр("ru = 'Выполнены обязательные процедуры обновления информационной базы.'");
		Иначе
			// Установка номера версии информационной базы
			УстановитьВерсиюИБ(ИдентификаторБиблиотеки, НоваяВерсияИБ);
			
			Если ИдентификаторБиблиотеки = Метаданные.Имя Тогда 
				Сообщение = НСтр("ru = 'Выполнено обновление информационной базы с версии %1 на версию %2.'");
			Иначе
				Сообщение = НСтр("ru = 'Выполнено обновление информационной базы родительской конфигурации %3 с версии %1 на версию %2.'");
			КонецЕсли;
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
			  ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			
			ТекущаяВерсияИБ = НоваяВерсияИБ;
			
		КонецЕсли;
		ЗаписатьИнформацию(Сообщение);
		
	КонецЦикла;
	
	// Установка номера версии информационной базы
	Если ВерсияИБ(ИдентификаторБиблиотеки) <> ВерсияМетаданныхИБ Тогда
		УстановитьВерсиюИБ(ИдентификаторБиблиотеки, ВерсияМетаданныхИБ);
	КонецЕсли;
	
	Возврат ВыполняемыеОбработчики;
	
КонецФункции

Функция НоваяТаблицаОбработчиковОбновления() Экспорт
	
	Обработчики = Новый ТаблицаЗначений;
	Обработчики.Колонки.Добавить("Версия", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Опциональный");
	Обработчики.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));
	Обработчики.Колонки.Добавить("ОбщиеДанные", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("УправлениеОбработчиками", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("ВыполнятьВГруппеОбязательных", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("МонопольныйРежим");
	Возврат Обработчики;
	
КонецФункции

// Получить версию конфигурации или родительской конфигурации (библиотеки),
// которая хранится в информационной базе.
//
// Параметры
//  ИдентификаторБиблиотеки  – Строка – имя конфигурации или идентификатор библиотеки.
//
// Возвращаемое значение:
//   Строка   – версия.
//
// Пример использования:
//   ВерсияКонфигурацииИБ = ВерсияИБ(Метаданные.Имя);
//
Функция ВерсияИБ(Знач ИдентификаторБиблиотеки) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВерсииПодсистем.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|ГДЕ
		|	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы");
	Запрос.Параметры.Вставить("ИмяПодсистемы", ИдентификаторБиблиотеки);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Результат = "";
	Если ТаблицаЗначений.Количество() > 0 Тогда
		Результат = СокрЛП(ТаблицаЗначений[0].Версия);
	КонецЕсли;
	Возврат ?(ПустаяСтрока(Результат), "0.0.0.0", Результат);
	
КонецФункции

// Возвращает Истина если запуск информационной базы
// выполняется первый раз, иначе возвращает Ложь
//
Функция ПервыйЗапуск() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ Версия ИЗ РегистрСведений.ВерсииПодсистем";
	
	Возврат Запрос.Выполнить().Пустой()
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция НеобходимоВыполнитьОбновление(Знач ВерсияМетаданных, Знач ВерсияДанных) 
	
	Возврат НЕ ПустаяСтрока(ВерсияМетаданных) И ВерсияДанных <> ВерсияМетаданных;
	
КонецФункции

Процедура УстановитьВерсиюИБ(Знач ИдентификаторБиблиотеки, Знач НомерВерсии) 
	
	НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяПодсистемы.Установить(ИдентификаторБиблиотеки);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.ИмяПодсистемы = ИдентификаторБиблиотеки;
	НоваяЗапись.Версия = НомерВерсии;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ОбработчикиОбновленияВИнтервале(Знач ВсеОбработчики, Знач ВерсияОт, Знач ВерсияДо)
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	Источник = Новый ОписаниеИсточникаДанных(ВсеОбработчики);
	Источник.Колонки.Версия.Измерение = Истина;
	ПостроительЗапроса.ИсточникДанных = Источник;
	ПостроительЗапроса.Измерения.Добавить("Версия");
	ПостроительЗапроса.Выполнить();
	ВыборкаИтоги = ПостроительЗапроса.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыполняемыеОбработчики = Новый ДеревоЗначений();
	ВыполняемыеОбработчики.Колонки.Добавить("Версия");
	ВыполняемыеОбработчики.Колонки.Добавить("Процедура");
	Пока ВыборкаИтоги.Следующий() Цикл
		
		Если ВыборкаИтоги.Версия <> "*" И 
			НЕ (СтроковыеФункцииКлиентСервер.СравнитьВерсии(ВыборкаИтоги.Версия, ВерсияОт) > 0 
				И СтроковыеФункцииКлиентСервер.СравнитьВерсии(ВыборкаИтоги.Версия, ВерсияДо) <= 0) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВерсии = Неопределено;
		Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Если Выборка.Процедура = Null Тогда
				Продолжить;
			КонецЕсли;
			Если Выборка.Опциональный = Истина И ВерсияОт = "0.0.0.0" Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаВерсии = Неопределено Тогда
				СтрокаВерсии = ВыполняемыеОбработчики.Строки.Добавить();
				СтрокаВерсии.Версия = ВыборкаИтоги.Версия;
			КонецЕсли;
			Обработчик = СтрокаВерсии.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Обработчик, Выборка, "Версия, Процедура");
		КонецЦикла;
		
	КонецЦикла;
	
	// упорядочить обработчики по возрастанию версий
	УпорядочитьСписокВерсий(ВыполняемыеОбработчики.Строки);
	
	Возврат ВыполняемыеОбработчики;
	
КонецФункции

// Сортирует коллекцию с данными о версиях по возрастанию версий
//
// Параметры:
//  СтрокиВерсий - Таблица значений или коллекция строк дерева значений.
//                 Таблица (дерево) должна содержать колонку "Версия", по возрастанию версий в которой 
//                 она будет упорядочена.
Процедура УпорядочитьСписокВерсий(СтрокиВерсий) Экспорт
	// упорядочить обработчики по возрастанию версий
	КоличествоСтрок = СтрокиВерсий.Количество();
	Для Инд1 = 2 По КоличествоСтрок Цикл
		Для Инд2 = 0 По КоличествоСтрок - Инд1 Цикл
			
			Если СтрокиВерсий[Инд2].Версия = "*" Тогда
				Результат = -1;
			ИначеЕсли СтрокиВерсий[Инд2+1].Версия = "*" Тогда
				Результат = 1;
			Иначе
				Результат = СтроковыеФункцииКлиентСервер.СравнитьВерсии(СтрокиВерсий[Инд2].Версия, СтрокиВерсий[Инд2+1].Версия);
			КонецЕсли;	
			
			Если Результат > 0  Тогда 
				СтрокиВерсий.Сдвинуть(Инд2, 1);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Для отключения и включения даты запрета редактирования
Функция ИзменитьПрименениеДатыЗапретаДляПолныхПрав(ИспользоватьДатуЗапрета)

	// Если режим не используется, то ничего не требуется делать
	Если НЕ ИспользоватьДатуЗапрета
		И НЕ Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Константы.ПрименятьДатуЗапретаДляПолныхПрав.Установить(ИспользоватьДатуЗапрета);
	ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	
	Возврат Истина;
	
КонецФункции // ИзменитьПрименениеДатыЗапретаДляПолныхПрав

// Для отключения и включения даты запрета изменения данных до 01.04.2011
Функция ИзменитьПрименениеДатыЗапретаИзмененияДанныхДо01042011(ИспользоватьДатуЗапрета)

	// Если режим не используется, то ничего не требуется делать
	Если НЕ ИспользоватьДатуЗапрета
		И НЕ Константы.ЗапретИзмененияДанныхДо01042011.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Константы.ЗапретИзмененияДанныхДо01042011.Установить(ИспользоватьДатуЗапрета);
	ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	
	Возврат Истина;
	
КонецФункции // ИзменитьПрименениеДатыЗапретаИзмененияДанныхДо01042011

// Записывает изменения в переданном объекте.
//
// Параметры:
//  Данные - объект, который необходимо записать.
//  РегистрироватьНаУзлахПлановОбмена - Булево - включает регистрацию на узлах планов обмена при записи объекта.
//  ВключитьБизнесЛогику              - Булево - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Ложь, Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОТОКОЛИРОВАНИЕ ХОДА ОБНОВЛЕНИЯ

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Обновление информационной базы'");
	
КонецФункции	

Процедура ЗаписатьИнформацию(Знач Текст)
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, Текст);
	
КонецПроцедуры

Процедура ЗаписатьОшибку(Знач Текст) 
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Текст);
	
КонецПроцедуры

// Возвращает Истина, если выполняется обновление ИБ
Функция ВыполняетсяОбновлениеИнформационнойБазы() Экспорт
	
	Возврат НеобходимоОбновлениеИнформационнойБазы() И ЕстьПраваНаОбновлениеИнформационнойБазы();
	
КонецФункции

// Возвращает текст причины блокировки, если требуется обновление ИБ и у текущего пользователя
// для этого недостаточно прав, иначе возвращает пустую строку.
//
// Параметры:
//  УчитыватьПривилегированныйРежим - Булево. Начальное значение Истина. Если указать Ложь,
//                                    то при проверке полноправности текущего пользователя
//                                    наличие привилегированного режиме не будет учитываться.
//  
//  ПриЗапускеКлиентскогоПриложения - Булево. Начальное значение Ложь. Если указать Истина,
//                                    тогда в случае, если выполнен запуск с пустым списком
//                                    пользователей, то возвращается пустая строка, вместо
//                                    сообщения о недостатке прав (когда есть недостаток), 
//                                    т.к. проверка на запуск с пустым списком пользователей
//                                    при недостатке прав проверяется позднее и отдельно,
//                                    в результате чего происходит добавление пользователя ИБ
//                                    администратор с ролями АдминистраторСистемы и ПолныеПрава.
// 
// Возвращаемое значение:
//  Строка. Если база не заблокирована, тогда пустая строка, иначе сообщение о причине блокировки.
// 
Функция ИнформационнаяБазаЗаблокированаДляОбновления(УчитыватьПривилегированныйРежим = Истина, Знач ПриЗапускеКлиентскогоПриложения = Ложь) Экспорт
	
	Сообщение = "";
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если УчитыватьПривилегированныйРежим Тогда
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные);
	Иначе
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ);
	КонецЕсли;
	
	СообщениеАдминистраторуСистемы =
		НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением версии конфигурации.
		           |Для завершения обновления конфигурации требуются административные права
		           |(роли ""Администратор системы"" и ""Полные права"").'");
	
	УстановитьПривилегированныйРежим(Истина);
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	ДоступноИспользованиеРазделенныхДанных = ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РазделениеВключено
		ИЛИ ДоступноИспользованиеРазделенныхДанных Тогда
		
		Если НеобходимоОбновлениеИнформационнойБазы()
		   И НЕ ЕстьПраваНаОбновлениеИнформационнойБазы() Тогда
			
			Если ПривилегированныйРежим()
			   И НЕ УчитыватьПривилегированныйРежим Тогда
				Возврат ""; // Возможно, использован параметр запуска UsePrivilegedMode.
			КонецЕсли;
			
			Если ЕстьПравоАдминистрирование Тогда
				Сообщение = СообщениеАдминистраторуСистемы;
			Иначе
				// Сообщение пользователю локального режима.
				Сообщение =
					НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением версии конфигурации.
					           |Обратитесь к администратору за подробностями.'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

// Получает сведения об обновлении информационной базы.
//
Функция СведенияОбОбновленииИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат НовыеСведенияОбОбновлении(Истина);
	КонецЕсли;
	
	Возврат Константы.СведенияОбОбновленииИБ.Получить().Получить();
	
КонецФункции

// Только для внутреннего использования
//
Функция НовыеСведенияОбОбновлении(НачальноеЗаполнениеДанных)
	
	СведенияОбОбновлении = Новый Структура;
	
	Если Не ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ПроверкаЛегальностиПолученияОбновления")
		Или СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		ЛегальностьПолученияОбновленияПодтверждена = Истина;
	Иначе
		ЛегальностьПолученияОбновленияПодтверждена = НачальноеЗаполнениеДанных;
	КонецЕсли;
	
	СведенияОбОбновлении.Вставить("ВремяНачалаОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончанияОбновления");
	СведенияОбОбновлении.Вставить("ПродолжительностьОбновления");
	СведенияОбОбновлении.Вставить("ВремяНачалаОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончаниеОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("НомерСеанса");
	СведенияОбОбновлении.Вставить("ОтложенноеОбновлениеЗавершеноУспешно");
	СведенияОбОбновлении.Вставить("ЛегальностьПолученияОбновленияПодтверждена", ЛегальностьПолученияОбновленияПодтверждена);
	СведенияОбОбновлении.Вставить("ДеревоОбработчиков");
	
	Возврат СведенияОбОбновлении;
	
КонецФункции

// Проверить необходимость обновления неразделенных данных информационной базы
// при смене версии конфигурации.
//
Функция НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истина если запуск информационной базы 
// выполняется первый раз, иначе возвращает Ложь.
//
Функция ПервыйЗапускИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|
	|ВЫБРАТЬ
	|	1
	|ИЗ
	|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем";
	Результат = Запрос.Выполнить().Пустой();
		
	Возврат Результат;
		
КонецФункции

Процедура СнятьБлокировкуФайловойБазы() Экспорт
	
КонецПроцедуры

// Объявляет события подсистемы ОбновлениеВерсииИБ:
//
// Серверные события:
//   ПриДобавленииОбработчиковОбновления,
//   ПередОбновлениемИнформационнойБазы,
//   ПослеОбновленияИнформационнойБазы.
//
// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
	//
	// Параметры:
	//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
	//                                  общего модуля ОбновлениеИнформационнойБазы.
	//
	// Синтаксис:
	// Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	//
	// Для использования в других библиотеках.
	//
	// (Аналог функции ОбновлениеИнформационнойБазыПереопределяемый.ОбработчикиОбновления).
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления");
	
	// Вызывается перед обработчиками обновления данных ИБ.
	//
	// Синтаксис:
	// Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	//
	// (То же, что ОбновлениеИнформационнойБазыПереопределяемый.ПередОбновлениемИнформационнойБазы).
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПередОбновлениемИнформационнойБазы");
	
	// Вызывается после завершения монопольного обновления версии ИБ
	// 
	// Параметры:
	//   ПредыдущаяВерсия       - Строка - версия подсистемы до обновления. "0.0.0.0" для "пустой" ИБ.
	//   ТекущаяВерсия          - Строка - версия подсистемы после обновления.
	//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления
	//                                             подсистемы, сгруппированных по номеру версии.
	//                            Процедура обхода выполненных обработчиков:
	//
	//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
	//		
	//		Если Версия.Версия = "*" Тогда
	//			// Обработчик, который может выполнятся при каждой смене версии.
	//		Иначе
	//			// Обработчик, который выполняется для определенной версии.
	//		КонецЕсли;
	//		
	//		Для Каждого Обработчик Из Версия.Строки Цикл
	//			...
	//		КонецЦикла;
	//		
	//	КонецЦикла;
	//
	//   ВыводитьОписаниеОбновлений - Булево (возвращаемое значение)- если установить Истина,
	//                                тогда выводить форму с описанием обновлений.
	//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
	//                                Истина - обновление выполнялось в монопольном режиме.
	//
	// Синтаксис:
	// Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
	// 		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	//
	// (То же, что ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы).
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПослеОбновленияИнформационнойБазы");
	
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриНачалеРаботыСистемы"].Добавить(
		"ОбновлениеИнформационнойБазыКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхПодчиненному"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхГлавному"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбязательныхОбъектовПланаОбмена"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовНачальногоОбразаПланаОбмена"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентаПриЗапуске"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииОбработчиковУстановкиПараметровСеанса"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		СерверныеОбработчики[
			"СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий\ПриПолученииСпискаШаблонов"].Добавить(
				"ОбновлениеИнформационнойБазы");
	КонецЕсли;
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовИсключенийПланаОбмена"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
КонецПроцедуры

// Для перехода на механизм БСП

Процедура ОтказатьсяОтКонстантыНомерВерсииКонфигурации() Экспорт
	
	
	ВерсияКонфигурации      = Константы.УдалитьНомерВерсииКонфигурации.Получить();
	
	Если НЕ ЗначениеЗаполнено(ВерсияКонфигурации) Тогда
		// Это 
		//  - либо новая база
		//  - либо уже отказались от константы
		// В обоих случаях ничего делать не надо - 
		// достаточно данных регистра сведений ВерсииПодсистем
		Возврат;
	КонецЕсли;
	
	Если НЕ ЕстьПраваНаОбновлениеИнформационнойБазы() Тогда
		// Этот пользователь не сможет записать изменения в константе и регистре сведений.
		// 
		Возврат;
	КонецЕсли;
	
	// Заполним данные о конфигурации в регистре ВерсииПодсистем
	УстановитьВерсиюИБ(Метаданные.Имя, ВерсияКонфигурации);
	
	// Заполним данные о библиотеках в регистре ВерсииПодсистем
	СоответствиеВерсийБиблиотек = БиблиотекаОбновленияИнформационнойБазыПереопределяемый.СоответствиеВерсийБиблиотек();
	Для Каждого Библиотека Из СоответствиеВерсийБиблиотек Цикл
		
		ИмяБиблиотеки        = Библиотека.Ключ;
		ОбновленияБиблиотеки = Библиотека.Значение;
		
		// Определим номер версии библиотеки, который сейчас в ИБ
		ВерсияБиблиотеки = "0.0.0.0";
		Для Каждого ОбновлениеБиблиотеки Из ОбновленияБиблиотеки Цикл
			// Номер версии конфигурации, который соответствует версии библиотеки
			ВерсияОбновленияБиблиотеки   = ОбновлениеБиблиотеки.Ключ;
			ВерсияОбновленияКонфигурации = ОбновлениеБиблиотеки.Значение;
			Если СтроковыеФункцииКлиентСервер.СравнитьВерсии(ВерсияОбновленияКонфигурации, ВерсияКонфигурации) <= 0 Тогда
				// Это обновление библиотеки присутствует в ИБ
				Если СтроковыеФункцииКлиентСервер.СравнитьВерсии(ВерсияОбновленияБиблиотеки, ВерсияБиблиотеки) > 0 Тогда
					// Эта версия библиотеки ближе, чем та, что нашли раньше
					ВерсияБиблиотеки = ВерсияОбновленияБиблиотеки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Запишем версию этой библиотеки
		УстановитьВерсиюИБ(ИмяБиблиотеки, ВерсияБиблиотеки);
		
	КонецЦикла;
	
	// Больше значение константы не понадобится.
	Константы.УдалитьНомерВерсииКонфигурации.Установить("");
	
КонецПроцедуры // ОтказатьсяОтКонстантыНомерВерсииКонфигурации

