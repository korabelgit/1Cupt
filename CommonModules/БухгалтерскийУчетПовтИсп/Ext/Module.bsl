
Функция ОпределитьСтатьюЗатратСхемыРеализации(Субконто1, Субконто2, Субконто3) Экспорт
	
	Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		Возврат Субконто1;
	КонецЕсли;	
	
	Если ТипЗнч(Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		Возврат Субконто2;
	КонецЕсли;	
	
	Если ТипЗнч(Субконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		Возврат Субконто3;
	КонецЕсли;	
	
КонецФункции // ОпределитьСтатьюЗатратСхемыРеализации()
 
Функция ВыбиратьВалютнуюСуммуПланаСчетов(ВидПланаСчетов) Экспорт 
	Возврат (Не Метаданные.РегистрыБухгалтерии[ВидПланаСчетов].Ресурсы.Найти("ВалютнаяСумма") = Неопределено);
КонецФункции // ВыбиратьВалютнуюСуммуПланаСчетов()

Функция ОтборПоОрганизацииПланаСчетов(ВидПланаСчетов) Экспорт 
	Возврат (Не Метаданные.РегистрыБухгалтерии[ВидПланаСчетов].Измерения.Найти("Организация")= Неопределено);
КонецФункции // ОтборПоОрганизацииПланаСчетов()

// Функция возвращает признак "Только обороты" для указанного вида субконто на счете.
// Возвращает значение "Истина", если на счете для субконто установлен признак "Только обороты".
//
Функция ПроверитьСубконтоНаОборотное(Счет, ИмяСубконто) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидыСубконтоСчета = Счет.ВидыСубконто;

	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда
		Если ИмяСубконто > ВидыСубконтоСчета.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		ВидСубк = ВидыСубконтоСчета[ИмяСубконто - 1].ВидСубконто;
	Иначе
		Если ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Международный") Тогда
			ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоМеждународные[ИмяСубконто];
		Иначе
			ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто];
		КонецЕсли;
	КонецЕсли;
	
	ВидыСубконтоСтрока = ВидыСубконтоСчета.Найти(ВидСубк);
	
	Если ВидыСубконтоСтрока = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ВидыСубконтоСтрока.ТолькоОбороты;
	КонецЕсли;
	
КонецФункции // ПроверитьСубконтоНаОборотное()

// Функция предназначена для определения названия объекта
// учета по его счету учета. Название объекта выдается в родительном падеже
Функция ПолучитьНазваниеОбъекта(СчетУчета) Экспорт
	
	Если Лев(СчетУчета.Код, 1) = "0" Тогда
		СчетУчетаКод = СокрЛП(Лев(СчетУчета.Код, 3));
		Если Лев(СчетУчетаКод, 2) = "01" ИЛИ Лев(СчетУчетаКод, 2) = "08" Тогда
			СчетУчетаКод = Лев(СчетУчетаКод, 2);
		КонецЕсли;
	Иначе
		СчетУчетаКод = Лев(СчетУчета.Код, 2);
	КонецЕсли; 
	
	Если СчетУчетаКод = "20" Тогда	
	
		Возврат "материалов";	

	ИначеЕсли СчетУчетаКод = "23" Тогда	
			Возврат "продукции для давальца";
		
	ИначеЕсли СчетУчетаКод = "25" Тогда
		
			Возврат "полуфабрикатов";
			
	ИначеЕсли СчетУчетаКод = "28" Тогда		
		
		Если Лев(СчетУчета.Код, 3) = "284" Тогда
			Возврат "возвратной тары";
		Иначе	
			Возврат "товаров";
		КонецЕсли;	
			
	ИначеЕсли СчетУчетаКод = "26" Тогда
		
			Возврат "продукции";
			
		
	ИначеЕсли СчетУчетаКод = "01" Тогда
		
			Возврат "арендованных основных средств";
		
	ИначеЕсли СчетУчетаКод = "023" Тогда
		
			Возврат "товаров на ответственное хранение";
			
	ИначеЕсли СчетУчетаКод = "022" Тогда
		
			Возврат "материалов в переработку";
			
	ИначеЕсли СчетУчетаКод = "024" Тогда
		
			Возврат "товаров комитента";
			
	ИначеЕсли СчетУчетаКод = "021" Тогда
		
			Возврат "оборудования для монтажа";
			
	ИначеЕсли СчетУчетаКод = "08" Тогда
		
			Возврат "БСУ";
	
			
	Иначе
			Возврат "";
			
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьИспользуемыеКлассыСчетовРасходов(Дата, Организация) Экспорт
	
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(Дата, Новый Структура("Организация", Организация));
	
	Если ПараметрыУчетнойПолитики.Количество() = 0 тогда
		Возврат Перечисления.КлассыСчетовРасходов.ПустаяСсылка();
	Иначе
		Возврат ПараметрыУчетнойПолитики[0].ИспользуемыеКлассыСчетовРасходов;
	КонецЕсли;
	
КонецФункции

Функция РеквизитыСчета(Счет) Экспорт
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		РеквизитыСчета = Новый Структура("Количественный, Валютный, Забалансовый, НалоговыйУчет, УчетПоНалоговымНазначениямНДС, УчетСуммНУ", 
		                                  Ложь, Ложь, Ложь, Ложь, Ложь, Ложь); 
	Иначе
		РеквизитыСчета = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Счет, "Количественный, Валютный, Забалансовый, НалоговыйУчет, УчетПоНалоговымНазначениямНДС, УчетСуммНУ");
	КонецЕсли;	
	
	Возврат РеквизитыСчета;

КонецФункции // РеквизитыСчета()

//Возвращает признак "Количественный" переданного счета учета
Функция КоличественныйСчет(Счет) Экспорт
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат Ложь;
	КонецЕсли; 
	Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Счет, "Количественный");
	
КонецФункции // КоличественныйСчет

//Возвращает признак "Валютный" переданного счета учета
Функция ВалютныйСчет(Счет) Экспорт
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат Ложь;
	КонецЕсли; 
	Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Счет, "Валютный");
	
КонецФункции // ВалютныйСчет

//Возвращает признак "Забалансовый" переданного счета учета
Функция ЗабалансовыйСчет(Счет) Экспорт
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат Ложь;
	КонецЕсли; 
	Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Счет, "Забалансовый");
	
КонецФункции // ЗабалансовыйСчет

//Возвращает признак "НалоговыйУчет" переданного счета учета
Функция НалоговыйУчетСчет(Счет) Экспорт
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат Ложь;
	КонецЕсли; 
	Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Счет, "НалоговыйУчет");
	
КонецФункции // НалоговыйУчетСчет

Функция УчетПоНалоговымНазначениямНДССчет(Счет) Экспорт
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат Ложь;
	КонецЕсли; 
	Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Счет, "УчетПоНалоговымНазначениямНДС");
	
КонецФункции // УчетПоНалоговымНазначениямНДССчет

Функция УчетСуммНУСчет(Счет) Экспорт
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат Ложь;
	КонецЕсли; 
	Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Счет, "УчетСуммНУ");
	
КонецФункции // УчетПоНалоговымНазначениямНДССчет

 
Функция ОпределитьИзменятьДелитьПроводку(СчетДт, СчетКт, ИспользуемыеКлассыСчетовРасходов) Экспорт

	Если    // Счет дебета не указан
		    СчетДт.Пустая()
			// Счет кредита не указан
		ИЛИ СчетКт.Пустая()
		    // Списание на затраты будущих периодов
		ИЛИ СчетДт = ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов
		ИЛИ СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов)
			// Себестоимость реализации 
		ИЛИ СчетДт = ПланыСчетов.Хозрасчетный.СебестоимостьРеализации
		ИЛИ СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СебестоимостьРеализации)
		ИЛИ СчетДт = ПланыСчетов.Хозрасчетный.СебестоимостьРеализованныхПроизводственныхЗапасов
		ИЛИ СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СебестоимостьРеализованныхПроизводственныхЗапасов)
			// Списание полуфабриката на затраты
		ИЛИ СчетКт = ПланыСчетов.Хозрасчетный.Полуфабрикаты
		ИЛИ СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Полуфабрикаты)
		    // Списание продукции на затраты
		ИЛИ СчетКт = ПланыСчетов.Хозрасчетный.ГотоваяПродукция
		ИЛИ СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ГотоваяПродукция)       
		    // Списание продукции с/х производства на затраты
		ИЛИ СчетКт = ПланыСчетов.Хозрасчетный.ПродукцияСельскохозяйственногоПроизводства
		ИЛИ СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПродукцияСельскохозяйственногоПроизводства)       
		    // Списание затрат из производства в производство или на брак (перераспределение затрат)
		ИЛИ СчетКт = ПланыСчетов.Хозрасчетный.Производство
		ИЛИ СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Производство) 
		    // Списание затрат на брак в производство или на брак (перераспределение затрат)
		ИЛИ СчетКт = ПланыСчетов.Хозрасчетный.БракВПроизводстве
		ИЛИ СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.БракВПроизводстве) 
		    // Списание со счета 8 класса
		ИЛИ СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ЗатратыПоЭлементам)
		    // Списание со счета 9 класса
		ИЛИ СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ЗатратыДеятельности) Тогда
		
		ИзменятьПроводку = Ложь;
		ДелитьПроводку   = Ложь;
		
	Иначе	
		
		ИзменятьПроводку = Ложь;
		ДелитьПроводку   = Ложь;
		
		Если  СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ЗатратыДеятельности)
			И     (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9
			  ИЛИ  ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8)  Тогда
			// Списание на счета 9 класса
			ИзменятьПроводку = Истина;
			ДелитьПроводку   = (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9);
		КонецЕсли;
		
		Если      (СчетДт = ПланыСчетов.Хозрасчетный.Производство
			  ИЛИ  СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Производство)
			  ИЛИ  СчетДт = ПланыСчетов.Хозрасчетный.БракВПроизводстве
			  ИЛИ  СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.БракВПроизводстве))
			И     (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9
			  ИЛИ  ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8)  Тогда
			// Списание на счета 23 или 24 и используется 8 класс или 8 и 9 классы одновременно
			ИзменятьПроводку = Истина;
			ДелитьПроводку   = Истина;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Результат = Новый Структура("ИзменятьПроводку, ДелитьПроводку", ИзменятьПроводку, ДелитьПроводку);
	
	Возврат Результат;
	
КонецФункции // ОпределитьИзменятьДелитьПроводку

Функция ЕстьСчет8Класса(Счет8Класса, ИспользуемыеКлассыСчетовРасходов) Экспорт
	
	Если    Счет8Класса.Пустая()
		ИЛИ   Счет8Класса = ПланыСчетов.Хозрасчетный.ДругиеЗатратыПоЭлементам
		ИЛИ   Счет8Класса.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДругиеЗатратыПоЭлементам)
		    И ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9 Тогда
		// Счет неопределен, или это 85 счет и используются 8 и 9 классы одновременно
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ЕстьСчет8Класса

// Проверяет используются ли счета-классы в качестве групп и возвращает признак использования (булево)
Функция ПолучитьИспользоватьКлассыСчетовВКачествеГрупп() Экспорт
	
	// в УПП для Украины на данный момент всегда используются 
	Возврат Истина;
	
	ЗапросКлассыСчетов = Новый Запрос;
	ЗапросКлассыСчетов.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                           |	Хозрасчетный.Ссылка
	                           |ИЗ
	                           |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	                           |ГДЕ
	                           |	Хозрасчетный.Родитель = &Родитель";
							   
	ЗапросКлассыСчетов.УстановитьПараметр("Родитель", ПланыСчетов.Хозрасчетный.НеоборотныеАктивы);
	Возврат ЗапросКлассыСчетов.Выполнить().Выбрать().Количество() > 0;
	
КонецФункции // ПолучитьИспользоватьКлассыСчетовВКачествеГрупп

// Проверяет, принадлежит ли счет счету-родителю
//
// Параметры
//  Счет  		 	- ПланСчетов.Ссылка
//  				  Проверяемый счет
//
//  СчетРодитель 	- ПланСчетов.Ссылка 
//                 	  Счет-родитель 
//
// Возвращаемое значение:
//   Булево	 		- Истина, если принадлежит
//
Функция СчетПринадлежитРодителю(Счет, СчетРодитель) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Результат = Ложь;
	Если Счет = СчетРодитель ИЛИ Счет.ПринадлежитЭлементу(СчетРодитель) Тогда
		Результат = Истина;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // СчетПринадлежитРодителю

Функция СчетаВИерархии(СчетГруппа) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетГруппа) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа", СчетГруппа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетГруппа)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции // СчетаВИерархии

Функция СчетЗатратБудущихПериодов(Знач Счет) Экспорт
	Возврат БухгалтерскийУчетПовтИсп.СчетПринадлежитРодителю(Счет, ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов);
КонецФункции // СчетЗатратБудущихПериодов()

 

