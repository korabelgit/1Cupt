
Функция ПолучитьСтруктруУчетнойПолитикиДляПроведенияПоПартиям(Упр = Истина, Бух = Истина, Меж = Истина) Экспорт
	
	СтруктраУчетнойПолитики = Новый Структура();
	
	Если Упр Тогда
		СтруктраУчетнойПолитики.Вставить("Упр",Новый Структура());
		
		//Параметры необходимые для универсального проведения по партиям (совпадают для всех учетов)
		СтруктраУчетнойПолитики.Упр.Вставить("СпособОценкиМПЗ","УчетнаяПолитика.СпособОценкиМПЗ");
		СтруктраУчетнойПолитики.Упр.Вставить("СписыватьПартииПриПроведенииДокументов","Константы.СписыватьПартииПриПроведенииДокументов");
		СтруктраУчетнойПолитики.Упр.Вставить("ВестиПартионныйУчетПоСкладам","Константы.ВестиПартионныйУчетПоСкладам");
		СтруктраУчетнойПолитики.Упр.Вставить("СтратегияСписанияПоСтатусам","Константы.СтратегияСписанияПартийТоваровПоСтатусам");
		СтруктраУчетнойПолитики.Упр.Вставить("УчетЗатратПоЗаказамНаПроизводство","УчетнаяПолитика.УчетЗатратПоЗаказамНаПроизводство");
		
		//Параметры специфичные для упр. учета
		СтруктраУчетнойПолитики.Упр.Вставить("СпособВеденияПартионногоУчетаПоОрганизации","НастройкаСпособовВеденияУправленческогоПартионногоУчета.СпособВеденияПартионногоУчетаПоОрганизации");
		СтруктраУчетнойПолитики.Упр.Вставить("НеВключатьНДСВСтоимостьПартий","УчетнаяПолитика.НеВключатьНДСВСтоимостьПартий");
	КонецЕсли;
	
	Если Бух Тогда
		//Для Бух учета
		СтруктраУчетнойПолитики.Вставить("Бух",Новый Структура());
		
		//Параметры необходимые для универсального проведения по партиям (совпадают для всех учетов)
		СтруктраУчетнойПолитики.Бух.Вставить("СпособОценкиМПЗ",							"УчетнаяПолитикаОрганизаций.СпособОценкиМПЗ");
		СтруктраУчетнойПолитики.Бух.Вставить("СписыватьПартииПриПроведенииДокументов",	"Константы.СписыватьПартииПриПроведенииДокументовБух");
		СтруктраУчетнойПолитики.Бух.Вставить("ВестиПартионныйУчетПоСкладам",			"Константы.ВестиПартионныйУчетПоСкладамРегл");         
		СтруктраУчетнойПолитики.Бух.Вставить("СтратегияСписанияПоСтатусам",				"Константы.СтратегияСписанияПартийТоваровПоСтатусам");
		СтруктраУчетнойПолитики.Бух.Вставить("УчетЗатратПоЗаказамНаПроизводство",		"УчетнаяПолитикаОрганизаций.УчетЗатратПоЗаказамНаПроизводство");
		
		//Параметры специфичные для нал. учета
		СтруктраУчетнойПолитики.Бух.Вставить("ЕстьНалогНаПрибыль","УчетнаяПолитикаОрганизаций.СхемаНалогообложения.НалогНаПрибыль");
		СтруктраУчетнойПолитики.Бух.Вставить("ЕстьНДС","УчетнаяПолитикаОрганизаций.СхемаНалогообложения.НДС");
	
	КонецЕсли;
		
	Если Меж Тогда
		СтруктраУчетнойПолитики.Вставить("Меж",Новый Структура());
		
		//Параметры необходимые для универсального проведения по партиям (совпадают для всех учетов)
		СтруктраУчетнойПолитики.Меж.Вставить("СпособОценкиМПЗ","УчетнаяПолитикаОрганизаций.СпособОценкиМПЗ");
		СтруктраУчетнойПолитики.Меж.Вставить("ВестиПартионныйУчетПоСкладам","Константы.ВестиПартионныйУчетПоСкладамРегл");
		СтруктраУчетнойПолитики.Меж.Вставить("СтратегияСписанияПоСтатусам","Константы.СтратегияСписанияПартийТоваровПоСтатусам");
		СтруктраУчетнойПолитики.Меж.Вставить("УчетЗатратПоЗаказамНаПроизводство","УчетнаяПолитикаОрганизаций.УчетЗатратПоЗаказамНаПроизводство");
	КонецЕсли;
	
	Возврат СтруктраУчетнойПолитики;
	
КонецФункции // ПолучитьСтруктруУчетнойПолитикиДляПроведенияПоПартиям

// Возвращает таблицу значений с данными учетной политики для всех организаций
// Данные берутся на заданный момент времени 
//
// Параметры:
//	Момент времени, дата
//
// Возвращаемое значение: 
//	Таблица значений
//
Функция ПолучитьУчетнуюПолитику(ДатаСреза, Упр = Истина, Бух = Истина, Меж = Истина, Организация = Неопределено) Экспорт
	
	Если НЕ (Упр ИЛИ Бух ИЛИ Меж) Тогда	
		Возврат Новый Структура();
	КонецЕсли;	
	
	СтруктраУчетнойПолитики = УправлениеЗапасамиПартионныйУчетПовтИсп.ПолучитьСтруктруУчетнойПолитикиДляПроведенияПоПартиям(Упр, Бух, Меж);
	
	ТекстЗапроса = "ВЫБРАТЬ";
	ТекстСписокТаблиц = "
	|ИЗ";
	Для Каждого ВидУчета Из СтруктраУчетнойПолитики Цикл
		Для Каждого ПараметрУчетнойПолитики Из СтруктраУчетнойПолитики[ВидУчета.Ключ] Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	" + ПараметрУчетнойПолитики.Значение + " КАК " + ПараметрУчетнойПолитики.Ключ + "_" + ВидУчета.Ключ + ",";
			
			ИмяТаблицы = Лев(ПараметрУчетнойПолитики.Значение,Найти(ПараметрУчетнойПолитики.Значение,".")-1);
			
			Если Найти(ТекстСписокТаблиц,"КАК " + ИмяТаблицы) = 0 Тогда
				//Такой таблицы еще нет
				Если ИмяТаблицы = "Константы" Тогда
					ТекстСписокТаблиц = ТекстСписокТаблиц + "
					|	Константы КАК Константы,";
				ИначеЕсли ИмяТаблицы = "УчетнаяПолитика" Тогда
					ТекстСписокТаблиц = ТекстСписокТаблиц + "
					|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаСреза,) КАК УчетнаяПолитика,";	
				ИначеЕсли ИмяТаблицы = "УчетнаяПолитикаОрганизаций" Тогда
					ТекстСписокТаблиц = ТекстСписокТаблиц + "
					|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&ДатаСреза,Организация = &Организация) КАК УчетнаяПолитикаОрганизаций,";	
				ИначеЕсли ИмяТаблицы = "НастройкаСпособовВеденияУправленческогоПартионногоУчета" Тогда
					Если ЗначениеЗаполнено(Организация) Тогда
						//Если способ ведения управленческого партионного учета не задан, то используется способ "ПоКомпанииВЦелом"
						ТекстСписокТаблиц = ТекстСписокТаблиц + "
						|(ВЫБРАТЬ ПЕРВЫЕ 1
						|	НастройкаСпособовВеденияУправленческогоПартионногоУчета.Организация,
						|	НастройкаСпособовВеденияУправленческогоПартионногоУчета.СпособВеденияПартионногоУчетаПоОрганизации
						|ИЗ (
						|ВЫБРАТЬ
						|	НастройкаСпособовВеденияУправленческогоПартионногоУчета.Организация,
						|	НастройкаСпособовВеденияУправленческогоПартионногоУчета.СпособВеденияПартионногоУчетаПоОрганизации
						|ИЗ
						|	РегистрСведений.НастройкаСпособовВеденияУправленческогоПартионногоУчета.СрезПоследних(&ДатаСреза,Организация = &Организация) КАК НастройкаСпособовВеденияУправленческогоПартионногоУчета
						|ОБЪЕДИНИТЬ ВСЕ
						|ВЫБРАТЬ
						|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
						|	ЗНАЧЕНИЕ(Перечисление.СпособыВеденияПартионногоУчетаПоОрганизациям.ПоКомпанииВЦелом)) КАК НастройкаСпособовВеденияУправленческогоПартионногоУчета
						|УПОРЯДОЧИТЬ ПО Организация УБЫВ) КАК НастройкаСпособовВеденияУправленческогоПартионногоУчета,";	
					Иначе
						//Если организация не заполнена, то считаем что учет ведется по компании в целом
						ТекстСписокТаблиц = ТекстСписокТаблиц + "
						|	(ВЫБРАТЬ ЗНАЧЕНИЕ(Перечисление.СпособыВеденияПартионногоУчетаПоОрганизациям.ПоКомпанииВЦелом) КАК СпособВеденияПартионногоУчетаПоОрганизации) КАК НастройкаСпособовВеденияУправленческогоПартионногоУчета,";	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;		
		КонецЦикла;
	КонецЦИкла;
	
	//Удалим последнюю запятую
	ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);
	ТекстСписокТаблиц = Лев(ТекстСписокТаблиц,СтрДлина(ТекстСписокТаблиц)-1);
	
	Запрос = Новый Запрос(ТекстЗапроса + ТекстСписокТаблиц); 
	Запрос.УстановитьПараметр("Организация",Организация);
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура();
	Для Каждого ВидУчета Из СтруктраУчетнойПолитики Цикл
		Результат.Вставить(ВидУчета.Ключ, Новый Структура());
		Для Каждого ПараметрУчетнойПолитики Из СтруктраУчетнойПолитики[ВидУчета.Ключ] Цикл
			Результат[ВидУчета.Ключ].Вставить(ПараметрУчетнойПолитики.Ключ, Выборка[ПараметрУчетнойПолитики.Ключ + "_" + ВидУчета.Ключ]);
		КонецЦикла;	
	КонецЦикла;		
	
	Если Бух Тогда
		Результат.Бух.Вставить("ЕстьНалогНаПрибыльДо2015", Результат.Бух.ЕстьНалогНаПрибыль И (ДатаСреза <  глЗначениеПеременной("ДатаНКУ2015")));
		Результат.Бух.Вставить("ЕстьНалогНаПрибыльС2015" , Результат.Бух.ЕстьНалогНаПрибыль И (ДатаСреза >= глЗначениеПеременной("ДатаНКУ2015")));
	КонецЕсли;	
	
	
	Возврат Результат;
	
КонецФункции // ПолучитьУчетнуюПолитику()

Функция КомиссионныйТовар(СчетУчета) Экспорт

	Комиссионный = Ложь;
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
	     Возврат Ложь;
	КонецЕсли; 
	
	Если ТипЗнч(СчетУчета) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Комиссионный = СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссиюВсего);
		
	ИначеЕсли ТипЗнч(СчетУчета) = Тип("ПланСчетовСсылка.Налоговый") Тогда
		Комиссионный = Ложь;

	КонецЕсли; 
	
	Возврат Комиссионный;

КонецФункции // КомиссионныйТовар()

// Преобразует код операции в направление списания
//
// Параметры:
//	КодОперации   - код операции по регистру партий
//	СтатьяЗатрат  - статья затрат, определяющая направление списания в производство.
//
// Возвращаемое значение:
//	Направление списания.
//
Функция ПолучитьНаправлениеСписанияПоКодуОперации(КодОперации, СтатьяЗатрат = Неопределено, СчетЗатрат = Неопределено) Экспорт	
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	Если КодОперации=КодыОпераций.Реализация 
		ИЛИ КодОперации=КодыОпераций.РеализацияКомиссия
		ИЛИ КодОперации=КодыОпераций.РеализацияРозница
		ИЛИ КодОперации=КодыОпераций.ВозвратОтПокупателя 
		ИЛИ КодОперации=КодыОпераций.ВозвратОтПокупателяТекущийМесяц Тогда
		
		НаправлениеСписания = "СебестоимостьПродаж";
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеПартийВПроизводствоОперативно Тогда
		
		НаправлениеСписания = "ПроизводственныеРасходы";
		
	ИначеЕсли КодОперации=КодыОпераций.ПередачаВПереработку
		ИЛИ КодОперации=КодыОпераций.ПередачаНаКомиссию Тогда
		
		НаправлениеСписания = "Переданные";
		
	ИначеЕсли КодОперации = КодыОпераций.ПеремещениеМеждуСкладами
		ИЛИ КодОперации   = КодыОпераций.КорректировкаСерийИХарактеристик
		ИЛИ КодОперации   = КодыОпераций.КорректировкаКачества
		ИЛИ КодОперации   = КодыОпераций.РезервированиеПодЗаказ
		ИЛИ КодОперации   = КодыОпераций.СнятиеРезерваПодЗаказ
		ИЛИ КодОперации   = КодыОпераций.ПереоценкаПринятыхНаКомиссию
		ИЛИ КодОперации   = КодыОпераций.ВозвратОтПереработчика 
		ИЛИ КодОперации   = КодыОпераций.ВозвратОтКомиссионера
		ИЛИ КодОперации   = КодыОпераций.Комплектация 
		ИЛИ КодОперации   = КодыОпераций.ИзменениеНалоговогоНазначенияЗапасов
		
		Тогда
		
		НаправлениеСписания = "НаСкладах";
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаВложенияВоВнеоборотныеАктивы
		ИЛИ КодОперации=КодыОпераций.ПередачаОборудованияВМонтаж Тогда
		
		НаправлениеСписания = "ВложенияВоВнеоборотныеАктивы";
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаЗатраты 
	   ИЛИ КодОперации=КодыОпераций.СписаниеПартийПереданныхВПроизводство
	   ИЛИ КодОперации=КодыОпераций.ПереоценкаКупленных
	   			Тогда
		
		Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			
			ХарактерЗатрат = СтатьяЗатрат.ХарактерЗатрат;
			
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
	
				НаправлениеСписания = "АдминистративныеРасходы";
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
				
				НаправлениеСписания = "ВложенияВоВнеоборотныеАктивы";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
				
				НаправлениеСписания = "ОбщепроизводственныеРасходы";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				
				НаправлениеСписания = "ПроизводственныеРасходы";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт Тогда
				
				НаправлениеСписания = "РасходыНаСбыт";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы Тогда
				
				НаправлениеСписания = "ПрочиеОперационныеРасходы";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы Тогда
			
				НаправлениеСписания = "ТранспортноЗаготовительныеРасходы";
				
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
				
				НаправлениеСписания = "Затраты";
				
			Иначе
				
				НаправлениеСписания = "";
				
			КонецЕсли;
		Иначе
			
			НаправлениеСписания = "";
			
		КонецЕсли;
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаСтроительствоОбъектовОС
	   ИЛИ КодОперации=КодыОпераций.ПринятиеКУчетуОС Тогда
		
		НаправлениеСписания = "СтоимостьОСПриПринятииКУчету";
		
	ИначеЕсли КодОперации=КодыОпераций.ПринятиеКУчетуОССоСписаниемНаЗатраты Тогда
	
		НаправлениеСписания = "ЗатратыПриПринятииКУчету";
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаБрак Тогда
		
		НаправлениеСписания = "БракВПроизводстве";
		
	ИначеЕсли КодОперации=КодыОпераций.ПередачаМатериаловВЭксплуатацию Тогда
		
		НаправлениеСписания = "ПартииМатериаловВЭксплуатации";
		
	Иначе 
		
		НаправлениеСписания = "";
		
	КонецЕсли;
	
	// Для регламентированного учета направление списания определяется 
	// по счету затрат если он задан
	Если (ЗначениеЗаполнено(СчетЗатрат)) 
	  И ((КодОперации = КодыОпераций.СписаниеПартийВПроизводствоОперативно)
	    ИЛИ (КодОперации = КодыОпераций.СписаниеНаБрак) 
		ИЛИ (КодОперации = КодыОпераций.СписаниеНаВложенияВоВнеоборотныеАктивы)
		ИЛИ (КодОперации = КодыОпераций.СписаниеНаЗатраты)
		ИЛИ (КодОперации = КодыОпераций.СписаниеПартийПереданныхВПроизводство)) Тогда
		
		ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, СтатьяЗатрат);
		
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
	
			НаправлениеСписания = "АдминистративныеРасходы";
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
				
			НаправлениеСписания = "ОбщепроизводственныеРасходы";
			
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт Тогда
				
				НаправлениеСписания = "РасходыНаСбыт";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы Тогда
			
				НаправлениеСписания = "ТранспортноЗаготовительныеРасходы";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы Тогда
				
				НаправлениеСписания = "ПрочиеОперационныеРасходы";
				
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
				
			НаправлениеСписания = "БракВПроизводстве";
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
				
			НаправлениеСписания = "ВложенияВоВнеоборотныеАктивы";
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				
			НаправлениеСписания = "ПроизводственныеРасходы";
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
				
			НаправлениеСписания = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НаправлениеСписания;
	
КонецФункции // ПолучитьНаправлениеСписанияПоКодуОперации(КодОперации)

// Возвращает строковое описание регистра-источника для заданного кода операции
//
// Параметры:
//	КодОперации   - код операции по регистру партий
//
// Возвращаемое значение:
//	Источник списания.
//
Функция ПолучитьИсточникПоКодуОперации(КодОперации) Экспорт
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	Если КодОперации = КодыОпераций.Реализация
		ИЛИ КодОперации = КодыОпераций.РеализацияРозница
		ИЛИ КодОперации = КодыОпераций.ПередачаНаКомиссию 
		ИЛИ КодОперации = КодыОпераций.ВозвратПоставщику
		ИЛИ КодОперации = КодыОпераций.Комплектация
		ИЛИ КодОперации = КодыОпераций.КорректировкаСерийИХарактеристик
		ИЛИ КодОперации = КодыОпераций.КорректировкаКачества
		ИЛИ КодОперации = КодыОпераций.ПередачаТарыКонтрагенту
		ИЛИ КодОперации = КодыОпераций.ПеремещениеМеждуСкладами
		ИЛИ КодОперации = КодыОпераций.ПереоценкаПринятыхНаКомиссию
		ИЛИ КодОперации = КодыОпераций.РезервированиеПодЗаказ
		ИЛИ КодОперации = КодыОпераций.СнятиеРезерваПодЗаказ
		ИЛИ КодОперации = КодыОпераций.СписаниеНаЗатраты
		ИЛИ КодОперации = КодыОпераций.СписаниеПоИнвентаризации
		ИЛИ КодОперации = КодыОпераций.СписаниеПоОрдеру
		ИЛИ КодОперации = КодыОпераций.ПереоценкаКупленных
		ИЛИ КодОперации = КодыОпераций.ИзменениеНалоговогоНазначенияЗапасов

	Тогда
	
		Возврат "НаСкладах";
	КонецЕсли;
	
	Если КодОперации = КодыОпераций.ВозвратОтКомиссионера
		ИЛИ КодОперации = КодыОпераций.РеализацияКомиссия
		ИЛИ КодОперации = КодыОпераций.ВозвратОтПереработчика
		ИЛИ КодОперации = КодыОпераций.СписаниеПартийПереданныхВПроизводство
		
	Тогда
		Возврат "Переданные";
	КонецЕсли;
	
	Возврат "НаСкладах"; // По умолчанию
	
КонецФункции // ПолучитьИсточникПоКодуОперации()

Функция ПолучитьМассивКодыОперацийВыбытиеПартий() Экспорт
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	КодыОперацийВыбытиеПартий = Новый Массив;	
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.ВозвратПоставщику);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.Комплектация);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.Реализация);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.СписаниеПоИнвентаризации);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.СписаниеПоОрдеру);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.РеализацияКомиссия);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.ПередачаМатериаловВЭксплуатацию);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.РеализацияРозница);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.ПередачаТарыКонтрагенту);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.ПринятиеКУчетуОС);
// ЭтоВложенияВОбъектыСтроительства()
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.СписаниеНаВложенияВоВнеоборотныеАктивы);
	
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.ПередачаНаКомиссию);
	
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.СписаниеПартийВПроизводствоОперативно);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.СписаниеНаЗатраты);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.СписаниеНаБрак);
	
	Возврат КодыОперацийВыбытиеПартий;

КонецФункции // ПолучитьМассивКодыОперацийВыбытиеПартий()

Функция ПолучитьМассивКодыОперацийПеремещение() Экспорт
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	КодыОперацийПеремещение = Новый Массив;	
	КодыОперацийПеремещение.Добавить(КодыОпераций.ПеремещениеМеждуСкладами);
	
	КодыОперацийПеремещение.Добавить(КодыОпераций.СписаниеПартийВПроизводствоОперативно);
	КодыОперацийПеремещение.Добавить(КодыОпераций.СписаниеНаВложенияВоВнеоборотныеАктивы);
	КодыОперацийПеремещение.Добавить(КодыОпераций.ПередачаОборудованияВМонтаж);
	
	Возврат КодыОперацийПеремещение;

КонецФункции // ПолучитьМассивКодыОперацийВыбытиеПартий()
