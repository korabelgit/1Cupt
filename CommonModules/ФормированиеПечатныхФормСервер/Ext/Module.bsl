// Формирует описание серий и характеристик ТМЦ для печати
//
// Параметры
//  Выборка  – <ВыборкаИзРезультатаЗапроса > – Исходные данные
//
// Возвращаемое значение:
//   Строка - Описание серий и характеристик ТМЦ
//
Функция ПредставлениеСерий(Выборка) Экспорт

	Результат = "(";

	Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
		Результат = Результат + Выборка.Характеристика;
		Результат = СтрЗаменить(Результат, "<>", "");
	КонецЕсли;

	Если ЗначениеЗаполнено(Выборка.Серия) Тогда
		Результат = ?(Результат = "(", Результат, Результат + "; ");
		Результат = Результат + Выборка.Серия;
		Результат = СтрЗаменить(Результат,  "(<>", "(");
		Результат = СтрЗаменить(Результат, "; <>",  "");
	КонецЕсли;

	Результат = Результат + ")";

	Возврат ?(Результат = "()", "", " " + Результат);

КонецФункции // ПредставлениеСерий()

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//	КодЯзыка		- на каком языке выводить описание
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина, КодЯзыка = "ru") Экспорт
		

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,ЮридическийАдрес,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КоррСчет";
	КонецЕсли;

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	
	
	СоответствиеПараметров.Вставить("ПолноеНаименование",		НСтр("ru=' ';uk=' '",КодЯзыка));
	СоответствиеПараметров.Вставить("КодПоЕДРПОУ", 				НСтр("ru='код по ЕГРПОУ ';uk='код за ЄДРПОУ '",КодЯзыка));
	СоответствиеПараметров.Вставить("КодПоДРФО", 				НСтр("ru='код по ГРФЛ ';uk='код за ДРФО '",КодЯзыка));
	СоответствиеПараметров.Вставить("ИНН",						НСтр("ru='ИНН ';uk='ІПН '",КодЯзыка));
	СоответствиеПараметров.Вставить("НомерСвидетельства", 		НСтр("ru='№ свид. ';uk='№ свід.  '",КодЯзыка));
	СоответствиеПараметров.Вставить("ЮридическийАдрес",			НСтр("ru='юр. адрес: ';uk='юр. адреса: '",КодЯзыка));
	СоответствиеПараметров.Вставить("ФактическийАдрес",			НСтр("ru='адрес: ';uk='адреса: '",КодЯзыка));
	СоответствиеПараметров.Вставить("Телефоны",					НСтр("ru='тел.: ';uk='тел.: '",КодЯзыка));
	СоответствиеПараметров.Вставить("НомерСчета",				НСтр("ru='т/с ';uk='п/р '",КодЯзыка));
	СоответствиеПараметров.Вставить("Банк",               		НСтр("ru='в банке ';uk='у банку '",КодЯзыка));
	СоответствиеПараметров.Вставить("МФО",                		НСтр("ru= 'МФО ';uk='МФО '",КодЯзыка));
	СоответствиеПараметров.Вставить("ПлательщикНалогаНаПрибыль",НСтр("ru=' ';uk=' '",КодЯзыка));

	НоваяСтрока = Ложь;
	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Если ИмяПараметра = "/" Тогда
				НоваяСтрока = Истина;
				Продолжить;
			КонецЕсли; 
			
			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если ПустаяСтрока(Результат)Тогда 
					// это первый параметр, выведем префикс с большой буквы
					Префикс = ВРег(Лев(Префикс,1)) + Сред(Префикс,2);
				ИначеЕсли НоваяСтрока Тогда
					Результат = Результат + "," + Символы.ПС;
					НоваяСтрока = Ложь;
				Иначе
					Результат = Результат + ", " 
				КонецЕсли; 

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
				Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат СокрЛП(Результат);

КонецФункции // ОписаниеОрганизации()

// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры
//  ТабДокумент        – Табличный документ
//  ВыводимыеОбласти   – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//   Булево   – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции // ПроверитьВыводТабличногоДокумента()

// Функция собирает фамилию, имя и отчество физ. лица на указанную дату
//
// Параметры: 
//  ФизЛицо.    - физ. лицо, для которго необходимо получить данные
//  ДатаПериода - дата получения сведений
//
// Возвращаемое значение:
//  Структура с данными.
//
Функция ФамилияИмяОтчество(ФизЛицо, ДатаПериода) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарФизЛицо",     ФизЛицо);
	Запрос.УстановитьПараметр("ПарДатаПериода", ДатаПериода);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Фамилия,
	|	Имя,
	|	Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ПарДатаПериода, ФизЛицо = &ПарФизЛицо)
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Результат = Новый Структура("Фамилия, Имя, Отчество");

	Результат.Фамилия  = ?(НЕ ЗначениеЗаполнено(Шапка.Фамилия),  "", Шапка.Фамилия);
	Результат.Имя      = ?(НЕ ЗначениеЗаполнено(Шапка.Имя),      "", Шапка.Имя);
	Результат.Отчество = ?(НЕ ЗначениеЗаполнено(Шапка.Отчество), "", Шапка.Отчество);

	Возврат Результат;

КонецФункции // ФамилияИмяОтчество()

// Формирует массив параметров, для печати дополнительной информации
//
// Параметры: 
//  ВыборкаШапка   - результат запроса по шапке
//  Список         - список запрашиваемых параметров организации
//
// Возвращаемое значение:
//  Массив - со струтктурой (парами НазваниеПараметра:ЗначениеПараметра).
//
Функция ДополнительнаяИнформация(ВыборкаШапка, Список = "", КодЯзыка = "ru") Экспорт

	МассивСтруктур = Новый Массив();

	Если ПустаяСтрока(Список) Тогда
		Возврат МассивСтруктур;
	КонецЕсли; 
	
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ДоговорНаименованиеДляПечати", НСтр("ru='Договор:';uk='Договір:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Содержание",					НСтр("ru='Содержание:';uk='Зміст:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Склад",						НСтр("ru='Склад:';uk='Склад:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Заказ",						НСтр("ru='Заказ:';uk='Замовлення:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Сделка",						НСтр("ru='Сделка:';uk='Угода:'",КодЯзыка));
	СоответствиеПараметров.Вставить("ДокументПередачи",				НСтр("ru='Документ передачи:';uk='Документ передачі:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Инвентаризация",				НСтр("ru='Инвентаризация:';uk='Інвентаризація:'",КодЯзыка));
	СоответствиеПараметров.Вставить("КассаККМ",						НСтр("ru='ЭККА:';uk='ЕККА:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Валюта",						НСтр("ru='Валюта:';uk='Валюта:'",КодЯзыка));	
	СоответствиеПараметров.Вставить("АдресДоставки",				НСтр("ru='Адрес доставки:';uk='Адреса доставки:'",КодЯзыка));

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");

	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = СокрЛП(Лев(Список, ПозЗапятой - 1));
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				ЗначениеПараметра = ВыборкаШапка[ИмяПараметра];
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					//в договоре не указано особое наименование для печати
					Если ИмяПараметра = "ДоговорНаименованиеДляПечати" Тогда
						
						Попытка
							ДоговорКонтрагента = ВыборкаШапка["ДоговорКонтрагента"];
						Исключение 
							Продолжить;	
						КонецПопытки;

						ДоговорДата  = ДоговорКонтрагента.Дата;
						ДоговорНомер = ДоговорКонтрагента.Номер;
						
						Если ЗначениеЗаполнено(ДоговорНомер) Тогда
							//заменим название договора на его настоящий номер
							ЗначениеПараметра = "№ " + СокрП(ДоговорНомер);
						Иначе
							// названием будет наименование справочника
							ЗначениеПараметра = ДоговорКонтрагента.Наименование;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ДоговорДата) Тогда
							// добавим дату договора
							ЗначениеПараметра = ЗначениеПараметра + НСтр("ru=' от ';uk=' від '",КодЯзыка) + Формат(ДоговорДата,"ДФ=dd.MM.yyyy")
						КонецЕсли;
					Иначе					
                         Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// корректируем значение параметра в некоторых случаях
				Если    ИмяПараметра = "Сделка" 
					ИЛИ ИмяПараметра = "ДокументПередачи"
					ИЛИ ИмяПараметра = "Инвентаризация"
					ИЛИ ИмяПараметра = "Заказ" Тогда
					
					//ЗначениеПараметра = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЗначениеПараметра, ЗначениеПараметра.Ссылка.Метаданные().Представление(),КодЯзыка);
					ЗначениеПараметра = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЗначениеПараметра, Локализация.ПолучитьЛокализованныйСинонимОбъекта(ЗначениеПараметра.Ссылка, КодЯзыка),КодЯзыка);
				КонецЕсли; 
				
				Если ИмяПараметра = "АдресДоставки" Тогда
					Попытка
						ЗначениеПараметра = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(ЗначениеПараметра);
					Исключение
					КонецПопытки;
				КонецЕсли; 
				
				НазваниеПараметра = Строка(СоответствиеПараметров[ИмяПараметра]);
				Если НЕ ЗначениеЗаполнено(НазваниеПараметра) Тогда
					НазваниеПараметра = ИмяПараметра + ":";
				КонецЕсли;
				
				// корректируем название параметра в некоторых случаях	
				Если ИмяПараметра = "Сделка" Тогда		
					ДоговорВедениеВзаиморасчетов = ВыборкаШапка["ДоговорВедениеВзаиморасчетов"];
					
					Если ДоговорВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
							НазваниеПараметра = НСтр("ru='Заказ:';uk='Замовлення:'",КодЯзыка);
					ИначеЕсли ДоговорВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
							НазваниеПараметра = НСтр("ru='Счет:';uk='Рахунок:'",КодЯзыка);
					КонецЕсли;
				КонецЕсли; 

				МассивСтруктур.Добавить(Новый Структура("НазваниеПараметра,ЗначениеПараметра", 
				                                  НазваниеПараметра,
												  ЗначениеПараметра));
			Исключение
			КонецПопытки;
		КонецЕсли; 
	КонецЦикла;

	Возврат МассивСтруктур;

КонецФункции // ДополнительнаяИнформация()

// Функция формирует фамилию и инициалы
//
// Параметры
//  Фамилия  - фамилия физ. лица.
//  Имя      - имя физ. лица.
//  Отчество - отчество физ. лица.
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица включает фамилию и инициалы, если Ложь - фамилию и полностью имя и отчество
//
// Возвращаемое значение 
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт
	Возврат ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(Фамилия, Имя ,Отчество, ФИОКратко);
КонецФункции // ПолучитьФамилиюИмяОтчество()

// Функция возвращает информацию об ответственных лицах организации на дату среза
//
// Параметры:
//  Организация - организация, для которой нужно определить руководящих лиц.
//  ДатаСреза - дата, на которую определяются руководящие лица
//
Функция ОтветственныеЛица(Организация, ДатаСреза, ПолучатьДанныеПоЧП = Истина) Экспорт
	
	Результат = Новый Структура("Руководитель, РуководительДолжность, РуководительФИО, РуководительПредставление, 
								|ГлавныйБухгалтер, ГлавныйБухгалтерДолжность, ГлавныйБухгалтерФИО, ГлавныйБухгалтерПредставление, 
								|Кассир, КассирДолжность, КассирФИО, КассирПредставление");

	Если Организация <> Неопределено тогда

		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		
		
		Если ПолучатьДанныеПоЧП Тогда
		
			ЗапросПоЛицам.УстановитьПараметр("ПризнакФизЛица", Перечисления.ЮрФизЛицо.ФизЛицо);
			
							  
			ЗапросПоЛицам.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		    |	ФИОФизЛицСрезПоследних.Фамилия,
		    |	ФИОФизЛицСрезПоследних.Имя,
		    |	ФИОФизЛицСрезПоследних.Отчество,
		    |	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизическоеЛицо
		    |ИЗ
		    |	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
		    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		    |		ПО ФИОФизЛицСрезПоследних.ФизЛицо = Организации.ИндивидуальныйПредприниматель
		    |			И (Организации.Ссылка = &Организация)
		    |			И (Организации.ЮрФизЛицо = &ПризнакФизЛица)
			|";
			
			Руководители = ЗапросПоЛицам.Выполнить().Выбрать();
			
			Пока Руководители.Следующий() Цикл
				
				ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление", "","","","");
				Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Фамилия) ИЛИ Руководители.Фамилия = NULL) Тогда
					ФИО.Фамилия = Руководители.Фамилия;
				КонецЕсли;
				Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Имя) ИЛИ Руководители.Имя = NULL) Тогда
					ФИО.Имя = Руководители.Имя;
				КонецЕсли;
				Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Отчество) ИЛИ Руководители.Отчество = NULL) Тогда
					ФИО.Отчество = Руководители.Отчество;
				КонецЕсли;
				
				Представление = ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
				
				Результат.Руководитель               = Руководители.ФизическоеЛицо;
				Результат.РуководительДолжность      = "";
				Результат.РуководительФИО            = ФИО;
				Результат.РуководительПредставление  = Представление;
				
			КонецЦикла;
			
		КонецЕсли;
		
		
		ЗапросПоЛицам.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо,
		|	ОтветственныеЛицаОрганизаций.Должность
		|
		|ПОМЕСТИТЬ ОтветственныеЛицаОрганизацийСрезПоследних
		|
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизаций
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ИЗ
		|	ОтветственныеЛицаОрганизацийСрезПоследних КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаСреза, 
		|				ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
        |               И ФизЛицо В (ВЫБРАТЬ ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо ИЗ ОтветственныеЛицаОрганизацийСрезПоследних)
		|		) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|";
		
		Руководители = ЗапросПоЛицам.Выполнить().Выбрать();

		Пока Руководители.Следующий() Цикл

			ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление", "","","","");
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Фамилия) ИЛИ Руководители.Фамилия = NULL) Тогда
				ФИО.Фамилия = Руководители.Фамилия;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Имя) ИЛИ Руководители.Имя = NULL) Тогда
				ФИО.Имя = Руководители.Имя;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Отчество) ИЛИ Руководители.Отчество = NULL) Тогда
				ФИО.Отчество = Руководители.Отчество;
			КонецЕсли;
			
			Представление = ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
			
			Если Руководители.ОтветственноеЛицо      = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				Результат.Руководитель               = Руководители.ФизическоеЛицо;
				Результат.РуководительДолжность      = Руководители.Должность;
				Результат.РуководительФИО            = ФИО;
				Результат.РуководительПредставление  = Представление;

			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер           = Руководители.ФизическоеЛицо;
				Результат.ГлавныйБухгалтерДолжность  = Руководители.Должность;
                Результат.ГлавныйБухгалтерФИО        = ФИО;
				Результат.ГлавныйБухгалтерПредставление  = Представление;
				
			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
				Результат.Кассир                     = Руководители.ФизическоеЛицо;
				Результат.КассирДолжность      		 = Руководители.Должность;
                Результат.КассирФИО            		 = ФИО;
				Результат.КассирПредставление  = Представление;
				
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;
	
КонецФункции // ОтветственныеЛица

Функция ОтветственныеЛицаОрганизаций(Организация, ДатаСреза, Исполнитель = Неопределено) Экспорт

	Возврат ОтветственныеЛица(Организация, ДатаСреза);

КонецФункции // ОтветственныеЛицаОрганизаций()

// Функция возвращает информацию об ответственных лицах контрагента и их должностях 
//
// Параметры:
//  Контрагент - контрагент, для которой нужно определить руководящих лиц.
//  ДатаСреза - дата, на которую определяются руководящие лица
//
Функция ОтветственныеЛицаКонтрагента(Контрагент, ДатаСреза) Экспорт
	
	Результат = Новый Структура("Руководитель, РуководительДолжность, РуководительФИО, РуководительПредставление, 
								|ГлавныйБухгалтер, ГлавныйБухгалтерДолжность, ГлавныйБухгалтерФИО, ГлавныйБухгалтерПредставление, 
								|Кассир, КассирДолжность, КассирФИО, КассирПредставление");

	Если ЗначениеЗаполнено(Контрагент) тогда

		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.УстановитьПараметр("Контрагент", Контрагент);
		ЗапросПоЛицам.УстановитьПараметр("ПризнакФизЛица",   Перечисления.ЮрФизЛицо.ФизЛицо);
		
		ЗапросПоЛицам.Текст = "ВЫБРАТЬ
		                      |	ФИОФизЛицСрезПоследних.Фамилия,
		                      |	ФИОФизЛицСрезПоследних.Имя,
		                      |	ФИОФизЛицСрезПоследних.Отчество,
		                      |	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизическоеЛицо
		                      |ИЗ
		                      |	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &Контрагент) КАК ФИОФизЛицСрезПоследних
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		                      |		ПО ФИОФизЛицСрезПоследних.ФизЛицо = Контрагенты.Ссылка
		                      |			И (Контрагенты.ЮрФизЛицо = &ПризнакФизЛица)";
	   
		Руководители = ЗапросПоЛицам.Выполнить().Выбрать();
		
		Пока Руководители.Следующий() Цикл
			
			ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление", "", "", "", "");
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Фамилия) или Руководители.Фамилия = NULL) Тогда
				ФИО.Фамилия = Руководители.Фамилия;
			КонецЕсли;
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Имя) или Руководители.Имя = NULL) Тогда
				ФИО.Имя = Руководители.Имя;
			КонецЕсли;
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Отчество) или Руководители.Отчество = NULL) Тогда
				ФИО.Отчество = Руководители.Отчество;
			КонецЕсли;
			Представление = ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
			
			Результат.Руководитель               = Руководители.ФизическоеЛицо;
			Результат.РуководительДолжность      = "";
			Результат.РуководительФИО            = ФИО;
			Результат.РуководительПредставление  = Представление;
			
		КонецЦикла;
		
		ЗапросПоЛицам.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаКонтрагентовСрезПоследних.КонтактноеЛицо,
		|	ОтветственныеЛицаКонтрагентовСрезПоследних.КонтактноеЛицо.Должность КАК Должность,
		|	ОтветственныеЛицаКонтрагентовСрезПоследних.КонтактноеЛицо.КонтактноеЛицо.Фамилия КАК Фамилия,
		|	ОтветственныеЛицаКонтрагентовСрезПоследних.КонтактноеЛицо.КонтактноеЛицо.Имя КАК Имя,
		|	ОтветственныеЛицаКонтрагентовСрезПоследних.КонтактноеЛицо.КонтактноеЛицо.Отчество КАК Отчество
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаКонтрагентов.СрезПоследних(&ДатаСреза, Контрагент = &Контрагент) КАК ОтветственныеЛицаКонтрагентовСрезПоследних";
		
		Руководители = ЗапросПоЛицам.Выполнить().Выбрать();

		Пока Руководители.Следующий() Цикл

			ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление", "", "", "", "");
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Фамилия) или Руководители.Фамилия = NULL) Тогда
				ФИО.Фамилия = Руководители.Фамилия;
			КонецЕсли;
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Имя) или Руководители.Имя = NULL) Тогда
				ФИО.Имя = Руководители.Имя;
			КонецЕсли;
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Отчество) или Руководители.Отчество = NULL) Тогда
				ФИО.Отчество = Руководители.Отчество;
			КонецЕсли;
			Представление = ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
			
			Если Руководители.ОтветственноеЛицо      = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				Результат.Руководитель               = Руководители.КонтактноеЛицо;
				Результат.РуководительДолжность      = Руководители.Должность;
				Результат.РуководительФИО            = ФИО;
				Результат.РуководительПредставление  = Представление;

			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер           = Руководители.КонтактноеЛицо;
				Результат.ГлавныйБухгалтерДолжность  = Руководители.Должность;
                Результат.ГлавныйБухгалтерФИО        = ФИО;
				Результат.ГлавныйБухгалтерПредставление  = Представление;
				
			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
				Результат.Кассир                     = Руководители.КонтактноеЛицо;
				Результат.КассирДолжность      		 = Руководители.Должность;
                Результат.КассирФИО            		 = ФИО;
				Результат.КассирПредставление  = Представление;
				
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтветственныеЛицаКонтрагента

Функция ПолучитьТелефонДляНалоговойНакладной(Телефоны) Экспорт
	
	Результат = СокрЛП(Телефоны);
	// может быть несколько телефонов, через запятую, возьмем до первой запятой
	Поз = Найти(Результат, ",");
	Если Поз > 0 Тогда
		Результат = Лев(Результат, Поз - 1);
	КонецЕсли; 
	
	РезультатТолькоЦифры = "";
	ДлинаСтрокиТелефонов = СтрДлина(Результат);
	
	// удалим все не цифры
	Для НомерСимвола = 1 По ДлинаСтрокиТелефонов Цикл
		ТекСимвол = Сред(Результат, НомерСимвола, 1);
		Если Найти("0123456789", ТекСимвол) = 0 Тогда
			Продолжить;
		Иначе
			РезультатТолькоЦифры = РезультатТолькоЦифры + ТекСимвол;
		КонецЕсли;
	КонецЦикла; 	
	
	//для выравнивания по правому краю дополним слева пробелами
	РезультатТолькоЦифры = "          " + РезультатТолькоЦифры;
	
	// возьмем 10 правых 
	РезультатТолькоЦифры = Прав(РезультатТолькоЦифры, 10);
	
	Возврат РезультатТолькоЦифры;

КонецФункции // ПолучитьТелефонДляНалоговойНакладной()

