
////////// ОБЩИЕ КОМАНДЫ ВСЕХ ОБРАБОТЧИКОВ //////////////

// Функция осуществляет подключение устройства.
//
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	ПараметрыПодключения.Вставить("ИДУстройства", "");

	// Проверка настроенных параметров
	Порт              = Неопределено;
	Скорость          = Неопределено;
	Четность          = Неопределено;
	БитыДанных        = Неопределено;
	СтопБиты          = Неопределено;
	Кодировка         = Неопределено;
	ЗагружатьШрифты   = Неопределено;
	Модель            = Неопределено;

	Параметры.Свойство("Порт",              Порт);
	Параметры.Свойство("Скорость",          Скорость);
	Параметры.Свойство("Четность",          Четность);
	Параметры.Свойство("БитыДанных",        БитыДанных);
	Параметры.Свойство("СтопБиты",          СтопБиты);
	Параметры.Свойство("Кодировка",         Кодировка);
	Параметры.Свойство("ЗагружатьШрифты",   ЗагружатьШрифты);
	Параметры.Свойство("Модель"           , Модель);

	Если Порт              = Неопределено
	 Или Скорость          = Неопределено
	 Или Четность          = Неопределено
	 Или БитыДанных        = Неопределено
	 Или СтопБиты          = Неопределено
	 Или Кодировка         = Неопределено
	 Или ЗагружатьШрифты   = Неопределено
	 Или Модель            = Неопределено Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'"));

		Результат = Ложь;
	КонецЕсли;

	Если Результат Тогда
		ОбъектДрайвера.ДобавитьУстройство();
		Если ОбъектДрайвера.Результат = 0 Тогда
			ПараметрыПодключения.ИДУстройства = ОбъектДрайвера.НомерТекущегоУстройства;

			ОбъектДрайвера.НаименованиеТекущегоУстройства = Параметры.Модель;
			ОбъектДрайвера.Модель                         = ПолучитьКодПротокола(Параметры.Модель);
			ОбъектДрайвера.БитыДанных                     = Параметры.БитыДанных;
			ОбъектДрайвера.ЗагружатьШрифты                = Параметры.ЗагружатьШрифты;
			ОбъектДрайвера.НомерПорта                     = Параметры.Порт;
			ОбъектДрайвера.СкоростьОбмена                 = Параметры.Скорость;
			ОбъектДрайвера.СтопБиты                       = Параметры.СтопБиты;
			ОбъектДрайвера.Четность                       = Параметры.Четность;
			ОбъектДрайвера.НаборСимволов                  = Параметры.Кодировка;

			ОбъектДрайвера.УстройствоВключено = 1;
			Если ОбъектДрайвера.Результат <> 0 Тогда
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);

				Результат = Ложь;

				ОбъектДрайвера.УдалитьУстройство();
				ПараметрыПодключения.ИДУстройства = Неопределено;
			//Иначе
			//	КолвоСтолбцов = ОбъектДрайвера.КолвоСтолбцовДисплея;
			//	ОбъектДрайвера.СоздатьОкно(0, 0, 1, КолвоСтолбцов, 1, КолвоСтолбцов);
			//	ОбъектДрайвера.СоздатьОкно(1, 0, 1, КолвоСтолбцов, 1, КолвоСтолбцов);
			КонецЕсли;
		КонецЕсли;

		Если Результат Тогда
			ОбъектДрайвера.УстройствоВключено = 1;
			Если ОбъектДрайвера.Результат <> 0 Тогда
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);

				Результат = Ложь;

				ОбъектДрайвера.УстройствоВключено = 0;
				ОбъектДрайвера.УдалитьУстройство();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	УдалитьОкна(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	ОбъектДрайвера.НомерТекущегоУстройства = ПараметрыПодключения.ИДУстройства;
	ОбъектДрайвера.УстройствоВключено = 0;
	ОбъектДрайвера.УдалитьУстройство();

	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	// Создание нового окна на дисплее
	Если Команда = "CreateWindow" Тогда
		Строка         = ВходныеПараметры[0];
		Колонка        = ВходныеПараметры[1];
		Ширина         = ВходныеПараметры[2];
		Высота         = ВходныеПараметры[3];
		НомерОкна      = ВходныеПараметры[4];
		РежимПрокрутки = ВходныеПараметры[5];
		ТипПрокрутки   = ВходныеПараметры[6];
		РежимМигания   = ВходныеПараметры[7];

		Результат = СоздатьОкно(ОбъектДрайвера, Параметры, ПараметрыПодключения, Строка, Колонка,
		                        Ширина, Высота, НомерОкна, РежимПрокрутки, ТипПрокрутки,
		                        РежимМигания, ВыходныеПараметры);

	// Удаление окна на дисплее
	ИначеЕсли Команда = "DestroyWindow" Тогда
		НомерОкна = ВходныеПараметры[0];

		Результат = УдалитьОкно(ОбъектДрайвера, Параметры, ПараметрыПодключения, НомерОкна, ВыходныеПараметры);

	// Вывод строк на дисплей
	ИначеЕсли Команда = "DisplayText" Тогда
		СтрокаТекста = ВходныеПараметры[0];
		НомерОкна    = ВходныеПараметры[1];

		Результат = ВывестиТекст(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, НомерОкна, ВыходныеПараметры);

	// Очистка дисплея
	ИначеЕсли Команда = "ClearText" Тогда
		НомерОкна = ВходныеПараметры[0];

		Результат = ОчиститьТекст(ОбъектДрайвера, Параметры, ПараметрыПодключения, НомерОкна, ВыходныеПараметры);

	// Тестирование устройства
	ИначеЕсли Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;

	КонецЕсли;

	Возврат Результат;

КонецФункции


/////////////////////////////////////
// Функции-исполнители команд

///////// СПЕЦИФИЧНЫЕ ПО ТИПУ ОБОРУДОВАНИЯ КОМАНДЫ ////////////////

Функция СоздатьОкно(ОбъектДрайвера, Параметры, ПараметрыПодключения, Строка, Колонка,
                        Ширина, Высота, НомерОкна, РежимПрокрутки, ТипПрокрутки,
                        РежимМигания, ВыходныеПараметры)

	Результат = Истина;

	ОбъектДрайвера.НомерТекущегоУстройства = ПараметрыПодключения.ИДУстройства;

	ОбъектДрайвера.СоздатьОкно(Строка, Колонка, Высота, Ширина, Высота, Ширина);

	// Так как драйвер не умеет создавать окно с заранее указанным номером Сохраним в переменных подключения атрибуты окна
	СоответствиеОкон = Неопределено;
	ПараметрыПодключения.Свойство("СоответствиеОкон", СоответствиеОкон);
	Если СоответствиеОкон = Неопределено Тогда
		СоответствиеОкон = Новый Соответствие();
	КонецЕсли;
	СоответствиеОкон.Вставить(НомерОкна, ОбъектДрайвера.ТекущееОкно);
	ПараметрыПодключения.Вставить("СоответствиеОкон", СоответствиеОкон);

	Если РежимПрокрутки Тогда
		ОбъектДрайвера.ЗадержкаПовтораБегСтроки = 500;
		ОбъектДрайвера.ЗадержкаПоказаБегСтроки  = 150;
		ОбъектДрайвера.ТипБегСтроки = ТипПрокрутки + 1;
	Иначе
		ОбъектДрайвера.ТипБегСтроки = 0;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция УдалитьОкно(ОбъектДрайвера, Параметры, ПараметрыПодключения, НомерОкна, ВыходныеПараметры)

	Результат = Истина;

	ОбъектДрайвера.НомерТекущегоУстройства = ПараметрыПодключения.ИДУстройства;

	ТекущееОкно      = 0;
	СоответствиеОкон = Неопределено;
	ПараметрыПодключения.Свойство("СоответствиеОкон", СоответствиеОкон);
	Если СоответствиеОкон <> Неопределено Тогда
		ТекущееОкно = СоответствиеОкон[НомерОкна];
		Если ТекущееОкно = Неопределено Тогда
			ТекущееОкно = 0;
		Иначе
			СоответствиеОкон.Удалить(НомерОкна);
		КонецЕсли;
	КонецЕсли;

	ОбъектДрайвера.ТекущееОкно = ТекущееОкно;

	ОбъектДрайвера.ОчиститьТекст();
	ОбъектДрайвера.УдалитьОкно();

	Возврат Результат;

КонецФункции
// Функция осуществляет вывод списка строк на дисплей покупателя.
//
Функция ВывестиТекст(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, НомерОкна, ВыходныеПараметры)

	Результат = Истина;

	ОбъектДрайвера.НомерТекущегоУстройства = ПараметрыПодключения.ИДУстройства;

	ТекущееОкно      = 0;
	СоответствиеОкон = Неопределено;
	ПараметрыПодключения.Свойство("СоответствиеОкон", СоответствиеОкон);
	Если СоответствиеОкон <> Неопределено Тогда
		ТекущееОкно = СоответствиеОкон[НомерОкна];
		Если ТекущееОкно = Неопределено Тогда
			ТекущееОкно = 0;
		КонецЕсли;
	КонецЕсли;

	ОбъектДрайвера.ТекущееОкно = ТекущееОкно;

	Результат = (ОбъектДрайвера.ПоказатьТекст(СтрокаТекста, 0) = 0);
	Если Не Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет очистку дисплея покупателя.
//
Функция ОчиститьТекст(ОбъектДрайвера, Параметры, ПараметрыПодключения, НомерОкна, ВыходныеПараметры)

	Результат = Истина;

	ОбъектДрайвера.НомерТекущегоУстройства = ПараметрыПодключения.ИДУстройства;

	ТекущееОкно      = 0;
	СоответствиеОкон = Неопределено;
	ПараметрыПодключения.Свойство("СоответствиеОкон", СоответствиеОкон);
	Если СоответствиеОкон <> Неопределено Тогда
		ТекущееОкно = СоответствиеОкон[НомерОкна];
		Если ТекущееОкно = Неопределено Тогда
			ТекущееОкно = 0;
		КонецЕсли;
	КонецЕсли;

	ОбъектДрайвера.ТекущееОкно = ТекущееОкно;

	ОбъектДрайвера.Очистить();

	Возврат Результат;

КонецФункции

//////////// ДОПОЛНИТЕЛЬНЫЕ КОМАНДЫ ////////////////////

// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	Результат = ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	СоздатьОкно(ОбъектДрайвера, Параметры, ПараметрыПодключения, 0, 0, 20, 2, 1, Истина, 2, Ложь, ВыходныеПараметры);
	//СоздатьОкно(ОбъектДрайвера, Параметры, ПараметрыПодключения, 1, 0, 20, 1, 2, Истина, 2, Ложь, ВыходныеПараметры);

	Если Не Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка при подключении устройства'"));
	Иначе
		СтрокаТекста = НСтр("ru='Тестовая строка 1'") + Символы.ПС + НСтр("ru='Тестовая строка 2'");

		ВывестиТекст(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, 1, ВыходныеПараметры);
		Пауза(5);

		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(НСтр("ru='Тест успешно выполнен'"));
	КонецЕсли;

	ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	Возврат Результат;

КонецФункции

// Функция возвращает версию установленного драйвера
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));

	Попытка
		ВыходныеПараметры[1] = ОбъектДрайвера.Версия;
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции

///////// ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ ОБРАБОТЧИКА ///////////

// Процедура осуществляет удаление окон
//
// Параметры
//  Драйвер   - <НеизвестныйОбъект>
//            - Объект драйвера.
//
Процедура УдалитьОкна(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	ОбъектДрайвера.НомерТекущегоУстройства = ПараметрыПодключения.ИДУстройства;

	Количество = ОбъектДрайвера.КолвоОкон - 1;
	Индекс     = Неопределено;

	Для Индекс = 1 По Количество Цикл
		ОбъектДрайвера.ОчиститьТекст();
		ОбъектДрайвера.УдалитьОкно();
	КонецЦикла;

КонецПроцедуры // УдалитьОкна()

// Процедура формирует задержку указанной длительности
//
// Параметры:
//  Время - <Число>
//        - Длительность задержки в секундах.
//
Процедура Пауза(Время)

	ВремяЗавершения = ТекущаяДата() + Время;
	Пока ТекущаяДата() < ВремяЗавершения Цикл
	КонецЦикла;

КонецПроцедуры // Пауза()

// Возвращает по наименованию модели код протокола устройства
//
Функция ПолучитьКодПротокола(Модель)

	КодПротокола = 0;

	Протоколы = Новый Соответствие;
	Протоколы["Datecs DPD-201"]          = 0;
	Протоколы["EPSON-совместимый"]       = 1;
	Протоколы["Меркурий ДП-01"]          = 2;
	Протоколы["Меркурий ДП-02"]          = 3;
	Протоколы["Меркурий ДП-03"]          = 4;
	Протоколы[ "Flytech"]                = 5;
	Протоколы["GIGATEK DSP800"]          = 6;
	Протоколы["GIGATEK DSP850A"]         = 6;
	Протоколы["Штрих-FrontMaster"]       = 7;
	Протоколы["EPSON-совместимый (USA)"] = 8;
	Протоколы["Posiflex PD2300 USB"]     = 9;
	Протоколы["IPC"]                     = 10;
	Протоколы["GIGATEK DSP820"]          = 11;
	Протоколы["TEC LIUST-51"]            = 12;
	Протоколы["Демо-дисплей"]            = 255;

	Попытка
		КодПротокола = Протоколы[Модель];
	Исключение
	КонецПопытки;

	Возврат КодПротокола;

КонецФункции
