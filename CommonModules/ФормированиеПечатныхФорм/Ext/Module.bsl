// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//	КодЯзыка		- на каком языке выводить описание
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина, КодЯзыка = "ru") Экспорт
		
	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,ЮридическийАдрес,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КоррСчет";
	КонецЕсли;

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	
	СоответствиеПараметров.Вставить("ПолноеНаименование",		НСтр("ru=' ';uk=' '",КодЯзыка));
	СоответствиеПараметров.Вставить("КодПоЕДРПОУ", 				НСтр("ru='код по ЕГРПОУ ';uk='код за ЄДРПОУ '",КодЯзыка));
	СоответствиеПараметров.Вставить("КодПоДРФО", 				НСтр("ru='код по ГРФЛ ';uk='код за ДРФО '",КодЯзыка));
	СоответствиеПараметров.Вставить("ИНН",						НСтр("ru='ИНН ';uk='ІПН '",КодЯзыка));
	СоответствиеПараметров.Вставить("НомерСвидетельства", 		НСтр("ru='№ свид. ';uk='№ свід.  '",КодЯзыка));
	СоответствиеПараметров.Вставить("ЮридическийАдрес",			НСтр("ru='юр. адрес: ';uk='юр. адреса: '",КодЯзыка));
	СоответствиеПараметров.Вставить("ФактическийАдрес",			НСтр("ru='адрес: ';uk='адреса: '",КодЯзыка));
	СоответствиеПараметров.Вставить("Телефоны",					НСтр("ru='тел.: ';uk='тел.: '",КодЯзыка));
	СоответствиеПараметров.Вставить("НомерСчета",				НСтр("ru='т/с ';uk='п/р '",КодЯзыка));
	СоответствиеПараметров.Вставить("Банк",               		НСтр("ru='в банке ';uk='у банку '",КодЯзыка));
	СоответствиеПараметров.Вставить("МФО",                		НСтр("ru= 'МФО ';uk='МФО '",КодЯзыка));
	СоответствиеПараметров.Вставить("ПлательщикНалогаНаПрибыль",НСтр("ru=' ';uk=' '",КодЯзыка));

	НоваяСтрока = Ложь;
	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			
			Если ИмяПараметра = "/" Тогда
				НоваяСтрока = Истина;
				Продолжить;
			КонецЕсли; 

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если ПустаяСтрока(Результат)Тогда 
					// это первый параметр, выведем префикс с большой буквы
					Префикс = ВРег(Лев(Префикс,1)) + Сред(Префикс,2);
				ИначеЕсли НоваяСтрока Тогда
					Результат = Результат + "," +Символы.ПС;
					НоваяСтрока = Ложь;
				Иначе
					Результат = Результат + ", " 
				КонецЕсли; 
				

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
				Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат СокрЛП(Результат);

КонецФункции // ОписаниеОрганизации()

// Функция собирает фамилию, имя и отчество физ. лица на указанную дату
//
// Параметры: 
//  ФизЛицо.    - физ. лицо, для которго необходимо получить данные
//  ДатаПериода - дата получения сведений
//
// Возвращаемое значение:
//  Структура с данными.
//
Функция ФамилияИмяОтчество(ФизЛицо, ДатаПериода) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарФизЛицо",     ФизЛицо);
	Запрос.УстановитьПараметр("ПарДатаПериода", ДатаПериода);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Фамилия,
	|	Имя,
	|	Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ПарДатаПериода, ФизЛицо = &ПарФизЛицо)
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Результат = Новый Структура("Фамилия, Имя, Отчество");

	Результат.Фамилия  = ?(НЕ ЗначениеЗаполнено(Шапка.Фамилия),  "", Шапка.Фамилия);
	Результат.Имя      = ?(НЕ ЗначениеЗаполнено(Шапка.Имя),      "", Шапка.Имя);
	Результат.Отчество = ?(НЕ ЗначениеЗаполнено(Шапка.Отчество), "", Шапка.Отчество);

	Возврат Результат;

КонецФункции // ФамилияИмяОтчество()

// Формирует описание серий и характеристик ТМЦ для печати
//
// Параметры
//  Выборка  – <ВыборкаИзРезультатаЗапроса > – Исходные данные
//
// Возвращаемое значение:
//   Строка - Описание серий и характеристик ТМЦ
//
Функция ПредставлениеСерий(Выборка) Экспорт

	Результат = "(";

	Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
		Результат = Результат + Выборка.Характеристика;
		Результат = СтрЗаменить(Результат, "<>", "");
	КонецЕсли;

	Если ЗначениеЗаполнено(Выборка.Серия) Тогда
		Результат = ?(Результат = "(", Результат, Результат + "; ");
		Результат = Результат + Выборка.Серия;
		Результат = СтрЗаменить(Результат,  "(<>", "(");
		Результат = СтрЗаменить(Результат, "; <>",  "");
	КонецЕсли;

	Результат = Результат + ")";

	Возврат ?(Результат = "()", "", " " + Результат);

КонецФункции // ПредставлениеСерий()

// Стандартная для данной конфигурации функция форматирования прописи количества
//
// Параметры: 
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество, КодЯзыка = "ru") Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, десятая, десятых, десятых, м, 1';uk='ціла ,цілих ,цілих , ж, десята, десятих, десятих, м, 1'",КодЯзыка);
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, сотая, сотых, сотых, м, 2';uk='ціла ,цілих ,цілих , ж, сота, сотих, сотих, м, 2'",КодЯзыка);
	Иначе
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3';uk='ціла ,цілих ,цілих , ж, тисячна, тисячних, тисячних, м, 3'",КодЯзыка);
	КонецЕсли;
	
	Возврат ЧислоПрописью(Количество,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыка), ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

// Устанавливает отбор при выбор подразддления организации или сотрудника органиазации в отборе СКД
// 
// Параметры:
//  Элемент              - элемент выбора
//  КомпоновщикНастроек  - компоновщик настроек
//  ПоляОрганизаций      - поля СКД, в которых назначается отбор по организации
//  Объект               - отчет
//  СтандартнаяОбработка - признак стандартной обработки
//
Процедура ПодставитьОтборОрганизации(Элемент, КомпоновщикНастроек, ПоляОрганизаций = Неопределено, Объект, СтандартнаяОбработка, КогоВыбирать = 0) Экспорт
	
	СписокПолеОргаинзация = Новый СписокЗначений;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("ПолеКомпоновкиДанных") тогда
		СписокПолеОргаинзация.Добавить(ПоляОрганизаций);
	КонецЕсли;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("СписокЗначений") тогда
		СписокПолеОргаинзация = ПоляОрганизаций;
	КонецЕсли;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("Массив") тогда
		СписокПолеОргаинзация.ЗагрузитьЗначения(ПоляОрганизаций);
	КонецЕсли;
	
	Организация = Неопределено;
	
	Для каждого ЭлементОтбора из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если СписокПолеОргаинзация.НайтиПоЗначению(ЭлементОтбора.ЛевоеЗначение) <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Организации") тогда
			
			Организация = ЭлементОтбора.ПравоеЗначение;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Организация <> Неопределено тогда
		
		Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") тогда
			
			Элемент.ВыборПоВладельцу = Организация;
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СотрудникиОрганизаций") тогда
			
			ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Объект, Истина, ОбщегоНазначения.ПолучитьРабочуюДату(), Организация, 1, СтандартнаяОбработка, Элемент.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПодставитьОтборОрганизации()

// Формируется текст плательщика или получателя для печатной формы платежного документа
//
// Параметры
//  ТекстНаименования  	– <строка> – значение реквизита документа, если реквизит заполнен, он и выводится на печать
//  ВладелецСчета  		– <СправочникСсылка.Организации>/<СправочникСсылка.Контрагенты> – владелец банковского счета
//  БанковскийСчет		– <СправочникСсылка.БанковскиеСчета> – банковский счет плательщика или получателя
//  ВидОперации			– <Перечисление.ВидыОперацийППИсходящее> – вид операции документа
//
// Возвращаемое значение:
//   <Строка>			– наименование плательщика или получателя, которое будет выводиться в печатной форме платежного документа
//
Функция СформироватьТекстНаименованияПлательшикаПолучателя(ТекстНаименования, ВладелецСчета, БанковскийСчет, ВидОперации = Неопределено) 
	
	ТекстРезультат = ТекстНаименования;
	Если ПустаяСтрока(ТекстРезультат) Тогда
		
		Если ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Организации") 
		  И ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога 
		  И НЕ ПустаяСтрока(ВладелецСчета.НаименованиеПлательщикаПриПеречисленииНалогов) Тогда
		  
			ТекстРезультат = ВладелецСчета.НаименованиеПлательщикаПриПеречисленииНалогов;
			
		Иначе
			
			ТекстРезультат = ?(ПустаяСтрока(ВладелецСчета.НаименованиеПолное), 
			                   ВладелецСчета.Наименование, ВладелецСчета.НаименованиеПолное);

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстРезультат;
	
КонецФункции // СформироватьТекстНаименованияПлательшикаПолучателя()

// Формирует значения по умолчанию реквизитов плательщика и получателя для банковских платежных документов
//
// Параметры
//  Плательщик  		– <СправочникСсылка.Организации>/<СправочникСсылка.Контрагенты> – плательщик, владелец банковского счета
//  СчетПлательщика		– <СправочникСсылка.БанковскиеСчета> – банковский счет плательщика
//  Получатель  		– <СправочникСсылка.Организации>/<СправочникСсылка.Контрагенты> – получатель, владелец банковского счета
//  СчетПолучателя		– <СправочникСсылка.БанковскиеСчета> – банковский счет получателя
//  ВидОперации			– <Перечисление.ВидыОпераций...> – вид операции документа
//
// Возвращаемое значение:
//   <Структура>		– структура строковых реквизитов плательщика и получателя
//						  ключи структуры: 
//							ТекстПлательщика, ИННПлательщика, КПППлательщика, 
//							ТекстПолучателя, ИННПолучателя, КПППолучателя
//							НаименованиеБанкаПлательщика, НомерСчетаПлательщика, БикБанкаПлательщика, СчетБанкаПлательщика 
//							НаименованиеБанкаПолучателя, НомерСчетаПолучателя, БикБанкаПолучателя, СчетБанкаПолучателя
//
Функция СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(Плательщик, СчетПлательщика, Получатель, СчетПолучателя, ВидОперации) Экспорт

	ЗначенияРеквизитов = Новый Структура;
	
	ЗначенияРеквизитов.Вставить("ТекстПлательщика", СформироватьТекстНаименованияПлательшикаПолучателя(
	                            "", Плательщик, СчетПлательщика, ВидОперации));
	
									
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		ВладелецСчетаПолучателя = Плательщик;
		СтруктураКодыОрганизаций = Новый Структура("Организация", ВладелецСчетаПолучателя);
		СтруктураКодыОрганизаций = РегистрыСведений.КодыОрганизации.ПолучитьПоследнее(, СтруктураКодыОрганизаций);
		ЗначенияРеквизитов.Вставить("КодПоЕДРПОУПолучателя", СтруктураКодыОрганизаций.КодПоЕДРПОУ);
	Иначе
		ВладелецСчетаПолучателя = Получатель;
		ЗначенияРеквизитов.Вставить("КодПоЕДРПОУПолучателя", ВладелецСчетаПолучателя.КодПоЕДРПОУ);
	КонецЕсли;
	
	ЗначенияРеквизитов.Вставить("ТекстПолучателя", СформироватьТекстНаименованияПлательшикаПолучателя(
	                            "", ВладелецСчетаПолучателя, СчетПолучателя, ВидОперации));
	
	БанкПлательщика             = СчетПлательщика.Банк;
	ЗначенияРеквизитов.Вставить("НаименованиеБанкаПлательщика", БанкПлательщика.Наименование + " " + БанкПлательщика.Город);
	ЗначенияРеквизитов.Вставить("НомерСчетаПлательщика", СчетПлательщика.НомерСчета);
	ЗначенияРеквизитов.Вставить("МФОБанкаПлательщика", БанкПлательщика.Код);
	ЗначенияРеквизитов.Вставить("СчетБанкаПлательщика", БанкПлательщика.КоррСчет);
									
	БанкПолучателя             = СчетПолучателя.Банк;
	ЗначенияРеквизитов.Вставить("НаименованиеБанкаПолучателя", БанкПолучателя.Наименование + " " + БанкПолучателя.Город);
	ЗначенияРеквизитов.Вставить("НомерСчетаПолучателя", СчетПолучателя.НомерСчета);
	ЗначенияРеквизитов.Вставить("МФОБанкаПолучателя", БанкПолучателя.Код);
	ЗначенияРеквизитов.Вставить("СчетБанкаПолучателя", БанкПолучателя.КоррСчет);
									
	Возврат ЗначенияРеквизитов;
	
КонецФункции //СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ

// Получает из текущих настроек пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
// Если не найдено, то берется первый макет в структуре макетов печатных форм,
// и сохраняется в настройках пользователя.
//
// Параметры: 
//  ИмяОбъекта          - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  ФормаДиалога        - форма редактируемого объекта,
//  СоответствиеМакетов - соответствие, содержащее названия (ключ) и имена (значение) 
//                        макетов печатных форм документа
//
Процедура СоздатьКнопкиПечати(ДокументОбъект, ФормаДокумента) Экспорт

	Попытка
		СтруктураВнутреннихПечатныхФорм = ДокументОбъект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(ДокументОбъект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаПоУмолчанию = УниверсальныеМеханизмы.ПолучитьСтрокуДереваМакетовПоУмолчанию(ДокументОбъект.Метаданные().Имя, ДеревоМакетов);
	
	Если ДеревоМакетов.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПанельКнопок = ФормаДокумента.ЭлементыФормы.ОсновныеДействияФормы;
	КнопкиСправа = (ПанельКнопок.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право);
	
	Если ПанельКнопок.Кнопки.Найти("Печать") = Неопределено Тогда
		Если КнопкиСправа Тогда
			ПанельКнопок.Кнопки.Вставить(0,, ТипКнопкиКоманднойПанели.Разделитель);
			ПанельКнопок.Кнопки.Вставить(0,"Печать", ТипКнопкиКоманднойПанели.Действие, "Печать", Новый Действие("ОсновныеДействияФормыПечать"));
		Иначе
			ПанельКнопок.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			ПанельКнопок.Кнопки.Добавить("Печать", ТипКнопкиКоманднойПанели.Действие, "Печать", Новый Действие("ОсновныеДействияФормыПечать"));
		КонецЕсли;
	КонецЕсли;
	
	Если (СтрокаПоУмолчанию <> Неопределено) И (ПанельКнопок.Кнопки.Найти("ДействиеПечать") = Неопределено) Тогда
		Если КнопкиСправа Тогда
			ПанельКнопок.Кнопки.Вставить(0,, ТипКнопкиКоманднойПанели.Разделитель);
			ПанельКнопок.Кнопки.Вставить(0,"ДействиеПечать", ТипКнопкиКоманднойПанели.Действие, СтрокаПоУмолчанию.Текст, Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
		Иначе
			ПанельКнопок.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			ПанельКнопок.Кнопки.Добавить("ДействиеПечать", ТипКнопкиКоманднойПанели.Действие, СтрокаПоУмолчанию.Текст, Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УстановитьКнопкуПечати()

// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры
//  ТабДокумент        – Табличный документ
//  ВыводимыеОбласти   – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//   Булево   – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции // ПроверитьВыводТабличногоДокумента()

////////////////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ЗАПРОСОВ ВЫПОЛНЯЮЩИХСЯ ПОД РЛС

// Процедура копирует параметры запроса в массив данных для последующей проверки отчета
//
Процедура ЗапомнитьПараметрыЗапроса(Запрос, МассивПарамтеровЗапроса) Экспорт
	СтруктураЗапроса = Новый Структура("Текст", Запрос.Текст);
	
	Для каждого ПараметрЗапроса из Запрос.Параметры Цикл
		СтруктураЗапроса.Вставить(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивПарамтеровЗапроса.Добавить(СтруктураЗапроса);
КонецПроцедуры

Процедура ПроверитьОшибкуЗапрос(Запрос, ИнформацияОбОшибке, ОшибкаДоступа = ложь, ЗадаватьВопрос = ложь) Экспорт
	
	Если ПолныеПрава.ИспользуетсяОграниченияПравДоступаНаУровнеЗаписей() тогда
		Если НЕ ТранзакцияАктивна() и (НЕ ЗадаватьВопрос ИЛИ РаботаСДиалогами.ЗадатьВопрос("Внимание! При формировании отчета произошла неизвестная ошибка. " + Символы.ПС
			+ "Вы можете настроить и повторно сформировать отчет, " + Символы.ПС 
			+ "или запустить поиск точной причины ошибки. Найти точную причину ошибки " + Символы.ПС
			+ "(может занять продолжительное время)?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Нет) тогда

			
			Если ПолныеПрава.ОшибкаДоступа(Запрос) тогда
				Если НЕ ТранзакцияАктивна() тогда
					РаботаСДиалогами.ВывестиПредупреждение("Внимание! Для формирования отчета недостаточно прав. "+ Символы.ПС +"Настройте отчет или обратитесь к администратору системы");
				КонецЕсли;
				Возврат;
			Иначе
				Если НЕ ТранзакцияАктивна() тогда
					РаботаСДиалогами.ВывестиПредупреждение("Ошибка при формировании отчета не связана с ограничением Ваших прав доступа: " + Символы.ПС+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					ОбщегоНазначения.СообщитьОбОшибке("Ошибка при формировании отчета не связана с ограничением Ваших прав доступа: " + Символы.ПС+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), СтатусСообщения.Важное);
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбщегоНазначения.ПоказатьДиалогСИнформациейОбОшибке(ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Формирует массив параметров, для печати дополнительной информации
//
// Параметры: 
//  ВыборкаШапка   - результат запроса по шапке
//  Список         - список запрашиваемых параметров организации
//
// Возвращаемое значение:
//  Массив - со струтктурой (парами НазваниеПараметра:ЗначениеПараметра).
//
Функция ДополнительнаяИнформация(ВыборкаШапка, Список = "", КодЯзыка = "ru") Экспорт

	МассивСтруктур = Новый Массив();

	Если ПустаяСтрока(Список) Тогда
		Возврат МассивСтруктур;
	КонецЕсли; 
	
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ДоговорНаименованиеДляПечати", НСтр("ru='Договор:';uk='Договір:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Содержание",					НСтр("ru='Содержание:';uk='Зміст:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Склад",						НСтр("ru='Склад:';uk='Склад:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Заказ",						НСтр("ru='Заказ:';uk='Замовлення:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Сделка",						НСтр("ru='Сделка:';uk='Угода:'",КодЯзыка));
	СоответствиеПараметров.Вставить("ДокументПередачи",				НСтр("ru='Документ передачи:';uk='Документ передачі:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Инвентаризация",				НСтр("ru='Инвентаризация:';uk='Інвентаризація:'",КодЯзыка));
	СоответствиеПараметров.Вставить("КассаККМ",						НСтр("ru='ЭККА:';uk='ЕККА:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Валюта",						НСтр("ru='Валюта:';uk='Валюта:'",КодЯзыка));	
	СоответствиеПараметров.Вставить("АдресДоставки",				НСтр("ru='Адрес доставки:';uk='Адреса доставки:'",КодЯзыка));

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");

	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = СокрЛП(Лев(Список, ПозЗапятой - 1));
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				ЗначениеПараметра = ВыборкаШапка[ИмяПараметра];
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					//в договоре не указано особое наименование для печати
					Если ИмяПараметра = "ДоговорНаименованиеДляПечати" Тогда
						
						Попытка
							ДоговорКонтрагента = ВыборкаШапка["ДоговорКонтрагента"];
						Исключение 
							Продолжить;	
						КонецПопытки;

						ДоговорДата  = ДоговорКонтрагента.Дата;
						ДоговорНомер = ДоговорКонтрагента.Номер;
						
						Если ЗначениеЗаполнено(ДоговорНомер) Тогда
							//заменим название договора на его настоящий номер
							ЗначениеПараметра = "№ " + СокрП(ДоговорНомер);
						Иначе
							// названием будет наименование справочника
							ЗначениеПараметра = ДоговорКонтрагента.Наименование;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ДоговорДата) Тогда
							// добавим дату договора
							ЗначениеПараметра = ЗначениеПараметра + НСтр("ru=' от ';uk=' від '",КодЯзыка) + Формат(ДоговорДата,"ДФ=dd.MM.yyyy")
						КонецЕсли;
					Иначе					
                         Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// корректируем значение параметра в некоторых случаях
				Если    ИмяПараметра = "Сделка" 
					ИЛИ ИмяПараметра = "ДокументПередачи"
					ИЛИ ИмяПараметра = "Инвентаризация"
					ИЛИ ИмяПараметра = "Заказ" Тогда
					
					//ЗначениеПараметра = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЗначениеПараметра, ЗначениеПараметра.Ссылка.Метаданные().Представление(),КодЯзыка);
					ЗначениеПараметра = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЗначениеПараметра, Локализация.ПолучитьЛокализованныйСинонимОбъекта(ЗначениеПараметра.Ссылка, КодЯзыка),КодЯзыка);
				КонецЕсли; 
				
				Если ИмяПараметра = "АдресДоставки" Тогда
					Попытка
						ЗначениеПараметра = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(ЗначениеПараметра);
					Исключение
					КонецПопытки;
				КонецЕсли; 
				
				НазваниеПараметра = Строка(СоответствиеПараметров[ИмяПараметра]);
				Если НЕ ЗначениеЗаполнено(НазваниеПараметра) Тогда
					НазваниеПараметра = ИмяПараметра + ":";
				КонецЕсли;
				
				// корректируем название параметра в некоторых случаях	
				Если ИмяПараметра = "Сделка" Тогда		
					ДоговорВедениеВзаиморасчетов = ВыборкаШапка["ДоговорВедениеВзаиморасчетов"];
					
					Если ДоговорВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
							НазваниеПараметра = НСтр("ru='Заказ:';uk='Замовлення:'",КодЯзыка);
					ИначеЕсли ДоговорВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
							НазваниеПараметра = НСтр("ru='Счет:';uk='Рахунок:'",КодЯзыка);
					КонецЕсли;
				КонецЕсли; 

				МассивСтруктур.Добавить(Новый Структура("НазваниеПараметра,ЗначениеПараметра", 
				                                  НазваниеПараметра,
												  ЗначениеПараметра));
			Исключение
			КонецПопытки;
		КонецЕсли; 
	КонецЦикла;

	Возврат МассивСтруктур;

КонецФункции // ДополнительнаяИнформация()

// Функция возвращает информацию об ответственных лицах организации на дату среза
//
// Параметры:
//  Организация - организация, для которой нужно определить руководящих лиц.
//  ДатаСреза - дата, на которую определяются руководящие лица
//
Функция ОтветственныеЛица(Организация, ДатаСреза, ПолучатьДанныеПоЧП = Истина) Экспорт
	
	Возврат ФормированиеПечатныхФормСервер.ОтветственныеЛица(Организация, ДатаСреза, ПолучатьДанныеПоЧП);
	
КонецФункции // ОтветственныеЛица

Функция ОтветственныеЛицаОрганизаций(Организация, ДатаСреза, Исполнитель = Неопределено) Экспорт

	Возврат ОтветственныеЛица(Организация, ДатаСреза);

КонецФункции // ОтветственныеЛицаОрганизаций()


// Функция возвращает информацию об ответственных лицах контрагента и их должностях 
//
// Параметры:
//  Контрагент - контрагент, для которой нужно определить руководящих лиц.
//  ДатаСреза - дата, на которую определяются руководящие лица
//
Функция ОтветственныеЛицаКонтрагента(Контрагент, ДатаСреза) Экспорт

	Возврат ФормированиеПечатныхФормСервер.ОтветственныеЛицаКонтрагента(Контрагент, ДатаСреза);

КонецФункции // ОтветственныеЛицаКонтрагента


// Функция формирует фамилию и инициалы
//
// Параметры
//  Фамилия  - фамилия физ. лица.
//  Имя      - имя физ. лица.
//  Отчество - отчество физ. лица.
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица включает фамилию и инициалы, если Ложь - фамилию и полностью имя и отчество
//
// Возвращаемое значение 
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт
	Возврат ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(Фамилия, Имя ,Отчество, ФИОКратко);
КонецФункции // ПолучитьФамилиюИмяОтчество()

// Функция возвращает информацию об ответственных лицах обособленного подразделения организации и их должностях 
//
// Параметры:
//  ОбособленноеПодразделениеОрганизации - обособленное подразделение организации, для которого нужно определить руководящих лиц.
//  ДатаСреза - дата, на которую определяются руководящие лица
//
Функция ОтветственныеЛицаОбособленногоПодразделения(ОбособленноеПодразделениеОрганизации, ДатаСреза) Экспорт

	Результат = Новый Структура("Руководитель, РуководительДолжность, РуководительФИО, РуководительПредставление, 
								|ГлавныйБухгалтер, ГлавныйБухгалтерФИО, ГлавныйБухгалтерПредставление, 
								|Кассир, КассирФИО, КассирПредставление");

	Если ОбособленноеПодразделениеОрганизации <> Неопределено Тогда
		
		Результат = ОтветственныеЛица(ОбособленноеПодразделениеОрганизации, ДатаСреза, Ложь);

		Если НЕ ЗначениеЗаполнено(Результат.Кассир) ИЛИ НЕ ЗначениеЗаполнено(Результат.ГлавныйБухгалтер) ИЛИ НЕ ЗначениеЗаполнено(Результат.Руководитель) Тогда
			
			// Если что-то не заполнено по обособленному подразделению - берем из информации по организации
			Руководители = ОтветственныеЛица(ОбособленноеПодразделениеОрганизации.Владелец, ДатаСреза);
			
			Если НЕ ЗначениеЗаполнено(Результат.Руководитель) Тогда
				
				Результат.Руководитель               = Руководители.Руководитель;
				Результат.РуководительДолжность      = Руководители.РуководительДолжность;
				Результат.РуководительФИО            = Руководители.РуководительФИО;
				Результат.РуководительПредставление  = Руководители.РуководительПредставление;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Результат.ГлавныйБухгалтер) Тогда
				
				Результат.ГлавныйБухгалтер           = Руководители.ГлавныйБухгалтер;
                Результат.ГлавныйБухгалтерФИО        = Руководители.ГлавныйБухгалтерФИО;
				Результат.ГлавныйБухгалтерПредставление  = Руководители.ГлавныйБухгалтерПредставление;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Результат.Кассир) Тогда
				
				Результат.Кассир                     = Руководители.Кассир;
                Результат.КассирФИО            		 = Руководители.КассирФИО;
				Результат.КассирПредставление  		 = Руководители.КассирПредставление;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции


// Функция разбивает строку на символы и помещает их в структуру
//
// Параметры
// 	СтрокаСимволов – Тип: Строка или преобразуемый к ней – Строка, которую нужно разбить
//                 
//  ИмяКлючей      – Тип: Строка – Наименование ключей структуры.
//                                 Например: 
//                                 "ИНН" - функция вернет структуру ИНН1...ИНН<КоличествоСимволов>
//                 
//
// Возвращаемое значение:
//   Тип: Структура – с наименованием ключей <ИмяКлючей> + <НомерСимвола>   
//                    и значениями символов строки
//
Функция РазбитьСтрокуНаСимволы(Знач СтрокаСимволов, ИмяКлючей) Экспорт
	
	СтруктураСимволов = Новый Структура;
	
	Попытка
		СтрокаСимволов = Строка(СтрокаСимволов)
	Исключение
		Возврат СтруктураСимволов
	КонецПопытки;

	Для Н = 1 По СтрДлина(СтрокаСимволов) Цикл
		СтруктураСимволов.Вставить(ИмяКлючей + Н, Сред(СтрокаСимволов, Н, 1));		
	КонецЦикла;
	
	Возврат СтруктураСимволов

КонецФункции // РазбитьСтрокуНаСимволы()


// Возвращает значение истина если за, переданный период заполнен регламетированный производственный календарь
//
// Параметры:
//
//  НачалоПериода - дата начала периода
//  КонецПериода - дата конца периода
//
Функция ЗаполненРегламентированныйПроизводственныйКалендарь(НачалоПериода, КонецПериода) Экспорт
	
	ТЗ = "ВЫБРАТЬ
	     |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	     |ИЗ
	     |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	     |ГДЕ
	     |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И &КонецПериода";
		 
	Запрос = Новый Запрос(ТЗ);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции  //ЗаполненРегламентированныйПроизводственныйКалендарь()

Процедура ПеренестиПорядок(Настройки, Структура)
	
	ТиповыеОтчеты.СкопироватьЭлементы(Настройки.Порядок, Структура.Порядок, , ложь);
	
	Структура.Порядок.Элементы.Очистить();
	
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Если Структура.Структура.Количество() <> 0 тогда
		ПеренестиПорядок(Настройки, Структура.Структура[0]);
	КонецЕсли;
	
КонецПроцедуры //ПеренестиУпорядочивание()

// Копирует упорядочивания из элемента структуры настройки СКД в отчет
//
// Параметры:
//  Настройка - настройки схемы компоновки данных
//
Процедура ПеренестиПорядокВОтчет(Настройки) Экспорт
	
	Если Настройки.Структура.Количество() <> 0 тогда
		
		Если ТипЗнч(Настройки.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") тогда
			
			Если Настройки.Структура[0].Строки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Строки[0]);
				
			КонецЕсли;
			
			Если Настройки.Структура[0].Колонки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Колонки[0]);
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Колонки[1]);
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Колонки[2]);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Настройки.Структура[0]) = Тип("ГруппировкаТаблицыКомпоновкиДанных") тогда
			
			ПеренестиПорядок(Настройки, Настройки.Структура[0].Строки[0]);
			
		ИначеЕсли ТипЗнч(Настройки.Структура[0]) = Тип("ДиаграммаКомпоновкиДанных") тогда
			
			Если Настройки.Структура[0].Серии.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Серии[0]);
				
			КонецЕсли;
			
			Если Настройки.Структура[0].Точки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Точки[0]);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПеренестиВсеУпорядочиванияВОтчет()

