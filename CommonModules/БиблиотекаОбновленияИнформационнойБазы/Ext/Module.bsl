// Идентификатор библиотеки - УПП (укр)

///////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ БСП

// Возвращает номер версии Библиотеки УПП для Украины
Функция ВерсияБиблиотеки()
	
	Возврат "1.3.54.1";
	
КонецФункции

// Возвращает список процедур-обработчиков обновления библиотеки
//
// Возвращаемое значение:
//   Структура - описание полей структуры см. в функции
//               ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления() 
Функция ОбработчикиОбновления()
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	// Первый запуск
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.1.10";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ПервыйЗапуск";
	
	// При любом обновлении
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "*";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегламентированнуюОтчетность";
	
	// 1.3.16
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.16.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ИзменитьФорматХраненияСреднегоОтклоненияСЛУ";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.16.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРазмерНабораПриЗаписиРегистровУчетаЗатрат";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.16.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ИзменитьНастройкуРасчетаСебестоимости";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.16.4";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникСтатьиНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.16.1";
	Обработчик.Процедура    = "ПолучениеФайловИзИнтернета.ОбновитьХранимыеНастройкиПрокси";
	Обработчик.Опциональный = Истина;
	
	// 1.3.17
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.17.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникСтатьиНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.17.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийНаборыСтатейНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.17.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникСтатьиЗатрат";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.17.2";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ЗаполнитьФлагПризнаватьЗатратыВНУОприходованиеТоваров";
	Обработчик.Опциональный = Истина;
	
	// 1.3.18
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.18.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.СоздатьНоменклатуруГТД";
	Обработчик.Опциональный = Истина;
	
	// 1.3.19
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.19.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ЗаполнитьНормыДляПятойИШестойГруппЕН";
	Обработчик.Опциональный = Истина;
	
	// 1.3.20
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.20.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ЗаполнитьСчетКорректировкиНДСДокументаПерерасчетаНДС";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.20.2";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийПараметрыНалоговогоУчета";
	Обработчик.Опциональный = Истина;
	
	// 1.3.21
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.21.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийНаборыСтатейНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.21.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникСтатьиНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	// 1.3.22
	
	// 1.3.23
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.23.1";
	Обработчик.Процедура    = "ПроцедурыОбменаССайтом.ВыполнитьОбновлениеНастроекОбменаССайтом";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.23.3";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникСтатьиНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.23.3";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийНаборыСтатейНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.23.5";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ДобавитьНалоговоеНазначениеПрограммнаяПродукция";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.23.5";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ПроверитьВидКонтактнойИнформацииФаксОрганизации";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.23.6";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийШкалаСтавокНалогов";
	Обработчик.Опциональный = Истина;
	
	// 1.3.24
	
	// 1.3.25
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.25.2";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбработатьРегистрыСведенийНастройкиКурсовыхРазниц";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.25.3";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийНемонетарныеСчета";
	Обработчик.Опциональный = Истина;
	
	// 1.3.26
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.26.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникСтатьиНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.26.2";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСтавкиНалогаНаПрибыль2014";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.26.2";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбработатьРегистрыСведенийНастройкиКурсовыхРазниц425";
	Обработчик.Опциональный = Истина;
	
	// 1.3.27
	
	
	// 1.3.28
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.28.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьНастройкиОтчетов1_3_28";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.28.9";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийПереводыТекстов";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.28.10";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийПараметрыНалоговогоУчета";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.28.11";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийШкалаСтавокНалогов";
	Обработчик.Опциональный = Истина;
	
	// 1.3.29
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.29.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийПереводыТекстов";
	Обработчик.Опциональный = Истина;
	
	// 1.3.30
	
	// 1.3.31
	
	// 1.3.32
	
	// 1.3.33
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.33.2";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УдалитьСубконтоСкладыНаСчете0222";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.33.3";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.КлассификаторЕдиницИзмеренияОбновитьКодыКСПОВО";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.33.4";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникСтатьиНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.33.4";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийНаборыСтатейНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.33.5";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ИзменениеНалоговогоНазначенияОСЗаполнитьФлагПересчетаНакопленнойАмортизации";
	Обработчик.Опциональный = Истина;
	
	// 1.3.34
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.34.3";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийИндексИнфляции";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.34.4";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийПраздники";
	Обработчик.Опциональный = Истина;
	
	// 1.3.35
	
	// 1.3.36
	
	// ПФ с покупки валюты
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.36.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийШкалаСтавокНалогов";
	Обработчик.Опциональный = Истина;
	
	// Акцизный налог
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.36.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникСтатьиНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.36.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникНаборыСтатейНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.36.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийНаборыСтатейНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	// изменения в учете ЕН
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.36.2";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийПараметрыНалоговогоУчета";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.36.2";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбработатьЗаписиУчетнойПолитикиПоЕдиномуНалогуВерсия1_3_36";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.36.5";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.НеоборотныеАктивыСообщитьОПроизводственныхОСВНУ";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.36.5";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.НеоборотныеАктивыСообщитьОПроизводственныхНМАВНУ";
	Обработчик.Опциональный = Истина;
	
	// 1.3.37
	
	// 1.3.38
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.38.2";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ПреобразоватьКодыФилиалаДляЗвит";
	Обработчик.Опциональный = Истина;
	
	// 1.3.39
	
	// 1.3.40
	
	// 1.3.41
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.41.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникСтатьиНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.41.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ПерепровестиДокументыУсловныхПродаж";
	Обработчик.Опциональный = Истина;
	
	// 1.3.42
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.42.0";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникНалоговыеНазначенияАктивовИЗатрат";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.42.0";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСинонимыСправочниковВерсия1_3_42";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.42.0";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьПараметрыСчетовБУНалоговыйУчетС2015";
	Обработчик.Опциональный = Истина;
	
	// 1.3.43
	
	// изменения в учете ЕН
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.43.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийПараметрыНалоговогоУчета";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.43.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникСтатьиНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.43.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникНаборыСтатейНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.43.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийНаборыСтатейНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	// 1.3.44
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.44.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСтавкиНалогаНаПрибыль2016";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.44.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникСтатьиНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	// 1.3.45
	
	// 1.3.46
	
	// 1.3.47
	
	// 1.3.48
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.48.2";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникСтатьиНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.48.2";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегистрСведенийНаборыСтатейНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	// 1.3.49
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.49.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ПерезаполнитьРегистрСведенийНаборыСтатейНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	// 1.3.50
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.50.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьСправочникСтатьиНалоговыхДеклараций";
	Обработчик.Опциональный = Истина;
	
	// 1.3.51
	
	// 1.3.52
	
	// 1.3.53
    
    // 1.3.54
    
    
	
	Возврат Обработчики;
	
КонецФункции // ОбработчикиОбновления

// Неинтерактивное обновление данных ИБ при смене версии библиотеки
// Обязательная "точка входа" обновления ИБ в библиотеке.
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления(
		"УПП (укр)",
		ВерсияБиблиотеки(),
		ОбработчикиОбновления());
		
	// Обновление версии библиотеки ЗУП (укр) выполняем после обновления версии библиотеки УПП (укр)
	ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ВыполнитьОбновлениеИнформационнойБазы();
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////
// ПЕРВЫЙ ЗАПУСК

Процедура ПервыйЗапуск() Экспорт
	
	Если ЗначениеЗаполнено(ПланыОбмена.ГлавныйУзел()) Тогда
		// Первоначальное заполнение делаем только в главном узле.
		// Информация о версиях подсистем не мигрирует в составе РИБ
		Возврат;
	КонецЕсли;
	
	ДатаНачалаВводаДанных = '19800101';
	
	// ОСНОВНЫЕ КЛАССИФИКАТОРЫ
	
	// Валюты
	ВалютаРегламентированногоУчета = 
	НайтиСоздатьВалюту("980", "грн", "Гривня", 
	                   "гривня, гривни, гривень, ж, копейка, копейки, копеек, ж, 2",
	                   "гривня, гривні, гривень, ж, копійка, копійки, копійок, ж, 2");
					   
	ВалютаУправленческогоУчета = 
	НайтиСоздатьВалюту("840", "USD", "Доллар США", 
	                    "доллар, доллара, долларов, м, цент, цента, центов, м, 2",
	                    "долар, долара, доларів, м, цент, цента, центів, м, 2");
						
	ВалютаМеждународногоУчета =
	НайтиСоздатьВалюту("978", "EUR", "Евро",
	                   "евро, евро, евро, м, цент, цента, центов, м, 2",
	                   "євро, євро, євро, м, цент, цента, центів, м, 2");
	
	УстановитьКонстанту("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	УстановитьКонстанту("ВалютаУправленческогоУчета", ВалютаУправленческогоУчета);
	
	Если Метаданные.Константы.Найти("ВалютаМеждународногоУчета") <> Неопределено Тогда
		УстановитьКонстанту("ВалютаМеждународногоУчета", ВалютаМеждународногоУчета);
	КонецЕсли;
	
	// Единицы измерения
	НайтиСоздатьЕдиницу("2009", "шт", "Штука");
	
	ЕдиницаИзмеренияВеса = НайтиСоздатьЕдиницу("0301", "кг", "Кілограм");
	
	УстановитьКонстанту("ЕдиницаИзмеренияВеса", ЕдиницаИзмеренияВеса);
	
	// Начальное заполнение объектов
	ОбработкаНЗ = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	ОбработкаНЗ.ЗаполнитьВсеОбъекты();
	
	// Контактная информация
	ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию();
	ЗаполнитьСправочникВидыКонтактнойИнформации();
	
	НачальноеЗаполнениеСправочникаСобытияОС();

	// НАСТРОЙКА УЧЕТА
	
	// Бухгалтерский и налоговый учет
	УстановитьПараметрыСчетовБУиНУ();
	УстановитьПараметрыСчетовБУНалоговыйУчетС2015();
	УстановитьСубконтоСкладыНаСчетах();
	
	
	
	
	// обновление Хозрасчетного плана счетов 30.Х (Касса). Добавление субконто "Статьи движения денежных средств"
	УстановитьСубконтоСтатьяДДСВПлатеСчетов();
	
	ЗаполнитьРегистрыСчетовУчета();

	
	// Начальное заполнение учетной политики упр. учета
	НаборУчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	НаборУчетнаяПолитика.ЗаполнитьПоУмолчанию(ДатаНачалаВводаДанных);
	НаборУчетнаяПолитика.Записать();
	
	Если Метаданные.Константы.Найти("ИспользоватьТолькоСборочныеСпецификации") <> Неопределено Тогда
		Константы.ИспользоватьТолькоСборочныеСпецификации.Установить(Ложь);
		УстановитьКонстанту("ВалютаУправленческогоУчета"          , ВалютаУправленческогоУчета);
	КонецЕсли;
	
	// Учет затрат
	// Установим в качестве основного режима - расширенную аналитику
	УстановитьКонстанту("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат", Истина);
	УстановитьКонстанту("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат", ДатаНачалаВводаДанных);
	УстановитьКонстанту("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат", Перечисления.РежимыИспользованияРасширеннойАналитики.РегламентированныйУчетСДополнительнойАналитикой);
	
	РасширеннаяАналитикаУчета.ЗаполнитьНастройкиАналитикиПоШаблону(Перечисления.РежимыИспользованияРасширеннойАналитики.РегламентированныйУчетСДополнительнойАналитикой);
	
	// Установка настроек расчета себестоимости по умолчанию
	УстановитьКонстанту("ГраницаПогрешностиСЛУ"          , 0.1);
	УстановитьКонстанту("МаксимальноеКоличествоИтерацийСЛУ", 50);
	УстановитьКонстанту("СреднееОтклонениеСЛУ", 6);
	
	
	УстановитьКонстанту("СтратегияСписанияПартийТоваровПоСтатусам", Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные);
	УстановитьКонстанту("ОпределениеВремениПроведенияПлатежногоДокумента", Перечисления.СпособыОпределенияВремениПроведенияПлатежногоДокумента.ПоВремениРегистрацииДокумента);
	
	// Бизнес-процесс Закрытие месяца
	ЗаполнитьРегистрДокументыРегламентныхОпераций();
	ЗаполнитьРегистрОтчетыРегламентныхОпераций();
	
	// НАСТРОЙКА ПРОГРАММЫ
	
	ПроверкаРазницыВремени.ИнициализироватьПроверкуРазницыВремениССервером();
	
	ПроцедурыКонтроляОстатков.УстановитьИспользованиеРегистраСвободныеОстатки(Истина, ДатаНачалаВводаДанных, Ложь);
	
	УстановитьКонстанту("ИспользованиеВстроенногоПочтовогоКлиента", Истина);
	УстановитьКонстанту("ИспользоватьВнутренниеЗаказы", Истина);
	УстановитьКонстанту("РазрешитьВыводитьСообщенияВПанельКомментариев", Истина);
	УстановитьКонстанту("ИнтервалПроверкиНапоминанийВСекундах", 60);
	
	УстановитьРазмерНабораПриЗаписиРегистровУчетаЗатрат();
	
	// Торговое оборудование
	УстановитьКонстанту("ПрефиксВесовогоТовара", "1");
	УстановитьКонстанту("ПрефиксШтучногоТовара", "0");
	УстановитьКонстанту("ДлинаКодаВесовогоТовара", 5);
	
	УстановитьКонстанту("УчитыватьВозвратыТовараПокупателем", Истина);
	
	
	
	
	#Если Клиент Тогда
	//Данная процедура вызывает функцию ОбщегоНазначения.ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию,
	//которая не может выполняться во внешнем соединении т.к. использует метод ПолучитьОбщуюФорму
	ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки();
	#КонецЕсли	

    НачальноеЗаполнениеСправочникаКлассификаторСтранМира();
	
	НовыеСтатьи = ЗаполнитьНепредопределенныеСтатьи();
	ЗаполнитьРСПараметрыКурсовыхРазниц(НовыеСтатьи);
	ЗаполнитьНепредопределенныеСтатьи("ВидыДоговоровПоГК");
	
	СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетПредприятия.ПолучитьОбъект();
	СпособОтражения.СубконтоДт1 = НовыеСтатьи.СтатьиЗатрат_Другие;
	СпособОтражения.Записать();
	
	// заполнение реквизитов предопределенных элементов плана видов характеристик СвойстваОбъектов
	ТМ = ПланыВидовХарактеристик.СвойстваОбъектов.ТорговаяМарка.ПолучитьОбъект();
	ТМ.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
	ТМ.ОбменДанными.Загрузка = Истина;
	ТМ.Записать();
	
КонецПроцедуры

// Процедура устанавливает указанное значение указанной константы и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура УстановитьКонстанту(ИмяКонстанты, ЗначениеКонстанты)

	Если Константы[ИмяКонстанты].Получить() = ЗначениеКонстанты Тогда
		Возврат;
	КонецЕсли;

	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);

	СтрСообщения = "Константе """ + Метаданные.Константы[ИмяКонстанты].Синоним + """ "
	             + "назначено значение """ + ЗначениеКонстанты + """";

	ОбщегоНазначения.Сообщение(СтрСообщения, СтатусСообщения.Обычное);

КонецПроцедуры // УстановитьКонстанту

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект)

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;

	Если СправочникОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = "а группа";
	Иначе
		СтрСообщения2 = " элемент";
	КонецЕсли;

	СтрСообщения2 = СтрСообщения2 + " справочника """ + СправочникОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = "наименование """ + СправочникОбъект.Наименование + """";

	Попытка
		СправочникОбъект.Записать();
		ОбщегоНазначения.Сообщение(СтрСообщения1 + СтрСообщения2 + "код """ + СправочникОбъект.ПолныйКод() + """, " + СтрСообщения3, СтатусСообщения.Обычное);
	Исключение
		ОбщегоНазначения.Сообщение("Не записан"  + СтрСообщения2 + СтрСообщения3 +
		         Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;

КонецПроцедуры // ЗаписатьСправочникОбъект

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                        - значение соответствующего реквизита справочника,
//  Наименование                 - значение соответствующего реквизита справочника,
//  НаименованиеПолное           - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском    - значение соответствующего реквизита справочника.
//  ПараметрыПрописиНаУкраинском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском, ПараметрыПрописиНаУкраинском) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();

		СправочникОбъект.Код                          = Код;
		СправочникОбъект.Наименование                 = Наименование;
		СправочникОбъект.НаименованиеПолное           = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском    = ПараметрыПрописиНаРусском;
		СправочникОбъект.ПараметрыПрописиНаУкраинском = ПараметрыПрописиНаУкраинском;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;

		// установим курс и кратность = 1 на 1 января 1980
		МодульВалютногоУчета.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);
		
	КонецЕсли;

	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

// Функция создает элемент справочника КлассификаторЕдиницИзмерения, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьЕдиницу(Код, Наименование, НаименованиеПолное)

	Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
		
	КонецЕсли;

	Возврат Ссылка;

КонецФункции

// Процедура заполняет константу шаблонов телефонов.
Процедура ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию()

	ТаблицаСоответствий = Новый Соответствие;
	ТаблицаСоответствий.Вставить(7,"999-99-99");
	ТаблицаСоответствий.Вставить(6,"99-99-99");
	ТаблицаСоответствий.Вставить(5,"9-99-99");
	ТаблицаСоответствий.Вставить(4,"99-99");

	ХранилищеШаблоновТелефонов = Новый ХранилищеЗначения(ТаблицаСоответствий);

	Константы.ШаблоныТелефонныхНомеров.Установить(ХранилищеШаблоновТелефонов);

КонецПроцедуры // ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию()

// Процедура производит обновление элемента справочника "Виды контактной информации"
Процедура УстановитьПараметрыВидаКонтактнойИнформации(СсылкаВидыКонтактнойИнформации, Знач Тип, Знач ВидОбъектаКонтактнойИнформации)
	
	Если НЕ ЗначениеЗаполнено(СсылкаВидыКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОбъектВидКонтактнойИнформации = СсылкаВидыКонтактнойИнформации.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Тип;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = ВидОбъектаКонтактнойИнформации;
	
		ОбъектВидКонтактнойИнформации.Записать();
		
	Исключение
		ОбщегоНазначения.Сообщение("Ошибка при записи реквизитов элемента " + ОбъектВидКонтактнойИнформации.Наименование + " справочника ""Виды контактной информации""");
	КонецПопытки;

	
КонецПроцедуры // УстановитьПараметрыВидаКонтактнойИнформации

// Заполнение реквизитов справочника "Виды контактной информации"
Процедура ЗаполнитьСправочникВидыКонтактнойИнформации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Предопределенный = Истина
	|	И (ВидыКонтактнойИнформации.Тип = &ПустойТип 
	|		ИЛИ ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ПустойВидОбъектаКонтактнойИнформации)
	|";
	
	Запрос.УстановитьПараметр("ПустойТип"                           , Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидОбъектаКонтактнойИнформации", Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
									
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.КонтактнТелефонКандидата Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛицаКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.РабочийТелефонКонтактногоЛицаКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
					
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаДомашний Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаСлужебный Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтактногоЛицаКонтрагента Тогда				
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.EmailОрганизации Тогда				
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.EmailФизЛица Тогда				
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
			
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьСправочникВидыКонтактнойИнформации

#Если Клиент Тогда
// Процедура заполняет по умолчанию необходимые данные
// для отправки сообщений в службу технической поддержки.
//
Процедура ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки()

	Перем СтруктураЗначения;

	Если ТипЗнч(Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить()) <> Тип("Структура") Тогда

		ОбщегоНазначения.ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию(СтруктураЗначения);

		СтрокаПараметровОтправки = СтруктураЗначения.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");

		Если СтрокаПараметровОтправки <> Неопределено Тогда

			СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1] = "hline@1c.ua";

			Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Установить(Новый ХранилищеЗначения(СтруктураЗначения, Новый СжатиеДанных));

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
#КонецЕсли

// Начальное заполнение справочника "КлассификаторСтранМира".
// Запускается при первоначальном заполнении пустой ИБ.
Процедура НачальноеЗаполнениеСправочникаКлассификаторСтранМира()

	Украина = Справочники.КлассификаторСтранМира.Украина;

	// Заполнение полного наименования предопределенного элемента.
	УкраинаОбъект                    = Украина.ПолучитьОбъект();
	УкраинаОбъект.НаименованиеПолное = "Украина";
	УкраинаОбъект.Записать();

КонецПроцедуры // НачальноеЗаполениеСправочникаКлассификаторСтранМира()

// НАСТРОЙКА ПЛАНА СЧЕТОВ

// Устанавливает флаг "Запретить использовать в проводках"
// хозрасчетным и налоговым счетам 
Процедура УстановитьПараметрыСчетовБУиНУ()

	НачатьТранзакцию();
	
	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
			Продолжить;
		КонецЕсли;

		Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;

	ВыборкаСчетов = ПланыСчетов.Налоговый.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
			Продолжить;
		КонецЕсли;

		Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;

	ЗафиксироватьТранзакцию();

КонецПроцедуры // УстановитьПараметрыСчетовБУиНУ

// Устанавливает субконто "Склады" в счетах.
Процедура УстановитьСубконтоСкладыНаСчетах()
	
	ОбщегоНазначения.УстановитьСубконтоСкладыНаСчетах(Ложь);

КонецПроцедуры // УстановитьСубконтоСкладыНаСчетах()

// Устанавливает субконто "Статьи движения денежных средств" на счете "Касса" и его субсчетах
Процедура УстановитьСубконтоСтатьяДДСВПлатеСчетов()
	
	Попытка

		Счет  = ПланыСчетов.Хозрасчетный.Касса;
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);

		ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(Счет);
		Пока ВыборкаСчетов.Следующий() Цикл

			Счета.Добавить(ВыборкаСчетов.Ссылка);

		КонецЦикла;

		Для каждого Счет Из Счета Цикл

			Объект   = Счет.Значение.ПолучитьОбъект();
			КодСчета = Объект.Код;

			Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто") = Неопределено Тогда
				
				НовыйВид = Объект.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
				НовыйВид.Суммовой    = Истина;
	      		НовыйВид.ТолькоОбороты = Истина;
				НовыйВид.Количественный = Истина;
				НовыйВид.Валютный = Истина;
			
				Сообщение = "План счетов ""Хозрасчетный"", счет """ + Строка(Объект) + """ установлено субконто ""Статьи движения денежных средств""";
							
				Если Прав(Сообщение, 1) = "," Тогда
					Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
				КонецЕсли;

				Объект.Записать();
				ОбщегоНазначения.Сообщение(Сообщение);

			КонецЕсли;
			
		КонецЦикла;

	Исключение

		ОбщегоНазначения.СообщитьОбОшибке("Счет " + Строка(КодСчета) + """:");
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());

	КонецПопытки
	
КонецПроцедуры // УстановитьСубконтоСтатьяДДСВПлатеСчетов()

// НАСТРОЙКИ УЧЕТА

// Процедура выполняет начальное заполнение справочника "Виды номенклатуры" и
// связанного с ним регистра сведений "Счета учета номенклатуры"
Процедура ЗаполнитьРегистрыСчетовУчета()


	ВидНоменклатурыТовар = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыТовар) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Товар";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыТовар = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	ВидНоменклатурыМатериал = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Материал", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыМатериал) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Материал";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыМатериал = НовыйЭлемент.Ссылка;
	КонецЕсли;

	ВидНоменклатурыПродукция = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Продукция", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыПродукция) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Продукция";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыПродукция = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	ВидНоменклатурыПолуфабрикат = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Полуфабрикат", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыПолуфабрикат) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Полуфабрикат";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыПолуфабрикат = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	ВидНоменклатурыУслуга = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыУслуга) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Услуга";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		НовыйЭлемент.Записать();
		ВидНоменклатурыУслуга = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	НачатьТранзакцию();

	// Пустая номенклатура, организация, склад
	// Заполняем как для вид номенклатуры = ТОВАР
	Запись = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
	
	Запись.Организация  = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	Запись.Склад        = Справочники.Склады.ПустаяСсылка();
	
	Запись.Прочитать();
	
	// уже существующие записи пользователя не трогаем 
	Если НЕ Запись.Выбран() Тогда
		
		Запись.Организация  					= Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура 					= Справочники.Номенклатура.ПустаяСсылка();
		Запись.Склад        					= Справочники.Склады.ПустаяСсылка();
		
		Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
		Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ТоварыВТорговле;
		Запись.СчетУчетаЗабалансовыйБУ          = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию;
		Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.ТоварыНаКомиссии;
		Запись.СчетУчетаПередачиЗабалансовыйБУ  = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссиюНаСубкомиссии;
		Запись.СчетУчетаНДСПриобретений         = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;
		Запись.СчетУчетаНДСПродаж	 		    = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
		Запись.СхемаРеализации	 		        = Справочники.СхемыРеализации.Товары; 
		
		Запись.НалоговоеНазначение	 		  	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		Запись.НалоговоеНазначениеДоходовИЗатрат= Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		
		Запись.Записать();
		
	КонецЕсли; 

	
	// Пустая организация, склад, вид номенклатуры = ТОВАР
	Запись.Организация     = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура    = ВидНоменклатурыТовар;
	Запись.Склад           = Справочники.Склады.ПустаяСсылка();
	
	Запись.Прочитать();
	
	// уже существующие записи пользователя не трогаем 
	Если НЕ Запись.Выбран() Тогда
		
		Запись.Организация      				= Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура    					= ВидНоменклатурыТовар;
		Запись.Склад           					= Справочники.Склады.ПустаяСсылка();
		
		Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
		Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ТоварыВТорговле;
		Запись.СчетУчетаЗабалансовыйБУ          = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию;
		Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.ТоварыНаКомиссии;
		Запись.СчетУчетаПередачиЗабалансовыйБУ  = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссиюНаСубкомиссии;
		Запись.СчетУчетаНДСПриобретений         = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;
		Запись.СчетУчетаНДСПродаж	 		    = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
		Запись.СхемаРеализации	 		        = Справочники.СхемыРеализации.Товары; 
		
		Запись.НалоговоеНазначение	 		  	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		Запись.НалоговоеНазначениеДоходовИЗатрат= Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		
		Запись.Записать();
		
	КонецЕсли;	
	
	// Пустая организация, склад, вид номенклатуры = МАТЕРИАЛ
	
	Запись = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
	
	Запись.Организация     = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура    = ВидНоменклатурыМатериал;
	Запись.Склад           = Справочники.Склады.ПустаяСсылка();
	
	Запись.Прочитать();
	
	// уже существующие записи пользователя не трогаем
	Если НЕ Запись.Выбран() Тогда
		
		Запись.Организация     = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура    = ВидНоменклатурыМатериал;
		Запись.Склад           = Справочники.Склады.ПустаяСсылка();
		
		Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.СырьеИМатериалы;
		Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаЗабалансовыйБУ          = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
		Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
		Запись.СчетУчетаПередачиЗабалансовыйБУ  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаНДСПриобретений         = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;
		Запись.СчетУчетаНДСПродаж	 		    = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
		Запись.СхемаРеализации	 		        = Справочники.СхемыРеализации.Товары; 
		
		Запись.НалоговоеНазначение	 		  	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		Запись.НалоговоеНазначениеДоходовИЗатрат= Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		
		Запись.Записать();
		
	КонецЕсли;	

	// Пустая организация, склад, вид номенклатуры = ПРОДУКЦИЯ
	Запись = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
	
	Запись.Организация     = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура    = ВидНоменклатурыПродукция;
	Запись.Склад           = Справочники.Склады.ПустаяСсылка();
	
	Запись.Прочитать();
	
	// уже существующие записи пользователя не трогаем
	Если НЕ Запись.Выбран() Тогда
		
		Запись.Организация     = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура    = ВидНоменклатурыПродукция;
		Запись.Склад           = Справочники.Склады.ПустаяСсылка();
		
		Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
		Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ТоварыВТорговле;
		Запись.СчетУчетаЗабалансовыйБУ          = ПланыСчетов.Хозрасчетный.МатериальныеЦенностиНаОтветственномХранении;
		Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.ТоварыНаКомиссии;
		Запись.СчетУчетаПередачиЗабалансовыйБУ  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаНДСПриобретений         = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;
		Запись.СчетУчетаНДСПродаж	 		    = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
		Запись.СхемаРеализации	 		        = Справочники.СхемыРеализации.Продукция; 
		
		Запись.НалоговоеНазначение	 		  	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		Запись.НалоговоеНазначениеДоходовИЗатрат= Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		
		Запись.Записать();
		
	КонецЕсли;	
	
	
	// Пустая организация, склад, вид номенклатуры = ПОЛУФАБРИКАТ
	
	Запись = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
	
	Запись.Организация     = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура    = ВидНоменклатурыПолуфабрикат;
	Запись.Склад           = Справочники.Склады.ПустаяСсылка();
	
	Запись.Прочитать();
	
	// уже существующие записи пользователя не трогаем
	Если НЕ Запись.Выбран() Тогда
		
		Запись.Организация     = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура    = ВидНоменклатурыПолуфабрикат;
		Запись.Склад           = Справочники.Склады.ПустаяСсылка();
		
		Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.Полуфабрикаты;
		Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаЗабалансовыйБУ          = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
		Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
		Запись.СчетУчетаПередачиЗабалансовыйБУ  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаНДСПриобретений         = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;
		Запись.СчетУчетаНДСПродаж	 		    = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
		Запись.СхемаРеализации	 		        = Справочники.СхемыРеализации.Товары; 
		
		Запись.НалоговоеНазначение	 		  	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		Запись.НалоговоеНазначениеДоходовИЗатрат= Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		
		Запись.Записать();
		
	КонецЕсли;	
	
	// Пустая организация, склад, вид номенклатуры = УСЛУГА
	
	Запись = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
	
	Запись.Организация     = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура    = ВидНоменклатурыУслуга;
	Запись.Склад           = Справочники.Склады.ПустаяСсылка();
	
	Запись.Прочитать();
	
	// уже существующие записи пользователя не трогаем
	Если НЕ Запись.Выбран() Тогда
		
		Запись.Организация     = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура    = ВидНоменклатурыУслуга;
		Запись.Склад           = Справочники.Склады.ПустаяСсылка();
		
		Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаЗабалансовыйБУ          = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаПередачиЗабалансовыйБУ  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаНДСПриобретений         = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;
		Запись.СчетУчетаНДСПродаж	 		    = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
		Запись.СхемаРеализации	 		        = Справочники.СхемыРеализации.Услуги; 
		
		Запись.НалоговоеНазначение	 		  	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		Запись.НалоговоеНазначениеДоходовИЗатрат= Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		
		Запись.Записать();
		
	КонецЕсли;	
	
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры //ЗаполнитьРегистрыСчетовУчета()

// БИЗНЕС-ПРОЦЕСС ЗАКРЫТИЕ МЕСЯЦА

// Заполнение регистра сведений ДокументыРегламентныхОпераций первоначальными значениями
Процедура ЗаполнитьРегистрДокументыРегламентныхОпераций()

	НаборЗаписей = РегистрыСведений.ДокументыРегламентныхОпераций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();	
	НаборЗаписей.ЗаполнитьРегистрПоУмолчанию();
	НаборЗаписей.Записать();

КонецПроцедуры

// Заполнение регистра сведений ОтчетыРегламентныхОпераций первоначальными значениями
Процедура ЗаполнитьРегистрОтчетыРегламентныхОпераций()

	НаборЗаписей = РегистрыСведений.ОтчетыРегламентныхОпераций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();	
	НаборЗаписей.ЗаполнитьРегистрПоУмолчанию();
	НаборЗаписей.Записать();

КонецПроцедуры

// ЗАПОЛНЕНИЕ ДРУГИХ СПРАВОЧНИКОВ

//Заполнение справочника "СобытияОС" первоначальными значениями
Процедура НачальноеЗаполнениеСправочникаСобытияОС()
	 
	Попытка 
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету;
		СпрСобытияОС.Наименование = "Принятие к учету";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию;
		СпрСобытияОС.Наименование = "Ввод в эксплуатацию";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВнутреннееПеремещение;
		СпрСобытияОС.Наименование = "Внутреннее перемещение";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание;
		СпрСобытияОС.Наименование = "Списание";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Модернизация;
		СпрСобытияОС.Наименование = "Модернизация";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Ремонт;
		СпрСобытияОС.Наименование = "Ремонт";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПодготовкаКПередаче;
		СпрСобытияОС.Наименование = "Подготовка к передаче";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача;
		СпрСобытияОС.Наименование = "Передача";
		СпрСобытияОС.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры // НачальноеЗаполнениеСправочникаСобытияОС

Функция ЗаполнитьНепредопределенныеСтатьи(ИмяЗаполняемогоСправочника = Неопределено, НомерСоздаваемойСтроки = 0) Экспорт
	
	СтруктураСозданныхСтатей = Новый Структура;
	
	ЗаполняемыеСправочники = Новый Структура;
	Если НЕ ИмяЗаполняемогоСправочника = Неопределено Тогда
		ЗаполняемыеСправочники.Вставить(ИмяЗаполняемогоСправочника);
	Иначе	
		ЗаполняемыеСправочники.Вставить("СтатьиЗатрат");
	КонецЕсли;
	
	Для каждого ЗаполняемыйСправочник Из ЗаполняемыеСправочники Цикл
		
		ИмяСправочника = ЗаполняемыйСправочник.Ключ;
		Попытка
			Макет = Справочники[ИмяСправочника].ПолучитьМакет("НачальноеЗаполнениеНепредопределенных");
		Исключение
			ОбщегоНазначения.Сообщение("Невозможно заполнить справочник: " + ИмяСправочника);
			Продолжить;
		КонецПопытки;
		
		КодЯзыкаПечать = Локализация.КодЯзыкаИнформационнойБазы();
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		ЧислоРеквизитов = Макет.ШиринаТаблицы; 

		КоличествоЗаписей = Макет.ВысотаТаблицы;
		ТекСправочник = Справочники[ИмяСправочника];
		
		ДлинаНаименования = Метаданные.Справочники[ИмяСправочника].ДлинаНаименования;
		
		Если НомерСоздаваемойСтроки = 0 тогда
			//все
			ПервыйНомер = 2;
			ПоследнийНомер = КоличествоЗаписей;
		Иначе
			ПервыйНомер = НомерСоздаваемойСтроки;
			ПоследнийНомер = НомерСоздаваемойСтроки;
		КонецЕсли;	
		
		//Заполняем справочник
		Для СчЭлементы = ПервыйНомер По ПоследнийНомер Цикл

			
			// или имя предопределенного элемента или некий код, для того
			// чтобы можно было создать иерархию элементов
			// созданная группа сохраняется в списке 
			ВнутрКодГруппы = Макет.Область(СчЭлементы, 1).Текст;
			
			// см. выше - ссылка на родителя
			Родитель     = Макет.Область(СчЭлементы, 2).Текст;
			
			Наименование = Макет.Область(СчЭлементы, 3).Текст;
			
			// если заполнен внутренний код группы - значит мы создаем не предопределенную группу
			ЭтоГруппа 	 = ЗначениеЗаполнено(ВнутрКодГруппы);
			
			НовыйОбъект = ?(ЭтоГруппа, ТекСправочник.СоздатьГруппу(), ТекСправочник.СоздатьЭлемент());
			НовыйОбъект.Наименование = Наименование;
			
			Если ЗначениеЗаполнено(Родитель) Тогда
			
				Если СтруктураСозданныхСтатей.Свойство(ИмяСправочника + "_группа_" + Родитель) Тогда
					// группой является созданный в процессе элемент
					НовыйОбъект.Родитель = СтруктураСозданныхСтатей[ИмяСправочника + "_группа_" + Родитель]; 
				Иначе
					// предопределенная группа должна быть
					НовыйОбъект.Родитель = ТекСправочник[Родитель];
				КонецЕсли;
				
			КонецЕсли;
			
			// попытка не пересоздавать существующие элементы.
			СуществующийЭлемент = ТекСправочник.НайтиПоНаименованию(ЛЕВ(Наименование,ДлинаНаименования),Истина,НовыйОбъект.Родитель); 
			Если ЗначениеЗаполнено(СуществующийЭлемент) Тогда
				НовыйОбъект = СуществующийЭлемент.ПолучитьОбъект();
			КонецЕсли;
			
			Если ЭтоГруппа Тогда
				
				Если НЕ ЗначениеЗаполнено(НовыйОбъект.Код) Тогда
					НовыйОбъект.УстановитьНовыйКод();
				КонецЕсли;
				
				НовыйОбъект.ОбменДанными.Загрузка = Истина;
				НовыйОбъект.Записать();
				// сохраняем ссылку для создания иерархии
				СтруктураСозданныхСтатей.Вставить(ИмяСправочника + "_группа_" + ВнутрКодГруппы, НовыйОбъект.Ссылка);
				
			Иначе
				
				Для СчРеквизиты = 3 По ЧислоРеквизитов Цикл
					
					ИмяРеквизита      = Макет.Область(1, 		  СчРеквизиты).Текст;
					ЗначениеРеквизита = Макет.Область(СчЭлементы, СчРеквизиты).Текст;
					
					Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ИмяРеквизита = "ИмяДляЗаполнения" И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					
						
						// нам нужна ссылка, запишем
						НовыйОбъект.ОбменДанными.Загрузка = Истина;
						НовыйОбъект.Записать();
						СтруктураСозданныхСтатей.Вставить(ИмяСправочника + "_" + ЗначениеРеквизита, НовыйОбъект.Ссылка);
						
					ИначеЕсли ИмяРеквизита = "Счет8Класса" Тогда

						НовыйОбъект[ИмяРеквизита] = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ЗначениеРеквизита);
						
					ИначеЕсли ИмяРеквизита = "ВидЗатрат" Тогда

						НовыйОбъект[ИмяРеквизита] = Перечисления.ВидыЗатрат[ЗначениеРеквизита];
						
					ИначеЕсли ИмяРеквизита = "ХарактерЗатрат" Тогда

						НовыйОбъект[ИмяРеквизита] = Перечисления.ХарактерЗатрат[ЗначениеРеквизита];
					ИначеЕсли ИмяРеквизита = "СтатусМатериальныхЗатрат" Тогда

						НовыйОбъект[ИмяРеквизита] = Перечисления.СтатусыМатериальныхЗатратНаПроизводство[ЗначениеРеквизита];						
						
					КонецЕсли;
				
				КонецЦикла;	
				
				Если НовыйОбъект.Модифицированность() Тогда
					Если НЕ ЗначениеЗаполнено(НовыйОбъект.Код) Тогда
						НовыйОбъект.УстановитьНовыйКод();
					КонецЕсли;
					НовыйОбъект.ОбменДанными.Загрузка = Истина;
					НовыйОбъект.Записать();
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Возврат СтруктураСозданныхСтатей;
	
КонецФункции // ЗаполнитьНепредопределенныеСтатьи

Процедура ЗаполнитьРСПараметрыКурсовыхРазниц(НовыеСтатьи)
	
	НаборЗаписей = РегистрыСведений.ПараметрыУчетаКурсовыхРазниц.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		
		СчетЗатрат = Запись.СчетЗатрат;
		Для НомСубконто = 1 По 3 Цикл
			
			Если СчетЗатрат.ВидыСубконто.Количество()<НомСубконто Тогда
				Прервать;
			КонецЕсли;
			
			ВидСубконто = СчетЗатрат.ВидыСубконто[НомСубконто-1].ВидСубконто;
			Если      ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
				Запись["Субконто" + НомСубконто + "Затрат"] = НовыеСтатьи.СтатьиЗатрат_КурсРазницы;
				Прервать;
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // ЗаполнитьРСПараметрыКурсовыхРазниц

// РЕГЛАМЕНТИРОВАННАЯ ОТЧЕТНОСТЬ

// Выполняет первоначальное заполнение и обновление справочника РегламентированныеОтчеты
// списком регламентированных отчетов. 
//
// Процедура должна вызываться при первоначальном заполнении пустой 
// информационной базы и при обновлении версии информационной базы
//
Процедура ЗаполнитьСписокРегламентированныхОтчетов(ПервоеЗаполнение = Истина, ИзменятьПризнакИспользованияВнешнегоОтчета = Истина)

	Перем ДеревоОтчетов;
	Перем ОбработкаОбновлениеОтчетов;

	Если ИзменятьПризнакИспользованияВнешнегоОтчета И НЕ ПервоеЗаполнение Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
							  |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
		                      |ИЗ
		                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		                      |ГДЕ
		                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать = &ПризнакИспользованияВнешнегоОтчета");
		Запрос.УстановитьПараметр("ПризнакИспользованияВнешнегоОтчета", Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Метаданные.Документы.Найти(Выборка.ИсточникОтчета) <> Неопределено ИЛИ	Метаданные.Отчеты.Найти(Выборка.ИсточникОтчета) <> Неопределено Тогда
				ОбъектРеглОтчет = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектРеглОтчет.ВнешнийОтчетИспользовать = Ложь;
				ОбъектРеглОтчет.Записать();
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	// Заполнением списка отчетов выполняется путем вызова экспортных процедур
	// обработки ОбновлениеРегламентированнойОтчетности.
	ОбработкаОбновлениеОтчетов = Обработки.ОбновлениеРегламентированнойОтчетности.Создать();
	
	// Получаем список регламентированных отчетов в виде дерева.
	ДеревоОтчетов = ОбработкаОбновлениеОтчетов.ПолучитьСписокОтчетов();

	Если ДеревоОтчетов.Строки.Количество() = 0 Тогда
		// нет обновлений
		Возврат;
	КонецЕсли;
	
	// Заполняем список отчетов.
	ОбработкаОбновлениеОтчетов.ЗаполнитьСписокОтчетов(ДеревоОтчетов, ПервоеЗаполнение);

КонецПроцедуры // ЗаполнитьСписокРегламентированныхОтчетов()

Процедура ОбновитьРегламентированнуюОтчетность() Экспорт
	
	ЗаполнитьСписокРегламентированныхОтчетов(Ложь);
	
КонецПроцедуры // ОбновитьРегламентированнуюОтчетность

// НАСТРОЙКИ ПРОГРАММЫ

// Процедура задает по умолчанию максимальное количество записей в наборах регистров расширенной аналитики
Процедура УстановитьРазмерНабораПриЗаписиРегистровУчетаЗатрат() Экспорт
	УстановитьКонстанту("РазмерНабораПриЗаписиРегистровУчетаЗатрат", 1000);
КонецПроцедуры // УстановитьРазмерНабораПриЗаписиРегистровУчетаЗатрат

Процедура ИзменитьНастройкуРасчетаСебестоимости() Экспорт
	УстановитьКонстанту("ИспользоватьВременныеТаблицыДляХраненияПромежуточныхРешенийСЛУ", Ложь);
КонецПроцедуры // ИзменитьНастройкуРасчетаСебестоимости

///////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ НАКОПЛЕННЫХ ДАННЫХ (ОПЦИОНАЛЬНЫЕ)

Процедура ИзменитьФорматХраненияСреднегоОтклоненияСЛУ() Экспорт
	
	СреднееОтклонениеСЛУ = глЗначениеПеременной("СреднееОтклонениеСЛУ");
	
	Если СреднееОтклонениеСЛУ > 0 И СреднееОтклонениеСЛУ < 1 Тогда
		Константы.СреднееОтклонениеСЛУ.Установить(-Log10(СреднееОтклонениеСЛУ));
	ИначеЕсли СреднееОтклонениеСЛУ = 0 Тогда
		Константы.СреднееОтклонениеСЛУ.Установить(99);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьФорматХраненияСреднегоОтклоненияСЛУ

Процедура ОбновитьСправочникСтатьиНалоговыхДеклараций() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");

КонецПроцедуры // ОбновитьСправочникСтатьиНалоговыхДеклараций

Процедура ОбновитьСправочникНаборыСтатейНалоговыхДеклараций() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "НаборыСтатейНалоговыхДеклараций");

КонецПроцедуры // ОбновитьСправочникСтатьиНалоговыхДеклараций


Процедура ОбновитьРегистрСведенийНаборыСтатейНалоговыхДеклараций() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "НаборыСтатейНалоговыхДеклараций");

КонецПроцедуры // ОбновитьСправочникСтатьиНалоговыхДеклараций

Процедура ОбновитьСправочникСтатьиЗатрат() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиЗатрат");

КонецПроцедуры  

// Процедуры перехода на 1.3.17

Процедура ЗаполнитьФлагПризнаватьЗатратыВНУОприходованиеТоваров() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", глЗначениеПеременной("ДатаНачалаУчетаНКУ"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОприходованиеТоваров.Ссылка
	|ИЗ
	|	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
	|ГДЕ
	|	ОприходованиеТоваров.Дата >= &ДатаНач
	|	И ОприходованиеТоваров.ИнвентаризацияТоваровНаСкладе = ЗНАЧЕНИЕ(Документ.ИнвентаризацияТоваровНаСкладе.ПустаяСсылка)
	|	И (ОприходованиеТоваров.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный)
	|			ИЛИ ОприходованиеТоваров.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НеоплаченныйКапитал))
	|	И ОприходованиеТоваров.ПризнаватьЗатратыВНУ = ЛОЖЬ
	|	И ОприходованиеТоваров.ОтражатьВБухгалтерскомУчете = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Объект.ПризнаватьЗатратыВНУ = Истина;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьФлагПризнаватьЗатратыВНУОприходованиеТоваров

// Процедуры перехода на 1.3.18

Процедура СоздатьНоменклатуруГТД() Экспорт

	СтрСообщения = "Заполняется справочник ""Номенклатура ГТД""";
	ОбщегоНазначения.Сообщение(СтрСообщения, СтатусСообщения.Обычное);
	
	// пройдемся по справочнику Номенклатура. Будем создавать элементы подчиненного справочника "Номенклатура ГТД" по данным удаленного реквизита КодУКТВЭД.
	// если уже имеется такой элемент - новый не создаем.
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.УДАЛИТЬКодУКТВЭД КАК КодУКТВЭД
	               |ПОМЕСТИТЬ ВременнаяТаблица
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	НЕ Номенклатура.УДАЛИТЬКодУКТВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторУКТВЭД.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	Характеристики.Владелец,
	               |	Характеристики.УДАЛИТЬКодУКТВЭД
	               |ИЗ
	               |	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	               |ГДЕ
	               |	НЕ Характеристики.УДАЛИТЬКодУКТВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторУКТВЭД.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.КодУКТВЭД
	               |ИЗ
	               |	ВременнаяТаблица КАК Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГТД КАК НоменклатураГТД
	               |		ПО Номенклатура.Ссылка = НоменклатураГТД.Владелец
	               |			И Номенклатура.КодУКТВЭД = НоменклатураГТД.КодУКТВЭД
	               |ГДЕ
	               |	НоменклатураГТД.Ссылка ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НоменклатураГТД = Справочники.НоменклатураГТД.СоздатьЭлемент();
		НоменклатураГТД.КодУКТВЭД = Выборка.КодУКТВЭД;
		НоменклатураГТД.Владелец  = Выборка.Ссылка;
		НоменклатураГТД.Записать();
	
	КонецЦикла;

	СтрСообщения = "Заполняется реквизит справочников ""Номенклатура ГТД""";
	ОбщегоНазначения.Сообщение(СтрСообщения, СтатусСообщения.Обычное);
	
	// теперь пройдемся по справочникам Номенклатура и Характеристики и заполним пустые реквизиты Номенклатура ГТД
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.Ссылка КАК ВладелецНоменклатурыГТД,
	               |	Номенклатура.УДАЛИТЬКодУКТВЭД КАК КодУКТВЭД
	               |ПОМЕСТИТЬ ВременнаяТаблица
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	НЕ Номенклатура.УДАЛИТЬКодУКТВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторУКТВЭД.ПустаяСсылка)
	               |	И Номенклатура.НоменклатураГТД = ЗНАЧЕНИЕ(Справочник.НоменклатураГТД.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Характеристики.Ссылка,
	               |	Характеристики.Владелец,
	               |	Характеристики.УДАЛИТЬКодУКТВЭД
	               |ИЗ
	               |	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	               |ГДЕ
	               |	НЕ Характеристики.УДАЛИТЬКодУКТВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторУКТВЭД.ПустаяСсылка)
	               |	И Характеристики.НоменклатураГТД = ЗНАЧЕНИЕ(Справочник.НоменклатураГТД.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	МАКСИМУМ(НоменклатураГТД.Ссылка) КАК НоменклатураГТД
	               |ИЗ
	               |	ВременнаяТаблица КАК Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГТД КАК НоменклатураГТД
	               |		ПО Номенклатура.ВладелецНоменклатурыГТД = НоменклатураГТД.Владелец
	               |			И Номенклатура.КодУКТВЭД = НоменклатураГТД.КодУКТВЭД
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Номенклатура.Ссылка";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Спр = Выборка.Ссылка.ПолучитьОбъект();
		
		Спр.НоменклатураГТД = Выборка.НоменклатураГТД;
		Спр.ОбменДанными.Загрузка = Истина;
		Спр.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры // СоздатьНоменклатуруГТД

// Процедуры перехода на 1.3.19

Процедура ЗаполнитьНормыДляПятойИШестойГруппЕН() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыНалоговогоУчета.Период
	|ИЗ
	|	РегистрСведений.ПараметрыНалоговогоУчета КАК ПараметрыНалоговогоУчета
	|ГДЕ
	|	ПараметрыНалоговогоУчета.Период > &Период";
	
	Запрос.УстановитьПараметр("Период", Дата('20111231235959')); 
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.ПараметрыНалоговогоУчета.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Выборка.Период;
		
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.ОбъемДоходаЕНПятаяГруппа  = 20000000;
		МенеджерЗаписи.ОбъемДоходаЕНШестаяГруппа = 20000000;
		
		Попытка
			МенеджерЗаписи.Записать(Истина);
		Исключение
			// Сообщаем только, если не удалось создать запись при "замещении"
			ОбщегоНазначения.Сообщение(НСтр("ru='В регистре сведений ""Параметры налогового учета"" не удалось записать объем дохода для плательщиков Единого налога';uk='У регістрі відомостей ""Параметри податкового обліку"" не вдалося записати обсяг доходу для платників Єдиного податку'"));
			Продолжить;
		КонецПопытки;	

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНормыДляПятойИШестойГруппЕН

// Процедуры перехода на 1.3.20

Процедура ЗаполнитьСчетКорректировкиНДСДокументаПерерасчетаНДС() Экспорт

	Сч6443 = ПланыСчетов.Хозрасчетный.КорректировкиНалоговогоКредита;
	Выборка = Документы.ПерерасчетПропорциональногоНДСпоТоварамИОС.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Док = Выборка.ПолучитьОбъект();
		Док.СчетКорректировкиНДС = Сч6443;
		Док.ОбменДанными.Загрузка = Истина;
		Попытка
			Док.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ОбщегоНазначения.Сообщение(НСтр("ru='Не удалось обновить документ ""Перерасчет пропорционального НДС по товарам и ОС"": ';uk='Не вдалося оновити документ ""Перерахунок пропорційного ПДВ за товарами та ОЗ"": '") + Док);	
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьРегистрСведенийПараметрыНалоговогоУчета() Экспорт
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ПараметрыНалоговогоУчета");
КонецПроцедуры // ОбновитьРегистрСведенийПараметрыНалоговогоУчета

// Процедуры перехода на 1.3.23

Процедура ДобавитьНалоговоеНазначениеПрограммнаяПродукция() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыНалоговойДеятельности");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СтавкиНалогаНаПрибыль");
	
КонецПроцедуры // ДобавитьНалоговоеНазначениеПрограммнаяПродукция

Процедура ПроверитьВидКонтактнойИнформацииФаксОрганизации() Экспорт
	
	Если Справочники.ВидыКонтактнойИнформации.ФаксОрганизации.ВидОбъектаКонтактнойИнформации <> Перечисления.ВидыОбъектовКонтактнойИнформации.Организации Тогда
		УстановитьПараметрыВидаКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
	КонецЕсли;		
	
КонецПроцедуры // ПроверитьВидКонтактнойИнформацииФаксОрганизации

Процедура ОбновитьРегистрСведенийШкалаСтавокНалогов() Экспорт
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
КонецПроцедуры // ОбновитьРегистрСведенийШкалаСтавокНалогов

// Процедуры перехода на 1.3.25

// Процедура дозаполняет регистры сведений 
// ПараметрыУчетаКурсовыхРазниц и МонетарныеСтатьиВВалютеКромеОперационных при переходе на 1.3.25
// чтобы курсовые разницы по обязательствам учредителей могли отражаться на счете 423 (после приказа Минфина 627)
Процедура ОбработатьРегистрыСведенийНастройкиКурсовыхРазниц() Экспорт
	
	НаборЗаписейПараметры = РегистрыСведений.ПараметрыУчетаКурсовыхРазниц.СоздатьНаборЗаписей();
	НаборЗаписейПараметры.Прочитать();
	НаборЗаписейПараметрыБылИзменен = Ложь;
	Для каждого Запись Из НаборЗаписейПараметры Цикл
		Если НЕ ЗначениеЗаполнено(Запись.СчетКапитала) Тогда
			Запись.СчетКапитала = ПланыСчетов.Хозрасчетный.НакопленныеКурсовыеРазницыВКапитале;
			НаборЗаписейПараметрыБылИзменен = Истина;
		КонецЕсли; 
	КонецЦикла; 
	Если НаборЗаписейПараметрыБылИзменен Тогда
		НаборЗаписейПараметры.Записать();
	КонецЕсли;
	
	НаборЗаписейСтатьи = РегистрыСведений.МонетарныеСтатьиВВалютеКромеОперационных.СоздатьНаборЗаписей();
	НаборЗаписейСтатьи.Прочитать();
	НаборЗаписейСтатьиБылИзменен = Ложь;
	Для каждого Запись Из НаборЗаписейСтатьи Цикл
		Если НЕ ЗначениеЗаполнено(Запись.ВидМонетарнойСтатьи) Тогда
			Запись.ВидМонетарнойСтатьи = Перечисления.ВидыМонетарныхСтатейВВалюте.НеоперационнаяДеятельность;
			НаборЗаписейСтатьиБылИзменен = Истина;
		КонецЕсли; 
	КонецЦикла; 
	Если НаборЗаписейСтатьиБылИзменен Тогда
		НаборЗаписейСтатьи.Записать();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРегистрыСведенийНастройкиКурсовыхРазниц

Процедура ОбновитьРегистрСведенийНемонетарныеСчета() Экспорт
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "НемонетарныеСчета");
КонецПроцедуры // ОбновитьРегистрСведенийНемонетарныеСчета

// Процедуры перехода на 1.3.26

Процедура ОбновитьСтавкиНалогаНаПрибыль2014() Экспорт
	
	// Ставки налога на прибыль на 2014-2016 гг.
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СтавкиНалогаНаПрибыль");
	
	
	ТекущаяЗапись = РегистрыСведений.СтавкиНалогаНаПрибыль.СоздатьМенеджерЗаписи();
	ТекущаяЗапись.Период = "20140101";
	ТекущаяЗапись.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.ОблагаемаяПоОбычнойСтавке;
	ТекущаяЗапись.Ставка = 18;
	ТекущаяЗапись.Записать(Истина);
	
КонецПроцедуры // ОбновитьСтавкиНалогаНаПрибыль2014()

// Процедура дозаполняет регистры сведений 
// ПараметрыУчетаКурсовыхРазниц и МонетарныеСтатьиВВалютеКромеОперационных при переходе на 1.3.26
// чтобы курсовые разницы по обязательствам учредителей могли отражаться на счете 425 (после приказа Минфина 627)
Процедура ОбработатьРегистрыСведенийНастройкиКурсовыхРазниц425() Экспорт
	
	НаборЗаписейПараметры = РегистрыСведений.ПараметрыУчетаКурсовыхРазниц.СоздатьНаборЗаписей();
	НаборЗаписейПараметры.Прочитать();
	НаборЗаписейПараметрыБылИзменен = Ложь;
	Для каждого Запись Из НаборЗаписейПараметры Цикл
		Если НЕ ЗначениеЗаполнено(Запись.СчетКапитала) ИЛИ (Запись.СчетКапитала = ПланыСчетов.Хозрасчетный.НакопленныеКурсовыеРазницыВКапитале) Тогда
			Запись.СчетКапитала = ПланыСчетов.Хозрасчетный.ДругойДополнительныйКапитал;
			НаборЗаписейПараметрыБылИзменен = Истина;
		КонецЕсли; 
	КонецЦикла; 
	Если НаборЗаписейПараметрыБылИзменен Тогда
		НаборЗаписейПараметры.Записать();
	КонецЕсли;
	
	НаборЗаписейСтатьи = РегистрыСведений.МонетарныеСтатьиВВалютеКромеОперационных.СоздатьНаборЗаписей();
	НаборЗаписейСтатьи.Прочитать();
	НаборЗаписейСтатьиБылИзменен = Ложь;
	Для каждого Запись Из НаборЗаписейСтатьи Цикл
		Если НЕ ЗначениеЗаполнено(Запись.ВидМонетарнойСтатьи) Тогда
			Запись.ВидМонетарнойСтатьи = Перечисления.ВидыМонетарныхСтатейВВалюте.НеоперационнаяДеятельность;
			НаборЗаписейСтатьиБылИзменен = Истина;
		КонецЕсли; 
	КонецЦикла; 
	Если НаборЗаписейСтатьиБылИзменен Тогда
		НаборЗаписейСтатьи.Записать();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРегистрыСведенийНастройкиКурсовыхРазниц425

// Процедуры перехода на 1.3.28

// Процедура загружает настройки предопределенных вариантов нового отчета ВаловаяПрибыльРасширеннаяАналитика
Процедура ОбновитьНастройкиОтчетов1_3_28() Экспорт
	
	ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("ВаловаяПрибыльРасширеннаяАналитика_УпрУчетВВалютеУпрУчета",   "ВаловаяПрибыльРасширеннаяАналитика");
	ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("ВаловаяПрибыльРасширеннаяАналитика_РеглУчетВВалютеРеглУчета", "ВаловаяПрибыльРасширеннаяАналитика");
	ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("ВаловаяПрибыльРасширеннаяАналитика_РеглУчетВВалютеУпрУчета",  "ВаловаяПрибыльРасширеннаяАналитика");
	
КонецПроцедуры // ОбновитьНастройкиОтчетов1_3_28

Процедура ОбновитьРегистрСведенийПереводыТекстов() Экспорт
	Локализация.ОбновитьРегистрСведенийПереводыТекстовИзМакетаНачальногоЗаполнения();
КонецПроцедуры // ОбновитьРегистрСведенийПереводы

// Процедуры перехода на 1.3.33

Процедура УдалитьСубконтоСкладыНаСчете0222() Экспорт
	
	Счет0222 		  = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве;
	Счет0222Объект    = Счет0222.ПолучитьОбъект();
	ВидСубконтоСклады = Счет0222Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик["ВидыСубконтоХозрасчетные"].Склады, "ВидСубконто");
	
	Если ВидСубконтоСклады <> Неопределено Тогда
		Счет0222Объект.ВидыСубконто.Удалить(ВидСубконтоСклады);
		Счет0222Объект.ОбменДанными.Загрузка = Истина;
		Счет0222Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры // УдалитьСубконтоСкладыНаСчете0222

Функция ОбновитьКодЕдиницыИзмерения(Код, КодНовый)

	Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);

	Если НЕ Ссылка.Пустая() Тогда
		СправочникОбъект 		= Ссылка.ПолучитьОбъект();
		СправочникОбъект.Код 	= КодНовый;
		ЗаписатьСправочникОбъект(СправочникОбъект);
	КонецЕсли;

КонецФункции // ОбновитьКодЕдиницыИзмерения

Процедура КлассификаторЕдиницИзмеренияОбновитьКодыКСПОВО() Экспорт
	
	ОбновитьКодЕдиницыИзмерения("796", "2009");
	ОбновитьКодЕдиницыИзмерения("166", "0301");
	
КонецПроцедуры // КлассификаторЕдиницИзмеренияОбновитьКодыКСПОВО

Процедура ИзменениеНалоговогоНазначенияОСЗаполнитьФлагПересчетаНакопленнойАмортизации() Экспорт

	// ИзменениеНалоговогоНазначенияОС
	Выборка = Документы.ИзменениеНалоговогоНазначенияОС.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписыватьОбъект = Ложь;
		Объект = Выборка.ПолучитьОбъект();
		
		Если Объект.ПересчитыватьНакопленнуюАмортизациюВСвязиСКорректировкойНК = Ложь Тогда
			ЗаписыватьОбъект = Истина;
			Объект.ПересчитыватьНакопленнуюАмортизациюВСвязиСКорректировкойНК = Истина;
		КонецЕсли;
		
		Если ЗаписыватьОбъект Тогда
			Объект.ОбменДанными.Загрузка = Истина;
			Попытка
				Объект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ОбщегоНазначения.СообщитьИнформациюПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось обработать документ: %1!'; uk = 'Не вдалося обробити документ: %1!'"), Объект));	
			КонецПопытки; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедуры перехода на 1.3.34

Процедура ОбновитьРегистрСведенийПраздники() Экспорт
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "Праздники");
КонецПроцедуры // ОбновитьРегистрСведенийПраздники

Процедура ОбновитьРегистрСведенийИндексИнфляции() Экспорт
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ИндексИнфляции");
КонецПроцедуры // ОбновитьРегистрСведенийИндексИнфляции

// Процедуры перехода на 1.3.36

Процедура ОбработатьЗаписиУчетнойПолитикиПоЕдиномуНалогуВерсия1_3_36() Экспорт
	
	Запрос = Новый Запрос;
	
	СхемыНалогообложенияЕдиныйНалог = Новый Массив;
	СхемыНалогообложенияЕдиныйНалог.Добавить(Справочники.СхемыНалогообложения.ЕдиныйНалог);
	СхемыНалогообложенияЕдиныйНалог.Добавить(Справочники.СхемыНалогообложения.ЕдиныйНалогИНДС);
	
	ГруппыПлательщикаЕдиногоНалогаДляЗамены = Новый Массив;
	ГруппыПлательщикаЕдиногоНалогаДляЗамены.Добавить(Перечисления.ГруппыПлательщиковЕдиногоНалога.ЧетвертаяГруппа);
	ГруппыПлательщикаЕдиногоНалогаДляЗамены.Добавить(Перечисления.ГруппыПлательщиковЕдиногоНалога.ПятаяГруппа);
	ГруппыПлательщикаЕдиногоНалогаДляЗамены.Добавить(Перечисления.ГруппыПлательщиковЕдиногоНалога.ШестаяГруппа);
	
	Запрос.УстановитьПараметр("Период", '20150101');
	Запрос.УстановитьПараметр("СхемыНалогообложенияЕдиныйНалог", СхемыНалогообложенияЕдиныйНалог);
	Запрос.УстановитьПараметр("ГруппыПлательщикаЕдиногоНалогаДляЗамены", ГруппыПлательщикаЕдиногоНалогаДляЗамены);
	
	// В существующих записях учетной политики за 2015 год заменяем 4-6 группу на 3-ю
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период,
	|	УчетнаяПолитикаОрганизаций.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.Период >= &Период
	|	И УчетнаяПолитикаОрганизаций.СхемаНалогообложения В(&СхемыНалогообложенияЕдиныйНалог)
	|	И УчетнаяПолитикаОрганизаций.ГруппаПлательщикаЕдиногоНалога В(&ГруппыПлательщикаЕдиногоНалогаДляЗамены)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Выборка.Организация;
		МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.ГруппаПлательщикаЕдиногоНалога = Перечисления.ГруппыПлательщиковЕдиногоНалога.ТретьяГруппа;
		Попытка
			МенеджерЗаписи.Записать();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В записи учетной политики для организации ""%1"", на %2 группа плательщика единого налога заменена на ""%3""';uk=''"),
				МенеджерЗаписи.Организация, Формат(МенеджерЗаписи.Период, "ДФ=dd.MM.yyyy"), МенеджерЗаписи.ГруппаПлательщикаЕдиногоНалога);
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заменить группу плательщика единого налога в записи учетной политики (%2) для организации ""%1"" на ""%3""';uk=''"),
				МенеджерЗаписи.Организация, Формат(МенеджерЗаписи.Период, "ДФ=dd.MM.yyyy"), МенеджерЗаписи.ГруппаПлательщикаЕдиногоНалога);
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		КонецПопытки; 
		
	КонецЦикла;
	
	// Если записи в учетной политике за 2015 год нет, то для организации-единщика с 4-6 группой, создаем новую запись с 3-ей группой.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		УчетнаяПолитикаОрганизацийСрезПоследних.Организация КАК Организация,
	|		УчетнаяПолитикаОрганизацийСрезПоследних.Период КАК Период,
	|		ВЫБОР
	|			КОГДА НовыеЗаписи.Организация ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ КАК ЕстьНовыеЗаписи
	|	ИЗ
	|		РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|				ДОБАВИТЬКДАТЕ(&Период, СЕКУНДА, -1),
	|				СхемаНалогообложения В (&СхемыНалогообложенияЕдиныйНалог)
	|					И ГруппаПлательщикаЕдиногоНалога В (&ГруппыПлательщикаЕдиногоНалогаДляЗамены)) КАК УчетнаяПолитикаОрганизацийСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				УчетнаяПолитикаОрганизаций.Организация КАК Организация
	|			ИЗ
	|				РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|			ГДЕ
	|				УчетнаяПолитикаОрганизаций.Период >= &Период) КАК НовыеЗаписи
	|			ПО УчетнаяПолитикаОрганизацийСрезПоследних.Организация = НовыеЗаписи.Организация) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ ВложенныйЗапрос.ЕстьНовыеЗаписи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Выборка.Организация;
		МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписиНоваяЗапись = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиНоваяЗапись, МенеджерЗаписи);
		
		МенеджерЗаписиНоваяЗапись.ГруппаПлательщикаЕдиногоНалога = Перечисления.ГруппыПлательщиковЕдиногоНалога.ТретьяГруппа;
		МенеджерЗаписиНоваяЗапись.Период = '20150101';
		Попытка
			МенеджерЗаписиНоваяЗапись.Записать();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Создана запись учетной политики для организации ""%1"", на %2 группа плательщика единого налога установлена ""%3""';uk=''"),
				МенеджерЗаписиНоваяЗапись.Организация, Формат(МенеджерЗаписиНоваяЗапись.Период, "ДФ=dd.MM.yyyy"), МенеджерЗаписиНоваяЗапись.ГруппаПлательщикаЕдиногоНалога);
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
  		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось создать запись учетной политики для организации ""%1"", на %2 с группой плательщика единого налога ""%3""';uk=''"),
				МенеджерЗаписиНоваяЗапись.Организация, Формат(МенеджерЗаписиНоваяЗапись.Период, "ДФ=dd.MM.yyyy"), МенеджерЗаписиНоваяЗапись.ГруппаПлательщикаЕдиногоНалога);
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
  		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработатьЗаписиУчетнойПолитикиПоЕдиномуНалогуВерсия1_3_36

Процедура НеоборотныеАктивыСообщитьОПроизводственныхОСВНУ() Экспорт

	ДатаНКУ2015 = глЗначениеПеременной("ДатаНКУ2015");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Период", 		ДатаНКУ2015);
	Запрос.УстановитьПараметр("НачалоПериода", 	ДатаНКУ2015);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ
	|	СнятыеСУчета
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета) И
	|	СостоянияОСОрганизаций.ДатаСостояния < &Период
	|	И СостоянияОСОрганизаций.Организация = &Организация 
	|;
	|
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияБУ.Организация КАК Организация,
	|	ПервоначальныеСведенияБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияБУ.ИнвентарныйНомер КАК ИнвентарныйНомер
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|            &НачалоПериода,
	|            Организация = &Организация И
	|            ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СнятыеСУчета)) КАК ПервоначальныеСведенияБУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация И
	|		            ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СнятыеСУчета)) КАК НачислениеАмортизации
	|		ПО ПервоначальныеСведенияБУ.ОсновноеСредство = НачислениеАмортизации.ОсновноеСредство
	|			И ПервоначальныеСведенияБУ.Организация = НачислениеАмортизации.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация И
	|		            ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СнятыеСУчета)) КАК НачислениеАмортизацииНУ
	|		ПО ПервоначальныеСведенияБУ.ОсновноеСредство = НачислениеАмортизацииНУ.ОсновноеСредство
	|			И ПервоначальныеСведенияБУ.Организация = НачислениеАмортизацииНУ.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ	
	|				РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация И
	|		            ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СнятыеСУчета)) КАК ПервоначальныеСведенияНУ
	|		ПО ПервоначальныеСведенияБУ.ОсновноеСредство = ПервоначальныеСведенияНУ.ОсновноеСредство
	|			И ПервоначальныеСведенияБУ.Организация = ПервоначальныеСведенияНУ.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ	
	|				РегистрСведений.НалоговыеНазначенияОС.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация И
	|		            ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СнятыеСУчета)) КАК НалоговыеНазначенияОС
	|		ПО ПервоначальныеСведенияБУ.ОсновноеСредство = НалоговыеНазначенияОС.ОсновноеСредство
	|			И ПервоначальныеСведенияБУ.Организация = НалоговыеНазначенияОС.Организация
	|ГДЕ
	|	НачислениеАмортизацииНУ.НачислятьАмортизацию
	|   И ПервоначальныеСведенияБУ.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Производственный)
	|   И НалоговыеНазначенияОС.НалоговоеНазначение <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность)
	|";
	
	ВыборкаОрганизации = Справочники.Организации.Выбрать();
	
	Пока ВыборкаОрганизации.Следующий() Цикл
	
		УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДатаНКУ2015, ВыборкаОрганизации.Ссылка);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) ИЛИ НЕ УчетнаяПолитикаРегл.ЕстьНалогНаПрибыль Тогда
			Продолжить;
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("Организация", ВыборкаОрганизации.Ссылка);
		
		ВыборкаПоОС = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаПоОС.Следующий() Цикл
			
			ОбщегоНазначения.СообщитьОбОшибке(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В организации ""%1"" основное средство ""%2"" (инв. номер %3) амортизируется производственным методом. Укажите другой метод амортизации в НУ (документ ""Изменение параметров начисления амортизации ОС""). '"), ВыборкаОрганизации.Ссылка, ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.ИнвентарныйНомер)));
			
		КонецЦикла;	
		
	КонецЦикла;	
		
КонецПроцедуры

Процедура НеоборотныеАктивыСообщитьОПроизводственныхНМАВНУ() Экспорт

	ДатаНКУ2015 = глЗначениеПеременной("ДатаНКУ2015");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Период", 		ДатаНКУ2015);
	Запрос.УстановитьПараметр("НачалоПериода", 	ДатаНКУ2015);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияНМАОрганизаций.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ
	|	СнятыеСУчета
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(&НачалоПериода) КАК СостоянияНМАОрганизаций
	|ГДЕ
	|	СостоянияНМАОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан)
	|	И СостоянияНМАОрганизаций.Организация = &Организация 
	|;
	|
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияБУ.Организация КАК Организация,
	|	ПервоначальныеСведенияБУ.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведенияБУ.НематериальныйАктив.Код КАК ИнвентарныйНомер
	|ИЗ
	|		РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация И
	|		            НематериальныйАктив НЕ В (ВЫБРАТЬ НематериальныйАктив ИЗ СнятыеСУчета)) КАК ПервоначальныеСведенияБУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ	
	|				РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация И
	|		            НематериальныйАктив НЕ В (ВЫБРАТЬ НематериальныйАктив ИЗ СнятыеСУчета)) КАК ПервоначальныеСведенияНУ
	|		ПО ПервоначальныеСведенияБУ.НематериальныйАктив = ПервоначальныеСведенияНУ.НематериальныйАктив
	|ГДЕ
	|	ПервоначальныеСведенияНУ.НачислятьАмортизацию
	|   И ПервоначальныеСведенияБУ.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.Производственный)
	|   И ПервоначальныеСведенияНУ.НалоговоеНазначение <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность)
	|";
	
	ВыборкаОрганизации = Справочники.Организации.Выбрать();
	
	Пока ВыборкаОрганизации.Следующий() Цикл
	
		УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДатаНКУ2015, ВыборкаОрганизации.Ссылка);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) ИЛИ НЕ УчетнаяПолитикаРегл.ЕстьНалогНаПрибыль Тогда
			Продолжить;
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("Организация", ВыборкаОрганизации.Ссылка);
		
		ВыборкаПоНМА = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаПоНМА.Следующий() Цикл
			
			ОбщегоНазначения.СообщитьОбОшибке(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В организации ""%1"" нематериальный актив ""%2"" (%3) амортизируется производственным методом. Укажите другой метод амортизации в НУ (документ ""Изменение параметров начисления амортизации НМА""). '"), ВыборкаОрганизации.Ссылка, ВыборкаПоНМА.НематериальныйАктив, СокрЛП(ВыборкаПоНМА.ИнвентарныйНомер)));
			
		КонецЦикла;	
		
	КонецЦикла;	
		
КонецПроцедуры


// Процедуры перехода на 1.3.38

Процедура ПреобразоватьКодыФилиалаДляЗвит() Экспорт

	СтрСообщения = НСтр("ru = 'Обрабатывается справочник ""Контрагенты"" - реквизит ""Код филиала для выгрузки в 1С:Звіт""'");
	ОбщегоНазначения.Сообщение(СтрСообщения, СтатусСообщения.Обычное);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.КодФилиала = ""0""";
				   
	ВыборкаКонтрагентов = Запрос.Выполнить().Выбрать();				   
	
	Пока ВыборкаКонтрагентов.Следующий() Цикл
	
		Объект = ВыборкаКонтрагентов.Ссылка.ПолучитьОбъект();
		Объект.КодФилиала = "";
		Попытка
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		Исключение
			Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось обработать контрагента: %1!'; uk = 'Не вдалося обробити контрагента: %1!'"), Объект));
		КонецПопытки;
	
	КонецЦикла;
	
	СтрСообщения = "";
	ОбщегоНазначения.Сообщение(СтрСообщения, СтатусСообщения.Обычное);
	
КонецПроцедуры

// Процедуры перехода на 1.3.41

// Если дата документа и дата входящего налогового документа после 01.07.2015 
// на налоговый кредит относятся все суммы входящего НДС, однако
// если приобретение осуществляется для не облагаемых/не хоз. операций, необходимо оформить условную продажу.
// Обработчик обновления перепроводит необходимые документы ЗаписьКнигиПриобретения и ГТДИмпорт.
// После перепроведения формируются записи по рн ОжидаемыйИПодтвержденныйНДСПродаж на условную продажу
// Сама условная продажа оформляется документом НалоговаяНакладная
Процедура ПерепровестиДокументыУсловныхПродаж() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписьКнигиПриобретенияТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаписьКнигиПриобретения.Товары КАК ЗаписьКнигиПриобретенияТовары
	|ГДЕ
	|	ЗаписьКнигиПриобретенияТовары.Ссылка.Дата >= &ДатаНач
	|	И ЗаписьКнигиПриобретенияТовары.Ссылка.Проведен
	|	И ЗаписьКнигиПриобретенияТовары.СуммаНДС > 0
	|	И ЗаписьКнигиПриобретенияТовары.НалоговоеНазначение В(&НалоговыеНазначенияБезКредита)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГТДИмпорт.Ссылка
	|ИЗ
	|	Документ.ГТДИмпорт.Товары КАК ГТДИмпорт
	|ГДЕ
	|	ГТДИмпорт.Ссылка.Дата >= &ДатаНач
	|	И ГТДИмпорт.Ссылка.Проведен
	|	И ГТДИмпорт.СуммаНДС > 0
	|	И ГТДИмпорт.НалоговоеНазначение В(&НалоговыеНазначенияБезКредита)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГТДИмпорт.Ссылка
	|ИЗ
	|	Документ.ГТДИмпорт.Оборудование КАК ГТДИмпорт
	|ГДЕ
	|	ГТДИмпорт.Ссылка.Дата >= &ДатаНач
	|	И ГТДИмпорт.Ссылка.Проведен
	|	И ГТДИмпорт.СуммаНДС > 0
	|	И ГТДИмпорт.НалоговоеНазначение В(&НалоговыеНазначенияБезКредита)
	|
	|";
	
	Запрос.УстановитьПараметр("ДатаНач", глЗначениеПеременной("ДатаВступленияВСилуЗУ643"));
	
	НалоговыеНазначенияБезКредита = Новый Массив();
	НалоговыеНазначенияБезКредита.Добавить(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
	НалоговыеНазначенияБезКредита.Добавить(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность);
	НалоговыеНазначенияБезКредита.Добавить(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально);
	Запрос.УстановитьПараметр("НалоговыеНазначенияБезКредита", НалоговыеНазначенияБезКредита);
	
	ВыборкаЗКП = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗКП.Следующий() Цикл
		
		ДокументОбъект = ВыборкаЗКП.Ссылка.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		    Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось обновить движения (перепровести) документ %1!'"), ДокументОбъект));
		КонецПопытки;

	КонецЦикла;
	
КонецПроцедуры // ПерепровестиДокументыУсловныхПродаж

// Процедуры перехода на 1.3.42

Процедура ОбновитьСправочникНалоговыеНазначенияАктивовИЗатрат() Экспорт
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "НалоговыеНазначенияАктивовИЗатрат");
КонецПроцедуры // ОбновитьСправочникНалоговыеНазначенияАктивовИЗатрат

Процедура ОбновитьСинонимыСправочниковВерсия1_3_42() Экспорт
	ЗаполнениеСинонимов = Обработки.ЗаполнениеСинонимовОбъектов.Создать();
	ЗаполнениеСинонимов.ЯзыкИнформационнойБазы = Локализация.КодЯзыкаИнформационнойБазы();
	ЗаполнениеСинонимов.ЗаполнитьОбъект("Справочник", "СтатьиДоходов");
	ЗаполнениеСинонимов.ЗаполнитьОбъект("Справочник", "СтатьиЗатрат");
КонецПроцедуры // ОбновитьСинонимыСправочниковВерсия1_3_41

// Устанавливает флаги УчетПоНалоговымНазначениямНДС и УчетСуммНУ хозрасчетным счетам для налогового учета с 2015
Процедура УстановитьПараметрыСчетовБУНалоговыйУчетС2015() Экспорт
	
	НачатьТранзакцию();
	
	СчетаУчетСуммНУ = Новый Массив;
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.ДругиеНеоборотныеМатериальныеАктивыГруппа);
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.ИзносАмортизацияНеоборотныхАктивов);
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.НеоборотныеАктивыИГруппыВыбытияУдерживаемыеДляПродажи);
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	
	СчетаУчетПоНалоговымНазначениямНДС = Новый Массив;
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ДругиеНеоборотныеМатериальныеАктивыГруппа);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ИзносАмортизацияНеоборотныхАктивов);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.КапитальныеИнвестиции);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.МалоценныеИБыстроизнашивающиесяПредметы);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.Производство);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ПродукцияСельскохозяйственногоПроизводства);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыПоЭлементам);
	Если НЕ БухгалтерскийУчет.ПолучитьИспользоватьКлассыСчетовВКачествеГрупп() Тогда
		СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЗатраты);
		СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыНаОплатуТруда);
		СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ОтчисленияНаСоциальныеМероприятия);
		СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.Амортизация);
		СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ДругиеОперационныеЗатраты);
		СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыПоЭлементам);
	КонецЕсли; 

	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл
		
		Объект = ВыборкаСчетов.Ссылка.ПолучитьОбъект();
		
		Объект.УчетСуммНУ = Ложь;
		Объект.УчетПоНалоговымНазначениямНДС = Ложь;
		
		Если Объект.НалоговыйУчет Тогда
			Если БухгалтерскийУчет.СчетПринадлежитРодителю(ВыборкаСчетов.Ссылка, СчетаУчетСуммНУ) Тогда
				Объект.УчетСуммНУ = Истина;
			КонецЕсли;
			Если БухгалтерскийУчет.СчетПринадлежитРодителю(ВыборкаСчетов.Ссылка, СчетаУчетПоНалоговымНазначениямНДС) Тогда
				Объект.УчетПоНалоговымНазначениямНДС = Истина;
			КонецЕсли;
		КонецЕсли; 
		
		Объект.Записать();

	КонецЦикла;

	ЗафиксироватьТранзакцию();

КонецПроцедуры // УстановитьПараметрыСчетовБУНалоговыйУчетС2015


// Процедуры перехода на 1.3.44

Процедура ОбновитьСтавкиНалогаНаПрибыль2016() Экспорт
	
	ТекущаяЗапись = РегистрыСведений.СтавкиНалогаНаПрибыль.СоздатьМенеджерЗаписи();
	ТекущаяЗапись.Период = "20150101";
	ТекущаяЗапись.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.ОблагаемаяПоОбычнойСтавке;
	ТекущаяЗапись.Ставка = 18;
	ТекущаяЗапись.Записать(Истина);
	
	ТекущаяЗапись = РегистрыСведений.СтавкиНалогаНаПрибыль.СоздатьМенеджерЗаписи();
	ТекущаяЗапись.Период = "20160101";
	ТекущаяЗапись.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.ОблагаемаяПоОбычнойСтавке;
	ТекущаяЗапись.Ставка = 18;
	ТекущаяЗапись.Записать(Истина);
	
	
КонецПроцедуры // ОбновитьСтавкиНалогаНаПрибыль2014()

// Процедуры перехода на 1.3.49

Процедура ПерезаполнитьРегистрСведенийНаборыСтатейНалоговыхДеклараций() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	НачальноеЗаполнение.ОчиститьПередЗаписью = Истина;
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "НаборыСтатейНалоговыхДеклараций");
	НачальноеЗаполнение.ОчиститьПередЗаписью = Ложь;  // Возврат значения по умолчанию, чтобы другие объекты не очищались

КонецПроцедуры // ПерезаполнитьРегистрСведенийНаборыСтатейНалоговыхДеклараций

