///////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ БСП

// Возвращает номер версии Библиотеки ЗУП (укр)
//
Функция ВерсияБиблиотеки()
	
	Возврат "2.1.46.2";
	
КонецФункции

// Возвращает список процедур-обработчиков обновления библиотеки
//
// Возвращаемое значение:
//   Структура - описание полей структуры см. в функции
//               ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления() 
Функция ОбработчикиОбновления()
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.20.3";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ПервыйЗапуск";
	
	ЭтоНеПериферияРИБ = Не ЗначениеЗаполнено(ПланыОбмена.ГлавныйУзел());
	
	// 2.1.25
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.25.3";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1317";
	Обработчик.Опциональный = Истина; 
	
	// 2.1.26
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.26.2";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1319";
	Обработчик.Опциональный = Истина; 

	// 2.1.28
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.28.1";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1321";
	Обработчик.Опциональный = Истина; 
	
	// 2.1.30
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.30.2";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1323";
	Обработчик.Опциональный = Истина;
	
	// 2.1.31
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.31.1";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1324";
	Обработчик.Опциональный = Истина;
	
	// 2.1.32
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.32.1";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1326";
	Обработчик.Опциональный = Истина;
	
	// 2.1.33
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.33.3";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1328";
	Обработчик.Опциональный = Истина;
	
	// 2.1.34
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.34.2";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1331";
	Обработчик.Опциональный = Истина;
	
	// 2.1.35
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.35.2";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1335";
	Обработчик.Опциональный = Истина;
	
	// 2.1.36
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.36.1";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1336";
	Обработчик.Опциональный = Истина;
	
	// 2.1.37
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.37.1";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1337";
	Обработчик.Опциональный = Истина;
	
	// 2.1.38
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.38.2";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1338";
	Обработчик.Опциональный = Истина;
	
	// 2.1.39
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.39.1";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1339";
	Обработчик.Опциональный = Истина;
	
	// 2.1.40
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.40.1";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1340";
	Обработчик.Опциональный = Истина;
	
	// 2.1.41
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.41.1";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1342";
	Обработчик.Опциональный = Истина;
	
	// 2.1.42
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.42.2";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1343";
	Обработчик.Опциональный = Истина;
	
	// 2.1.43
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.43.1";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1344";
	Обработчик.Опциональный = Истина;
	
	// 2.1.44
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.44.1";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1347";
	Обработчик.Опциональный = Истина;
	
	// 2.1.45
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.45.2";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1348";
	Обработчик.Опциональный = Истина;

	// 2.1.45
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.45.3";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1349";
	Обработчик.Опциональный = Истина;
	
	// 2.1.46
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.1.46.2";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбновлениеЗУП1354";
	Обработчик.Опциональный = Истина;
	
	
	Возврат Обработчики;
	
КонецФункции

Функция ПараметрыМакетаОписаниеОбновлений() Экспорт
	
	Параметры = Новый Структура;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
	Параметры.Вставить("ВариантыАлгоритмов", РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.РегистрыСведений.ВариантыАлгоритмовРасчетаЗарплаты, РегистрыСведений.ВариантыАлгоритмовРасчетаЗарплаты,, "ФормаСписка"));
		
	#КонецЕсли
	
	Возврат Параметры;
	
КонецФункции

// Неинтерактивное обновление данных ИБ при смене версии библиотеки
// Обязательная "точка входа" обновления ИБ в библиотеке.
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления(
		"ЗУП (укр)",
		ВерсияБиблиотеки(),
		ОбработчикиОбновления());
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ

Процедура ПервыйЗапуск() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// Первоначальное заполнение делаем только в главном узле.
		// Информация о версиях подсистем не мигрирует в составе РИБ
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	// Заполнение сведений по заработной плате и учету персонала
	УстановитьКонстанту("ОсновноеПредставлениеФизЛиц"             , Перечисления.ПредставленияФизЛиц.ФамилияИО);
	
	//Заполнить реквизиты предопределенных смен
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьПредопределенныеСмены();
	
	// Включить генерацию всех видов задач
	ПроцедурыОбновленияИнформационнойБазы.УстановитьИспользованиеВидовЗадачПользователей();
	
	// Заполнить предопределенные настройки отчетов
	ПроцедурыОбновленияИнформационнойБазы.ЗагрузитьНастройкиОтчетов();
	
	ЗаполнитьСтажВДняхСтажВЧасах();
	
	ЗаполнитьНачисленияДляПредварительногоРасчета();
	
	ЗаполнитьВариантыАлгоритмов();
	
	
КонецПроцедуры

// Процедура устанавливает указанное значение указанной константы и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура УстановитьКонстанту(ИмяКонстанты, ЗначениеКонстанты)

	Если Константы[ИмяКонстанты].Получить() = ЗначениеКонстанты Тогда
		Возврат;
	КонецЕсли;

	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);

	СтрСообщения = "Константе """ + Метаданные.Константы[ИмяКонстанты].Синоним + """ "
	             + "назначено значение """ + ЗначениеКонстанты + """";

	ОбщегоНазначения.Сообщение(СтрСообщения, СтатусСообщения.Обычное);

КонецПроцедуры // УстановитьКонстанту

///////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗУП

Процедура ЗаполнитьСтажВДняхСтажВЧасах()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета,
	               |	ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени
	               |ИЗ
	               |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
				   |ГДЕ ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени";
				   
	ТаблицаРабочеговремени = Запрос.Выполнить().Выгрузить();			   
	
	
	ВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СтажВДнях.ПолучитьОбъект();
	
	ВР.КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное;
	ВР.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
	ВР.ФормулаРасчета = "ИсходныеДанные.Показатель1";
	ВР.БазаПоНазначению = Истина;
	
	Показатель = ВР.Показатели.Добавить();
	Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБазаВремяВДнях;
	
	ВР.БазовыеВидыРасчета.Очистить();
	ВР.БазовыеВидыРасчета.Загрузить(ТаблицаРабочеговремени);
	
	ВР.Записать();
	
	ВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СтажВЧасах.ПолучитьОбъект();
	
	ВР.КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное;
	ВР.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
	ВР.ФормулаРасчета = "ИсходныеДанные.Показатель1";
	ВР.БазаПоНазначению = Истина;
	
	Показатель = ВР.Показатели.Добавить();
	Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБазаВремяВЧасах;
	
	ВР.БазовыеВидыРасчета.Очистить();
	ВР.БазовыеВидыРасчета.Загрузить(ТаблицаРабочеговремени);
	
	ВР.Записать();

	
КонецПроцедуры

Процедура ЗаполнитьНачисленияДляПредварительногоРасчета()
	
	НаборЗаписей = РегистрыСведений.НачисленияДляПредварительногоРасчета.СоздатьНаборЗаписей(); 

	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы; 

	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы; 
	
	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных;
	НоваяЗапись.ИспользоватьИзРегистров = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных;
	НоваяЗапись.ИспользоватьИзРегистров = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Замещение;
	
	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Совмещение; 
	
	НаборЗаписей.Записать();

	
КонецПроцедуры

Процедура ЗаполнитьВариантыАлгоритмов()
	
	НаборЗаписей = РегистрыСведений.ВариантыАлгоритмовРасчетаЗарплаты.СоздатьНаборЗаписей(); 
	Запись = НаборЗаписей.Добавить();
	Запись.РасчетНДФЛ17 = Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ДоначислениеНаСуммуПревышения;
	Запись.РасчетИндексацииПропорционально = Перечисления.ВариантыАлгоритмовРасчетИндексацииПропорционально.НеПрименять;
	Запись.ПорогИндексации103 = Перечисления.ВариантыАлгоритмовПорогИндексации103.ПрименятьС01012016;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ОбновлениеЗУП1317() Экспорт
	
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		//резерв отпусков
		СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ИспользованиеРезерваОтпусков.ПолучитьОбъект();
		СпособОтражения.СчетДт = ПланыСчетов.Хозрасчетный.ОбеспечениеВыплатОтпусков;
		СпособОтражения.Записать();
		
		//отражение больничных
		СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетПредприятия.ПолучитьОбъект();
		СпособОтражения.СчетДт = ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности;
		СпособОтражения.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам;
		СпособОтражения.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		СтатьяНД = Справочники.СтатьиНалоговыхДеклараций.НПНК_ИВ_Другие_;
		СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоРеквизиту("СтатьяДекларацииПоНалогуНаПрибыль",СтатьяНД);
		СпособОтражения.СубконтоДт1 = СтатьяЗатрат;
		СпособОтражения.Записать();
		СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетФСС.ПолучитьОбъект();
		СпособОтражения.СпособОтраженияЕСВФОТ = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетПредприятия;
		СпособОтражения.Записать();
		ВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛОрганизации.ПолучитьОбъект();
		ВР.СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетПредприятия;
		ВР.Записать();
				
		//отражение займов
		СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеУдержанийПоЗаймам.ПолучитьОбъект();
		СпособОтражения.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		СпособОтражения.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСРабочимиИСлужащимиПоДругимОперациям;
		СпособОтражения.Записать();

	
КонецПроцедуры	

Процедура ОбновлениеЗУП1319() Экспорт
	
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета",  "СреднийЗаработок"); 
	
КонецПроцедуры	

Процедура ОбновлениеЗУП1321() Экспорт
	
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ШкалаПочтовыхСборов"); 
		
		//Бюджет
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "МинимальнаяОплатаТруда");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ПрожиточныеМинимумы");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "РазмерыЛьготНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СтавкиНДФЛ");
		
		//Изменения по ЕСВ - судостроение
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "Налоги");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВзносыВФондыПоГруппам");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВидыРасчетовВзносовВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СведенияОВзносахВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СводОтчисленийВФондыНастройкиОтчета");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ОтражениеВзносовВРеглУчете");
		
КонецПроцедуры	

Процедура ОбновлениеЗУП1323() Экспорт
	
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		//Изменения по ЕСВ - декретные
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета",  "ВзносыВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "Налоги");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВидыРасчетовВзносовВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СведенияОВзносахВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СводОтчисленийВФондыНастройкиОтчета");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ОтражениеВзносовВРеглУчете");
		
		СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеДекретныхЗаСчетФСС.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(СпособОтражения, Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетФСС,,"Код, Наименование, Владелец");
		СпособОтражения.СубконтоДт1 = Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Берем;
		СпособОтражения.Записать();
		ВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам.ПолучитьОбъект();
		ВР.СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеДекретныхЗаСчетФСС;
		ВР.Записать();

		
КонецПроцедуры	

Процедура ОбновлениеЗУП1324() Экспорт
	
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
КонецПроцедуры	

Процедура ОбновлениеЗУП1326() Экспорт
	
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		
		//Обновления по НДФЛ с начала года
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "РазмерыЛьготНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СтавкиНДФЛ");

		ЧернобыльскийОтпуск = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ЧернобыльскийОтпуск;
		ВР_ЕСВ = ПланыВидовРасчета.ВзносыВФонды.ЕСВ.ПолучитьОбъект();
		Если ВР_ЕСВ.БазовыеВидыРасчета.Найти(ЧернобыльскийОтпуск) = Неопределено Тогда
			НоваяСтрока = ВР_ЕСВ.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = ЧернобыльскийОтпуск;
			ВР_ЕСВ.Записать();
		КонецЕсли;
		
        ВР_ЕСВФОТ = ПланыВидовРасчета.ВзносыВФонды.ЕСВФОТ.ПолучитьОбъект();
		Если ВР_ЕСВФОТ.БазовыеВидыРасчета.Найти(ЧернобыльскийОтпуск) = Неопределено Тогда
			НоваяСтрока = ВР_ЕСВФОТ.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = ЧернобыльскийОтпуск;
			ВР_ЕСВФОТ.Записать();
		КонецЕсли;
		
		ПростойПоСредней = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойПоСредней;
		Простой = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Простой;
        ОплатаПоЧасовомуТарифу = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой.ПолучитьОбъект();
		
		Если ОплатаПоЧасовомуТарифу.ВытесняющиеВидыРасчета.Найти(Простой) = Неопределено Тогда
			НоваяСтрока = ОплатаПоЧасовомуТарифу.ВытесняющиеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Простой;
			ОплатаПоЧасовомуТарифу.Записать();
		КонецЕсли;	
		
		Если ОплатаПоЧасовомуТарифу.ВытесняющиеВидыРасчета.Найти(ПростойПоСредней) = Неопределено Тогда
			НоваяСтрока = ОплатаПоЧасовомуТарифу.ВытесняющиеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = ПростойПоСредней;
			ОплатаПоЧасовомуТарифу.Записать();
		КонецЕсли;
		
КонецПроцедуры	

Процедура ОбновлениеЗУП1328() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
	//Ежемесячные обновления
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
КонецПроцедуры	

Процедура ОбновлениеЗУП1331() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
	//Ежемесячные обновления
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
	
	//Военный сбор
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ВидыДоходовНДФЛ");
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "Налоги");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СтавкиНДФЛ");
		
	СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеВоенногоСбора.ПолучитьОбъект();
	СпособОтражения.Наименование = НСтр("ru='Отражение военного сбора';uk='Відображення выйськового збору'",Локализация.КодЯзыкаИнформационнойБазы());
	СпособОтражения.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоОбязательнымПлатежам;
	СпособОтражения.СубконтоКт1 = Справочники.Налоги.ВоенныйСбор;
	СпособОтражения.Записать();
		
КонецПроцедуры	

Процедура ОбновлениеЗУП1335() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
	//Ежемесячные обновления
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
	//Реформа ЕСВ
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СведенияОВзносахВФонды");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ШкалаСтавокНалогов");
		
	//Реформа НДФЛ
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СтавкиНДФЛ");
		
	//Реформа больничных
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ШкалаВыслугиЛет");
		
	//Бюджет
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "МинимальнаяОплатаТруда");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ПрожиточныеМинимумы");
	
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ПричиныНетрудоспособности");
		
КонецПроцедуры	

Процедура ОбновлениеЗУП1336() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
	//Ежемесячные обновления
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");

	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "РазмерыЗаконодательноУстановленныхВыплат");
	
	ОтражениеВС = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеВоенногоСбора.ПолучитьОбъект();
	ОтражениеВС.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	ОтражениеВС.Записать();
		
КонецПроцедуры	

Процедура ОбновлениеЗУП1337() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
	//Ежемесячные обновления
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");

	// Новый праздник - День защитника Украины
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ВидыПраздников");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "Праздники");
	
	НаборЗаписей = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаКалендаря.Установить(Дата(2015,10,13));
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
   		Запись.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный;
		НаборЗаписей.Записать();	
	КонецЕсли;	
	
	НаборЗаписей.Отбор.ДатаКалендаря.Установить(Дата(2015,10,14));
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
		Запись.Пятидневка = 0;
		Запись.Шестидневка = 0;
		Запись.КалендарныеДни = 0;
   		Запись.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник;
		НаборЗаписей.Записать();	
	КонецЕсли	
		
КонецПроцедуры	

Процедура ОбновлениеЗУП1338() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
	//Ежемесячные обновления
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");

	//Оплата мобилизованным
	НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ОсновныеНачисленияОрганизаций");
	НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ВзносыВФонды");
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "Налоги");
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВидыРасчетовВзносовВФонды");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СведенияОВзносахВФонды");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
	
КонецПроцедуры	

Процедура ОбновлениеЗУП1339() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
	//Ежемесячные обновления
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
	
	СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеЗарплатыМобилизованных.ПолучитьОбъект();
	СпособОтражения.Наименование = НСтр("ru='Отражение зарплаты мобилизованных';uk='Відображення зарплати мобілізованих'",Локализация.КодЯзыкаИнформационнойБазы());
	СпособОтражения.СчетДт = ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности;
	СпособОтражения.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам;
	СпособОтражения.СубконтоКт1 = "";
	СпособОтражения.Записать();
	
КонецПроцедуры	

Процедура ОбновлениеЗУП1340() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
	//Ежемесячные обновления
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
	
	//Оплата по среднему для больничных
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "КлассификаторИспользованияРабочегоВремени");
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ПричиныНетрудоспособности");
	ЗаполнитьНепредопределенныеБазовыеПоЗаработкуБЛФСС();
		
	НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "СреднийЗаработок");
		
	ЗаполнитьСтажВДняхСтажВЧасах();
	
КонецПроцедуры

Процедура ЗаполнитьНепредопределенныеБазовыеПоЗаработкуБЛФСС()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СреднийЗаработокБазовыеВидыРасчета.ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
	|ГДЕ
	|	СреднийЗаработокБазовыеВидыРасчета.ВидРасчета.Предопределенный = ЛОЖЬ
	|	И СреднийЗаработокБазовыеВидыРасчета.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛБерИРоды), 
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ), 
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛПропорционально))";
	
	ТаблицаБазовыхВидовРасчета = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаБазовыхВидовРасчета.Количество() > 0 Тогда
		НовыйПоЗаработкуБЛФСС = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛФСС.ПолучитьОбъект();
		НовыйПоЗаработкуБЛФСС.БазовыеВидыРасчета.Загрузить(ТаблицаБазовыхВидовРасчета);
		НовыйПоЗаработкуБЛФСС.Записать()
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеЗУП1342() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
	//Ежемесячные обновления
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
	
	//Бюджет
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "МинимальнаяОплатаТруда");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ПрожиточныеМинимумы");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СведенияОВзносахВФонды");
	
КонецПроцедуры

Процедура ОбновлениеЗУП1343() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
	//Ежемесячные обновления
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
	//Реформа ЕСВ
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СведенияОВзносахВФонды");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ШкалаСтавокНалогов");
		
	//Реформа НДФЛ
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СтавкиНДФЛ");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "РазмерыЛьготНДФЛ");
		
	//Бюджет
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "МинимальнаяОплатаТруда");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ПрожиточныеМинимумы");
		
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "КатегорииДолжностей");
КонецПроцедуры

Процедура ДополнитьБазуПоЗаработкуДляОтпуска()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СреднийЗаработокБазовыеВидыРасчета.ВидРасчета КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
	|ГДЕ
	|	СреднийЗаработокБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска)";
	
	ТаблицаБазовыхВидовРасчета = Запрос.Выполнить().Выгрузить();
	НайденнаяСтрока = ТаблицаБазовыхВидовРасчета.Найти(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю,"ВидРасчета");
	Если НайденнаяСтрока = Неопределено Тогда
		ПоЗаработкуДляОтпуска = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска.ПолучитьОбъект();
		НовыйБазовыйВидРасчета = ПоЗаработкуДляОтпуска.БазовыеВидыРасчета.Добавить();
		НовыйБазовыйВидРасчета.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю;
		Попытка
			ПоЗаработкуДляОтпуска.Записать();
		Исключение
			Сообщить("Не удалось обновить базовые виды расчета для "+ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры// Процедура выполняет начальное заполнение констант


Процедура ОбновлениеЗУП1344() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
	//Ежемесячные обновления
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");

	ДополнитьБазуПоЗаработкуДляОтпуска();
		
	//новый вариант алгоритмов
	НаборЗаписей = РегистрыСведений.ВариантыАлгоритмовРасчетаЗарплаты.СоздатьНаборЗаписей(); 
    НаборЗаписей.Прочитать();
	Для Каждого Запись из НаборЗаписей Цикл
		Запись.ПорогИндексации103 = Перечисления.ВариантыАлгоритмовПорогИндексации103.ПрименятьС01012016;
	КонецЦикла;	
	НаборЗаписей.Записать();
	
КонецПроцедуры


Процедура ЗаполнитьОплатаПоСреднемуМобОрганизации()
	
	ОплатаПосреднемуМобОрганизации = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПосреднемуМобОрганизации.ПолучитьОбъект();
	
	ОплатаПосреднемуМобОрганизации.КатегорияРасчета 						= Перечисления.КатегорииРасчетов.Первичное;
	ОплатаПосреднемуМобОрганизации.СпособРасчета							= Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку;
	ОплатаПосреднемуМобОрганизации.ОбозначениеВТабелеУчетаРабочегоВремени	= Справочники.КлассификаторИспользованияРабочегоВремени.НеотработанноеВремяПоЗаконодательству;
	ОплатаПосреднемуМобОрганизации.ВидВремени								= Перечисления.ВидыВремени.ЦелодневноеНеотработанное;
	ОплатаПосреднемуМобОрганизации.ЗачетОтработанногоВремени				= Ложь;
	ОплатаПосреднемуМобОрганизации.ЗачетНормыВремени						= Истина;
	ОплатаПосреднемуМобОрганизации.ЗачетКалендарных							= Истина;
	ОплатаПосреднемуМобОрганизации.ДоходНДФЛ								= Справочники.ВидыДоходовНДФЛ.Код01;
	ОплатаПосреднемуМобОрганизации.СчетУчета								= ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	ОплатаПосреднемуМобОрганизации.ЭтоЗарплатаМобилизованным				= Истина;
	ОплатаПосреднемуМобОрганизации.ПоказателиВидовОплатыТруда				= Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ;
	ОплатаПосреднемуМобОрганизации.Записать();
	
	ЕСВМобилизованные = ПланыВидовРасчета.ВзносыВФонды.ЕСВМобилизованные.ПолучитьОбъект();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВзносыВФондыБазовыеВидыРасчета.ВидРасчета КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ВзносыВФонды.БазовыеВидыРасчета КАК ВзносыВФондыБазовыеВидыРасчета
	|ГДЕ
	|	ВзносыВФондыБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ВзносыВФонды.ЕСВМобилизованные)";
	
	ТаблицаБазовыхВидовРасчета = Запрос.Выполнить().Выгрузить();
	
	НайденнаяСтрока = ТаблицаБазовыхВидовРасчета.Найти(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПосреднемуМобОрганизации,"ВидРасчета");
	Если НайденнаяСтрока = Неопределено Тогда
		
		НовыйБазовыйВидРасчета = ЕСВМобилизованные.БазовыеВидыРасчета.Добавить();
		НовыйБазовыйВидРасчета.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПосреднемуМобОрганизации;
		Попытка
			ЕСВМобилизованные.Записать();
		Исключение
			Сообщить("Не удалось обновить базовые виды расчета для "+ПланыВидовРасчета.ВзносыВФонды.ЕСВМобилизованные);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЕСВФОТМобилизованные()
	
	ЕСВФОТМобилизованные = ПланыВидовРасчета.ВзносыВФонды.ЕСВФОТМобилизованные.ПолучитьОбъект();
	ЕСВФОТМобилизованные.Наименование = НСтр("ru='ЕСВ ФОТ (мобилизованные)';uk='ЄСВ ФОП (мобілізовані)'",Локализация.КодЯзыкаИнформационнойБазы());	
	ЕСВФОТМобилизованные.СпособРасчета				= Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ;
	ЕСВФОТМобилизованные.ЕСВ						= Истина;
	ЕСВФОТМобилизованные.КатегорияРасчета   		= Перечисления.КатегорииРасчетов.Первичное;
	ЕСВФОТМобилизованные.СпособРасчетаПоШкале   	= Перечисления.СпособыРасчетаПоШкале.ПоШкале;
	ЕСВФОТМобилизованные.СтавкаПоПериодуРегистрации	= Истина;
	ЕСВФОТМобилизованные.Актуальность				= Истина;
	
	БазаЕСВМобилизованные = ПланыВидовРасчета.ВзносыВФонды.ЕСВМобилизованные.БазовыеВидыРасчета.Выгрузить();
	ЕСВФОТМобилизованные.БазовыеВидыРасчета.Загрузить(БазаЕСВМобилизованные);
	
	ВедущиеЕСВМобилизованные = ПланыВидовРасчета.ВзносыВФонды.ЕСВМобилизованные.ВедущиеВидыРасчета.Выгрузить();
	ЕСВФОТМобилизованные.ВедущиеВидыРасчета.Загрузить(ВедущиеЕСВМобилизованные);
	
	Попытка
		ЕСВФОТМобилизованные.Записать();
	Исключение
		Сообщить("Не удалось обновить базовые виды расчета для "+ПланыВидовРасчета.ВзносыВФонды.ЕСВФОТМобилизованные);
	КонецПопытки;

	
КонецПроцедуры

Процедура ОбновлениеЗУП1347() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
	//Ежемесячные обновления
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
	//Бюджет
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "МинимальнаяОплатаТруда");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ПрожиточныеМинимумы");
	//
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ШкалаПочтовыхСборов");
	//Отчет по ЕСВ
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "Налоги");
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "СтатьиНалоговыхДеклараций");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ВзносыВФондыПоГруппам");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ВидыРасчетовВзносовВФонды");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ОтражениеВзносовВРеглУчете");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СведенияОВзносахВФонды");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ШкалаСтавокНалогов");
	
	ЗаполнитьОплатаПоСреднемуМобОрганизации();
	ЗаполнитьЕСВФОТМобилизованные();
	
КонецПроцедуры


Процедура ДобавитьВытесняющийОплатаПоСреднемуМобОрганизации()
	
	Запрос = Новый Запрос;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТУжеДобавленныеВВытесняющие
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуМобОрганизации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуМоб)
	|	И НЕ ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТУжеДобавленныеВВытесняющие.Ссылка
	|				ИЗ
	|					ВТУжеДобавленныеВВытесняющие КАК ВТУжеДобавленныеВВытесняющие)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВидРасчета = Выборка.Ссылка.ПолучитьОбъект();
		НовыйВытесняющийВидРасчета = ВидРасчета.ВытесняющиеВидыРасчета.Добавить();
		НовыйВытесняющийВидРасчета.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПосреднемуМобОрганизации;
		Попытка
			ВидРасчета.Записать();
		Исключение
			Сообщить("Не удалось обновить вытесняющие виды расчета для " + Выборка.Ссылка);
		КонецПопытки;

	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеЗУП1348() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	
	//Ежемесячные обновления
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");

	//Бюджет
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "МинимальнаяОплатаТруда");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ПрожиточныеМинимумы");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "РазмерыЛьготНДФЛ");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СведенияОВзносахВФонды");
	
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ДополнительныеГарантииВСодействииТрудоустройству");
	
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СводОтчисленийВФондыНастройкиОтчета");
	
	НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета",  "УдержанияОрганизаций");
	
	ДобавитьВытесняющийОплатаПоСреднемуМобОрганизации();
	
КонецПроцедуры

Процедура ОбновлениеЗУП1349() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	
	//Ежемесячные обновления
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");

	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "МинимальнаяОплатаТруда");
	НачальноеЗаполнение.ЗаполнитьПланВидовРасчета("ОсновныеНачисленияОрганизаций", Истина, "ДоплатаДоМЗП");
	НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета",  "УдержанияОрганизаций", Истина);
	НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета",  "СреднийЗаработок", Истина);
	НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета",  "ВзносыВФонды", Истина);
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ПоказателиСхемМотивации");
	
КонецПроцедуры


Процедура ИзменитьЗаписиПроизводственногоКалендаря2017()
	
	НаборЗаписей = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаКалендаря.Установить(Дата(2017,12,25));
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
		Запись.Пятидневка = 0;
		Запись.Шестидневка = 0;
		Запись.КалендарныеДни = 0;
   		Запись.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник;
		НаборЗаписей.Записать();	
	КонецЕсли	

КонецПроцедуры

Процедура ОбновлениеЗУП1354() Экспорт
	
	НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	
	//Ежемесячные обновления
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");

	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ВидыОтпусков");

	//Праздники
	НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ВидыПраздников");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "Праздники");
	ИзменитьЗаписиПроизводственногоКалендаря2017();
		
	//Бюджет
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "МинимальнаяОплатаТруда");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ПрожиточныеМинимумы");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "РазмерыЛьготНДФЛ");
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СведенияОВзносахВФонды");
		
	//Пособие на погребение
	НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "РазмерыЗаконодательноУстановленныхВыплат");
	
КонецПроцедуры
