////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции обновления при переходе на налог на прибыль 2015

Функция ТекстЗапросаУчетЗатратРеглОстатки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 
	|	УчетЗатратОстатки.АналитикаВидаУчета,
	|   РегистрАналитикаВидаУчета.СчетУчета,
	|   РегистрАналитикаВидаУчета.НалоговоеНазначение,
	|	УчетЗатратОстатки.АналитикаУчетаЗатрат,
	|	УчетЗатратОстатки.АналитикаУчетаПартий,
	|	УчетЗатратОстатки.АналитикаРаспределенияЗатрат,
	|
	|	УчетЗатратОстатки.КоличествоОстаток КАК Количество,
	|	УчетЗатратОстатки.КоличествоНУОстаток КАК КоличествоНУ,
	|	УчетЗатратОстатки.СтоимостьОстаток КАК Стоимость,
	|	УчетЗатратОстатки.СтоимостьНУОстаток КАК СтоимостьНУ,
	|	УчетЗатратОстатки.НДСВходящийОстаток КАК НДСВходящий,
	|	УчетЗатратОстатки.НДСКредитОстаток КАК НДСКредит
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл.Остатки(
	|		&КонГраница
	|	) КАК УчетЗатратОстатки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|   ПО РегистрАналитикаВидаУчета.Ссылка = УчетЗатратОстатки.АналитикаВидаУчета
    |
	|ГДЕ
	|   РегистрАналитикаВидаУчета.СчетУчета.НалоговыйУчет И 
	|	((УчетЗатратОстатки.СтоимостьНУОстаток <> 0 И НЕ РегистрАналитикаВидаУчета.СчетУчета.УчетСуммНУ) ИЛИ
	|   (РегистрАналитикаВидаУчета.НалоговоеНазначение <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) И НЕ РегистрАналитикаВидаУчета.СчетУчета.УчетПоНалоговымНазначениямНДС))
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗакрытьНенужныеОстаткиРАУЗ()
	
	// конечные остатки с неиспользуемыми налоговыми назначениями и/или сумма НУ <> 0
	ТекстЗапроса = ТекстЗапросаУчетЗатратРеглОстатки();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ ");
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	ДатаКон = КонецДня(НачалоМесяца(глЗначениеПеременной("ДатаНКУ2015"))-1);
	Запрос.УстановитьПараметр("КонГраница", Новый Граница(ДатаКон, ВидГраницы.Включая));
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДокументКорректировкиЗаписейРегистров = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
		ДокументКорректировкиЗаписейРегистров.Дата = ДатаКон;
		// Заполнить реквизиты значениями по умолчанию
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументКорректировкиЗаписейРегистров);
		ДокументКорректировкиЗаписейРегистров.Комментарий = "Очистка неиспользуемых реквизитов по учету налога на прибыль до 2015 по регистру накопления УчетЗатратРегл"; 
		
		НоваяСтрока = ДокументКорректировкиЗаписейРегистров.ТаблицаРегистровНакопления.Добавить();
		НоваяСтрока.Имя = "УчетЗатратРегл";
		НоваяСтрока.Представление = "Учет затрат (бухгалтерский и налоговый учет)"; 
		
		ДокументКорректировкиЗаписейРегистров.Записать();
		
		НаборЗаписей = ДокументКорректировкиЗаписейРегистров.Движения["УчетЗатратРегл"];
		
		СтруктураКлючиАналитики = Новый Структура();
		СтруктураШапкиДокумента = Новый Структура();
		СтруктураШапкиДокумента.Вставить("Дата",   ДатаКон);
		СтруктураШапкиДокумента.Вставить("Ссылка", ДокументКорректировкиЗаписейРегистров.Ссылка);
		СтруктураШапкиДокумента.Вставить("РазмерНабораПриЗаписиРегистровУчетаЗатрат", глЗначениеПеременной("РазмерНабораПриЗаписиРегистровУчетаЗатрат"));
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СторноСтоимостьНУ                  = (Выборка.СтоимостьНУ <> 0 И НЕ БухгалтерскийУчетПовтИсп.УчетСуммНУСчет(Выборка.СчетУчета));
			ПереносНаПустоеНалоговоеНазначение = (Выборка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка() И НЕ БухгалтерскийУчетПовтИсп.УчетПоНалоговымНазначениямНДССчет(Выборка.СчетУчета));
			
			АналитикаВидаУчетаЗаполненноеНН    = Выборка.АналитикаВидаУчета;
			АналитикаУчетаЗатрат               = Выборка.АналитикаУчетаЗатрат;
			АналитикаУчетаПартий               = Выборка.АналитикаУчетаПартий;
			АналитикаРаспределенияЗатрат       = Выборка.АналитикаРаспределенияЗатрат;
			
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Активность = Истина;
			НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
			
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрока.КодОперации = Неопределено;
	
			НоваяСтрока.АналитикаВидаУчета              = АналитикаВидаУчетаЗаполненноеНН;
			НоваяСтрока.АналитикаУчетаЗатрат            = АналитикаУчетаЗатрат;
			НоваяСтрока.АналитикаУчетаПартий            = АналитикаУчетаПартий;
			НоваяСтрока.АналитикаРаспределенияЗатрат    = АналитикаРаспределенияЗатрат;
	
			НоваяСтрока.КорАналитикаВидаУчета           = Неопределено;
			НоваяСтрока.КорАналитикаУчетаЗатрат         = Неопределено;
			НоваяСтрока.КорАналитикаРаспределенияЗатрат = Неопределено;
			НоваяСтрока.КорАналитикаУчетаПартий         = Неопределено;
			
			Если СторноСтоимостьНУ И (НЕ ПереносНаПустоеНалоговоеНазначение) Тогда
				НоваяСтрока.Количество   = 0;
				НоваяСтрока.Стоимость    = 0;
				НоваяСтрока.КоличествоНУ = 0;
				НоваяСтрока.СтоимостьНУ  = -Выборка.СтоимостьНУ;
				НоваяСтрока.НДСВходящий  = 0;
				НоваяСтрока.НДСКредит    = 0;
			Иначе
				НоваяСтрока.Количество   = -Выборка.Количество;
				НоваяСтрока.Стоимость    = -Выборка.Стоимость;
				НоваяСтрока.КоличествоНУ = -Выборка.КоличествоНУ;
				НоваяСтрока.СтоимостьНУ  = -Выборка.СтоимостьНУ;
				НоваяСтрока.НДСВходящий  = -Выборка.НДСВходящий;
				НоваяСтрока.НДСКредит    = -Выборка.НДСКредит;
			КонецЕсли;	
			
			Если НаборЗаписей.Количество() = СтруктураШапкиДокумента.РазмерНабораПриЗаписиРегистровУчетаЗатрат Тогда
				НаборЗаписей.Записать(Ложь);
			КонецЕсли;
			
			Если ПереносНаПустоеНалоговоеНазначение Тогда
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Активность = Истина;
				НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
				
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяСтрока.КодОперации = Неопределено;
				
				АналитикаВидаУчетаПустоеНН = ПолучитьАналитикуВидаУчетаСНовымНалоговымНазначением(АналитикаВидаУчетаЗаполненноеНН, Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(), СтруктураКлючиАналитики, СтруктураШапкиДокумента);
		
				НоваяСтрока.АналитикаВидаУчета              = АналитикаВидаУчетаПустоеНН;
				НоваяСтрока.АналитикаУчетаЗатрат            = АналитикаУчетаЗатрат;
				НоваяСтрока.АналитикаУчетаПартий            = АналитикаУчетаПартий;
				НоваяСтрока.АналитикаРаспределенияЗатрат    = АналитикаРаспределенияЗатрат;
		
				НоваяСтрока.КорАналитикаВидаУчета           = Неопределено;
				НоваяСтрока.КорАналитикаУчетаЗатрат         = Неопределено;
				НоваяСтрока.КорАналитикаРаспределенияЗатрат = Неопределено;
				НоваяСтрока.КорАналитикаУчетаПартий         = Неопределено;
				
				НоваяСтрока.Количество   = Выборка.Количество;
				НоваяСтрока.Стоимость    = Выборка.Стоимость;
				НоваяСтрока.КоличествоНУ = Выборка.КоличествоНУ;
				НоваяСтрока.СтоимостьНУ  = Выборка.СтоимостьНУ;
				НоваяСтрока.НДСВходящий  = Выборка.НДСВходящий;
				НоваяСтрока.НДСКредит    = Выборка.НДСКредит;
				
				Если СторноСтоимостьНУ Тогда
					НоваяСтрока.СтоимостьНУ  = 0;
				КонецЕсли;	
				
				Если НаборЗаписей.Количество() = СтруктураШапкиДокумента.РазмерНабораПриЗаписиРегистровУчетаЗатрат Тогда
					НаборЗаписей.Записать(Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаборЗаписей.Модифицированность() Тогда
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры	// ЗакрытьНенужныеОстаткиРАУЗ()

Функция ПолучитьАналитикуВидаУчетаСНовымНалоговымНазначением(АналитикаВида, НовоеНалоговоеНазначение, СтруктураКлючиАналитики, СтруктураШапкиДокумента)
	
	КлючАналитики = УправлениеЗапасамиРасширеннаяАналитика.ПолучитьАналитикуПоКлючуАналитики("АналитикаВидаУчета", АналитикаВида, СтруктураКлючиАналитики);
	КлючАналитики.НалоговоеНазначение = НовоеНалоговоеНазначение;
	
	НоваяАналитикаВидаУчета = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		КлючАналитики,
		Перечисления.КлючиАналитики.АналитикаВидаУчета,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
		СтруктураКлючиАналитики
	);
	
	Возврат НоваяАналитикаВидаУчета;

КонецФункции // ПолучитьАналитикуВидаУчетаСНовымНалоговымНазначением()
 
Функция ТекстЗапросаХозрасчетныйОстатки()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХозрасчетныйОстатки.НалоговоеНазначение,
		|	ХозрасчетныйОстатки.Валюта,
		|	ХозрасчетныйОстатки.Организация КАК Организация,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.Субконто3,
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.СуммаНУОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница
		|			,
		|			Счет.НалоговыйУчет
		|				И (НЕ Счет.УчетСуммНУ
		|					ИЛИ НЕ Счет.УчетПоНалоговымНазначениямНДС),
		|			,
		|			) КАК ХозрасчетныйОстатки
		|ИТОГИ ПО
		|	Организация";
		
		
	Возврат ТекстЗапроса;	 

КонецФункции // ТекстЗапросаХозрасчетныйОстатки

Функция ТекстЗапросаТрадиционныйУчетОстатки(СтрокаРегистра)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 "; 
	
	Для Каждого Измерение Из Метаданные.РегистрыНакопления[СтрокаРегистра.ИмяРегистра].Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + Измерение.Имя + " КАК " + Измерение.Имя + ", " + Символы.ПС;
	КонецЦикла;
	
	Для Каждого Ресурс Из Метаданные.РегистрыНакопления[СтрокаРегистра.ИмяРегистра].Ресурсы Цикл
		ТекстЗапроса = ТекстЗапроса + Ресурс.Имя + "Остаток КАК " + Ресурс.Имя + ", " + Символы.ПС;
	КонецЦикла;
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	
	ТекстЗапроса = ТекстЗапроса + "  
	|ИЗ
	|	РегистрНакопления.%ИмяРегистраНакопления%.Остатки(
	|		&КонГраница,
	|   	%ИмяСчетаУчета%.НалоговыйУчет
	|	) КАК %ИмяРегистраНакопления%
    |
	|ГДЕ
	|   %ИмяРегистраНакопления%.%ИмяСчетаУчета%.НалоговыйУчет И 
	|	((%ИмяРегистраНакопления%.%ИмяСтоимостьНУ%Остаток <> 0 И НЕ %ИмяРегистраНакопления%.%ИмяСчетаУчета%.УчетСуммНУ) ИЛИ
	|   (%ИмяРегистраНакопления%.%ИмяНалоговоеНазначение% <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) И НЕ %ИмяРегистраНакопления%.%ИмяСчетаУчета%.УчетПоНалоговымНазначениямНДС))
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяРегистраНакопления%",  СтрокаРегистра.ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяСчетаУчета%",          СтрокаРегистра.ИмяИзмеренияСчет);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяНалоговоеНазначение%", СтрокаРегистра.ИмяИзмеренияНалоговоеНазначение);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяСтоимостьНУ%",         СтрокаРегистра.ИмяРесурсаСуммаНУ);
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТрадиционныйУчетОстатки

Процедура ЗакрытьНенужныеОстаткиТрадиционныйУчет()
	
	ТаблицаРегистров = ЗаполнитьТаблицуРегистровНакопления();
	Для Каждого СтрокаРегистра Из ТаблицаРегистров Цикл
		
		Если СтрокаРегистра.ТолькоДвижения Тогда
			Продолжить;
		КонецЕсли; 
		
		// конечные остатки с неиспользуемыми налоговыми назначениями и/или сумма НУ <> 0
		ТекстЗапроса = ТекстЗапросаТрадиционныйУчетОстатки(СтрокаРегистра);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ ");
		
		Запрос = Новый Запрос();
		Запрос.Текст = ТекстЗапроса;
		ДатаКон = КонецДня(НачалоМесяца(глЗначениеПеременной("ДатаНКУ2015"))-1);
		Запрос.УстановитьПараметр("КонГраница", Новый Граница(ДатаКон, ВидГраницы.Включая));
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			ДокументКорректировкиЗаписейРегистров = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
			ДокументКорректировкиЗаписейРегистров.Дата = ДатаКон;
			// Заполнить реквизиты значениями по умолчанию
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументКорректировкиЗаписейРегистров);
			ДокументКорректировкиЗаписейРегистров.Комментарий = "Очистка неиспользуемых реквизитов по учету налога на прибыль до 2015 по регистру накопления " + СтрокаРегистра.ИмяРегистра; 
			
			НоваяСтрока = ДокументКорректировкиЗаписейРегистров.ТаблицаРегистровНакопления.Добавить();
			НоваяСтрока.Имя           = СтрокаРегистра.ИмяРегистра;
			НоваяСтрока.Представление = Метаданные.РегистрыНакопления[СтрокаРегистра.ИмяРегистра].Синоним; 
			
			ДокументКорректировкиЗаписейРегистров.Записать();
			
			НаборЗаписей = ДокументКорректировкиЗаписейРегистров.Движения[СтрокаРегистра.ИмяРегистра];
			
			СтруктураРесурсы = Новый Структура;
			Для Каждого Ресурс Из Метаданные.РегистрыНакопления[СтрокаРегистра.ИмяРегистра].Ресурсы Цикл
				СтруктураРесурсы.Вставить(Ресурс.Имя, Ресурс.Имя);
			КонецЦикла;
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СторноСтоимостьНУ                  = (Выборка[СтрокаРегистра.ИмяРесурсаСуммаНУ] <> 0 И НЕ БухгалтерскийУчетПовтИсп.УчетСуммНУСчет(Выборка[СтрокаРегистра.ИмяИзмеренияСчет]));
				ПереносНаПустоеНалоговоеНазначение = (Выборка[СтрокаРегистра.ИмяИзмеренияНалоговоеНазначение] <> Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка() И НЕ БухгалтерскийУчетПовтИсп.УчетПоНалоговымНазначениямНДССчет(Выборка[СтрокаРегистра.ИмяИзмеренияСчет]));
				
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Активность = Истина;
				НоваяСтрока.Период = ДатаКон;
				
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				Если СторноСтоимостьНУ И (НЕ ПереносНаПустоеНалоговоеНазначение) Тогда
					Для Каждого Ресурс Из СтруктураРесурсы Цикл
						НоваяСтрока[Ресурс.Значение] = 0;
					КонецЦикла; 
					НоваяСтрока[СтрокаРегистра.ИмяРесурсаСуммаНУ] = -Выборка[СтрокаРегистра.ИмяРесурсаСуммаНУ];
				Иначе
					Для Каждого Ресурс Из СтруктураРесурсы Цикл
						НоваяСтрока[Ресурс.Значение] = -Выборка[Ресурс.Значение];
					КонецЦикла; 
				КонецЕсли;	
				
				Если НаборЗаписей.Количество() = 1000 Тогда
					НаборЗаписей.Записать(Ложь);
				КонецЕсли;
				
				Если ПереносНаПустоеНалоговоеНазначение Тогда
					НоваяСтрока = НаборЗаписей.Добавить();
					НоваяСтрока.Активность = Истина;
					НоваяСтрока.Период = ДатаКон;
					
					НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					
					НоваяСтрока[СтрокаРегистра.ИмяИзмеренияНалоговоеНазначение] = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
					
					Если СторноСтоимостьНУ Тогда
						НоваяСтрока[СтрокаРегистра.ИмяРесурсаСуммаНУ] = 0;
					КонецЕсли;	
					
					Если НаборЗаписей.Количество() = 1000 Тогда
						НаборЗаписей.Записать(Ложь);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				НаборЗаписей.Записать(Ложь);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры	// ЗакрытьНенужныеОстаткиТрадиционныйУчет()

Функция ЕстьНенужныеОстаткиНКУ2015() Экспорт 
	
	ТекстЗапроса = ТекстЗапросаХозрасчетныйОстатки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ДатаКон = КонецДня(НачалоМесяца(глЗначениеПеременной("ДатаНКУ2015"))-1);
	Запрос.УстановитьПараметр("КонГраница", Новый Граница(ДатаКон, ВидГраницы.Включая));
	
	ЕстьХозрасчетныйОстатки = НЕ Запрос.Выполнить().Пустой();
	
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(глЗначениеПеременной("ДатаНКУ2015")) Тогда
		ЕстьТрадиционныйУчетОстатки = Ложь;
		ТекстЗапроса = ТекстЗапросаУчетЗатратРеглОстатки();
		Запрос.Текст = ТекстЗапроса;
		ЕстьУчетЗатратРеглОстатки = НЕ Запрос.Выполнить().Пустой();
	Иначе
		ЕстьУчетЗатратРеглОстатки = Ложь;
		ТаблицаРегистров = ЗаполнитьТаблицуРегистровНакопления();
		ЕстьТрадиционныйУчетОстатки = Ложь;
		Для Каждого СтрокаРегистра Из ТаблицаРегистров Цикл
			Если СтрокаРегистра.ТолькоДвижения Тогда
				Продолжить;
			КонецЕсли; 
			ТекстЗапроса = ТекстЗапросаТрадиционныйУчетОстатки(СтрокаРегистра);
			Запрос.Текст = ТекстЗапроса;
            ЕстьТрадиционныйУчетОстатки = НЕ Запрос.Выполнить().Пустой();
			Если ЕстьТрадиционныйУчетОстатки Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат ЕстьХозрасчетныйОстатки ИЛИ ЕстьУчетЗатратРеглОстатки ИЛИ ЕстьТрадиционныйУчетОстатки;
	
	
КонецФункции // ЕстьНенужныеОстаткиНКУ2015

Процедура ЗакрытьНенужныеОстаткиХозрасчетный() 

	ТекстЗапроса = ТекстЗапросаХозрасчетныйОстатки();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ДатаКон = КонецДня(НачалоМесяца(глЗначениеПеременной("ДатаНКУ2015"))-1);
	Запрос.УстановитьПараметр("КонГраница", Новый Граница(ДатаКон, ВидГраницы.Включая));
	
	Результат = Запрос.Выполнить();

	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДатаДвижений = глЗначениеПеременной("ДатаНКУ2015") - 1;
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		ДокументОперация = Документы.ОперацияБух.СоздатьДокумент();
		ДокументОперация.Дата = ДатаДвижений;
		ДокументОперация.Организация = ВыборкаОрганизация.Организация;
		ДокументОперация.Комментарий = НСтр("ru = 'Очистка неиспользуемых реквизитов по учету налога на прибыль до 2015'; uk = 'Очищення реквізитів, що не використовуються, по обліку податку на прибуток до 2015'", Локализация.КодЯзыкаИнформационнойБазы());
		ДокументОперация.Ответственный 	  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		ДокументОперация.Содержание 	  = ДокументОперация.Комментарий;

		ВыборкаДетальныеЗаписи = ВыборкаОрганизация.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Проводка = ДокументОперация.Движения.Хозрасчетный.Добавить();
			Проводка.Период 		= ДатаДвижений;
			Проводка.Организация 	= ВыборкаДетальныеЗаписи.Организация;
			Проводка.ВалютаДт 		= ВыборкаДетальныеЗаписи.Валюта;
			Проводка.СчетДт 		= ВыборкаДетальныеЗаписи.Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ВыборкаДетальныеЗаписи.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ВыборкаДетальныеЗаписи.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ВыборкаДетальныеЗаписи.Субконто3);
			Проводка.СуммаНУДт 		= - ВыборкаДетальныеЗаписи.СуммаНУОстаток;
			Проводка.НалоговоеНазначениеДт 	= ВыборкаДетальныеЗаписи.НалоговоеНазначение;
			Проводка.СчетКт 		= ПланыСчетов.Хозрасчетный.Вспомогательный;
			
		КонецЦикла;
		ДокументОперация.Записать();
	КонецЦикла;

КонецПроцедуры // ЗакрытьНенужныеОстаткиХозрасчетный

Процедура ЗакрытьНенужныеОстаткиНКУ2015() Экспорт
	
	ЗакрытьНенужныеОстаткиХозрасчетный();
	
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(глЗначениеПеременной("ДатаНКУ2015")) Тогда
		ЗакрытьНенужныеОстаткиРАУЗ();
	Иначе
		ЗакрытьНенужныеОстаткиТрадиционныйУчет();
	КонецЕсли;	

КонецПроцедуры // ЗакрытьНенужныеОстаткиНКУ2015

Функция ТекстЗапросаНенужныеДанныеВДвиженияхХозрасчетный()

	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
		|   ""Хозрасчетный"" КАК ИмяРегистра
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, , , , ) КАК ХозрасчетныйДвиженияССубконто
		|ГДЕ
		|	(ХозрасчетныйДвиженияССубконто.СчетДт.НалоговыйУчет
		|		И НЕ ХозрасчетныйДвиженияССубконто.СчетДт.УчетСуммНУ
		|		И НЕ ХозрасчетныйДвиженияССубконто.СуммаНУДт = 0
		|	ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт.НалоговыйУчет
		|		И НЕ ХозрасчетныйДвиженияССубконто.СчетКт.УчетСуммНУ
		|		И НЕ ХозрасчетныйДвиженияССубконто.СуммаНУКт = 0
		|	ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт.НалоговыйУчет
		|		И НЕ ХозрасчетныйДвиженияССубконто.СчетДт.УчетПоНалоговымНазначениямНДС
		|		И НЕ ХозрасчетныйДвиженияССубконто.НалоговоеНазначениеДт = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
		|	ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт.НалоговыйУчет
		|		И НЕ ХозрасчетныйДвиженияССубконто.СчетКт.УчетПоНалоговымНазначениямНДС
		|		И НЕ ХозрасчетныйДвиженияССубконто.НалоговоеНазначениеКт = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка))
		|
		|";
		
	Возврат ТекстЗапроса;	

КонецФункции // ТекстЗапросаНенужныеДанныеВДвиженияхХозрасчетный

Функция ТекстЗапросаНенужныеДанныеВДвиженияхРАУЗ()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетЗатратРегл.Регистратор,
	|   ""УчетЗатратРегл"" КАК ИмяРегистра
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл КАК УчетЗатратРегл
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|   ПО РегистрАналитикаВидаУчета.Ссылка = УчетЗатратРегл.АналитикаВидаУчета
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрКорАналитикаВидаУчета
	|   ПО РегистрКорАналитикаВидаУчета.Ссылка = УчетЗатратРегл.КорАналитикаВидаУчета
	|      И УчетЗатратРегл.КорАналитикаВидаУчета ССЫЛКА Справочник.КлючиАналитикиВидаУчета
    |
	|ГДЕ
	|   УчетЗатратРегл.Активность И
	|   УчетЗатратРегл.Период >= &ДатаНач И 
	|   РегистрАналитикаВидаУчета.СчетУчета.НалоговыйУчет И 
	|	((УчетЗатратРегл.СтоимостьНУ <> 0 И НЕ РегистрАналитикаВидаУчета.СчетУчета.УчетСуммНУ) 
	|		ИЛИ (РегистрАналитикаВидаУчета.НалоговоеНазначение <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) 
	|			И НЕ РегистрАналитикаВидаУчета.СчетУчета.УчетПоНалоговымНазначениямНДС
	|			И НЕ РегистрАналитикаВидаУчета.НалоговоеНазначение.ГруппаНалоговогоНазначения = ЗНАЧЕНИЕ(Перечисление.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС) 
	|    	)
	|		ИЛИ (РегистрКорАналитикаВидаУчета.НалоговоеНазначение <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) 
	|			И НЕ РегистрКорАналитикаВидаУчета.СчетУчета.УчетПоНалоговымНазначениямНДС
	|			И НЕ РегистрКорАналитикаВидаУчета.НалоговоеНазначение.ГруппаНалоговогоНазначения = ЗНАЧЕНИЕ(Перечисление.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС) 
	|    	)
	|    )
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетПродажИСебестоимости.Регистратор,
	|   ""УчетПродажИСебестоимости"" КАК ИмяРегистра
	|ИЗ
	|	РегистрНакопления.УчетПродажИСебестоимости КАК УчетПродажИСебестоимости
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|   ПО РегистрАналитикаВидаУчета.Ссылка = УчетПродажИСебестоимости.АналитикаВидаУчета
    |
	|ГДЕ
	|   УчетПродажИСебестоимости.Активность И
	|   УчетПродажИСебестоимости.Период >= &ДатаНач И 
	|   РегистрАналитикаВидаУчета.СчетУчета.НалоговыйУчет И 
	|   (РегистрАналитикаВидаУчета.НалоговоеНазначение <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) И НЕ РегистрАналитикаВидаУчета.СчетУчета.УчетПоНалоговымНазначениямНДС)
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаНенужныеДанныеВДвиженияхРАУЗ

Функция ТекстЗапросаНенужныеДанныеВДвиженияхТрадиционныйУчет()
	
	ОбщийТекстЗапроса = "";
	
	ТаблицаРегистров = ЗаполнитьТаблицуРегистровНакопления();
	Для Каждого СтрокаРегистра Из ТаблицаРегистров Цикл
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	%ИмяРегистраНакопления%.Регистратор,
		|   ""%ИмяРегистраНакопления%"" КАК ИмяРегистра
		|ИЗ
		|	РегистрНакопления.%ИмяРегистраНакопления% КАК %ИмяРегистраНакопления%
	    |
		|ГДЕ
		|   %ИмяРегистраНакопления%.Активность И
		|   %ИмяРегистраНакопления%.Период >= &ДатаНач И 
		|   %ИмяРегистраНакопления%.%ИмяСчетаУчета%.НалоговыйУчет И 
		|	((%ИмяРегистраНакопления%.%ИмяСтоимостьНУ% <> 0 И НЕ %ИмяРегистраНакопления%.%ИмяСчетаУчета%.УчетСуммНУ) 
		|     ИЛИ (%ИмяРегистраНакопления%.%ИмяНалоговоеНазначение% <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) 
		|     И НЕ %ИмяРегистраНакопления%.%ИмяСчетаУчета%.УчетПоНалоговымНазначениямНДС
		|     И НЕ %ИмяРегистраНакопления%.%ИмяНалоговоеНазначение%.ГруппаНалоговогоНазначения = ЗНАЧЕНИЕ(Перечисление.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС) 
		|     )
		|   )
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяРегистраНакопления%",  СтрокаРегистра.ИмяРегистра);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяСчетаУчета%",          СтрокаРегистра.ИмяИзмеренияСчет);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяНалоговоеНазначение%", СтрокаРегистра.ИмяИзмеренияНалоговоеНазначение);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяСтоимостьНУ%",         СтрокаРегистра.ИмяРесурсаСуммаНУ);
		
		ОбщийТекстЗапроса = ОбщийТекстЗапроса + " ОБЪЕДИНИТЬ " + ТекстЗапроса;
		
	КонецЦикла; 
	
	ОбщийТекстЗапроса = Сред(ОбщийТекстЗапроса, СтрДлина(" ОБЪЕДИНИТЬ "));
	Возврат ОбщийТекстЗапроса;
	
	
КонецФункции // ТекстЗапросаНенужныеДанныеВДвиженияхТрадиционныйУчет


Функция ТекстЗапросаНенужныеДанныеВДвиженияхКорректировкиИспользования()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкиБракВПроизводствеНалоговыйУчет.Регистратор,
	|   ""КорректировкиБракВПроизводствеНалоговыйУчет"" КАК ИмяРегистра
	|ИЗ
	|	РегистрНакопления.КорректировкиБракВПроизводствеНалоговыйУчет КАК КорректировкиБракВПроизводствеНалоговыйУчет
    |
	|ГДЕ
	|   КорректировкиБракВПроизводствеНалоговыйУчет.Активность И
	|   КорректировкиБракВПроизводствеНалоговыйУчет.Период >= &ДатаНач И 
	|   (КорректировкиБракВПроизводствеНалоговыйУчет.НалоговоеНазначение.ГруппаНалоговогоНазначения <> ЗНАЧЕНИЕ(Перечисление.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС) 
	|   ИЛИ КорректировкиБракВПроизводствеНалоговыйУчет.НалоговоеНазначениеПоФакту.ГруппаНалоговогоНазначения <> ЗНАЧЕНИЕ(Перечисление.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС)
	|   )
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкиЗатратыНалоговыйУчет.Регистратор,
	|   ""КорректировкиЗатратыНалоговыйУчет"" КАК ИмяРегистра
	|ИЗ
	|	РегистрНакопления.КорректировкиЗатратыНалоговыйУчет КАК КорректировкиЗатратыНалоговыйУчет
    |
	|ГДЕ
	|   КорректировкиЗатратыНалоговыйУчет.Активность И
	|   КорректировкиЗатратыНалоговыйУчет.Период >= &ДатаНач И 
	|   (КорректировкиЗатратыНалоговыйУчет.НалоговоеНазначение.ГруппаНалоговогоНазначения <> ЗНАЧЕНИЕ(Перечисление.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС) 
	|   ИЛИ КорректировкиЗатратыНалоговыйУчет.НалоговоеНазначениеПоФакту.ГруппаНалоговогоНазначения <> ЗНАЧЕНИЕ(Перечисление.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС)
	|   )
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкиНезавершенноеПроизводствоНалоговыйУчет.Регистратор,
	|   ""КорректировкиНезавершенноеПроизводствоНалоговыйУчет"" КАК ИмяРегистра
	|ИЗ
	|	РегистрНакопления.КорректировкиНезавершенноеПроизводствоНалоговыйУчет КАК КорректировкиНезавершенноеПроизводствоНалоговыйУчет
    |
	|ГДЕ
	|   КорректировкиНезавершенноеПроизводствоНалоговыйУчет.Активность И
	|   КорректировкиНезавершенноеПроизводствоНалоговыйУчет.Период >= &ДатаНач И 
	|   (КорректировкиНезавершенноеПроизводствоНалоговыйУчет.НалоговоеНазначение.ГруппаНалоговогоНазначения <> ЗНАЧЕНИЕ(Перечисление.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС) 
	|   ИЛИ КорректировкиНезавершенноеПроизводствоНалоговыйУчет.НалоговоеНазначениеПоФакту.ГруппаНалоговогоНазначения <> ЗНАЧЕНИЕ(Перечисление.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС)
	|   )
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкиПартииТоваровНалоговыйУчет.Регистратор,
	|   ""КорректировкиПартииТоваровНалоговыйУчет"" КАК ИмяРегистра
	|ИЗ
	|	РегистрНакопления.КорректировкиПартииТоваровНалоговыйУчет КАК КорректировкиПартииТоваровНалоговыйУчет
    |
	|ГДЕ
	|   КорректировкиПартииТоваровНалоговыйУчет.Активность И
	|   КорректировкиПартииТоваровНалоговыйУчет.Период >= &ДатаНач И 
	|   (КорректировкиПартииТоваровНалоговыйУчет.НалоговоеНазначение.ГруппаНалоговогоНазначения <> ЗНАЧЕНИЕ(Перечисление.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС) 
	|   ИЛИ КорректировкиПартииТоваровНалоговыйУчет.НалоговоеНазначениеПоФакту.ГруппаНалоговогоНазначения <> ЗНАЧЕНИЕ(Перечисление.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС)
	|   )
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет.Регистратор,
	|   ""КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет"" КАК ИмяРегистра
	|ИЗ
	|	РегистрНакопления.КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет КАК КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет
    |
	|ГДЕ
	|   КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет.Активность И
	|   КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет.Период >= &ДатаНач И 
	|   (КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет.НалоговоеНазначение.ГруппаНалоговогоНазначения <> ЗНАЧЕНИЕ(Перечисление.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС) 
	|   ИЛИ КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет.НалоговоеНазначениеПоФакту.ГруппаНалоговогоНазначения <> ЗНАЧЕНИЕ(Перечисление.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС)
	|   )
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаНенужныеДанныеВДвиженияхКорректировкиИспользования


Функция ТекстЗапросаНенужныеДанныеВДвиженияхНКУ2015() Экспорт 
	
	ТекстЗапроса = "";
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаНенужныеДанныеВДвиженияхХозрасчетный();
	
	ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ " + ТекстЗапросаНенужныеДанныеВДвиженияхРАУЗ();
	ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ " + ТекстЗапросаНенужныеДанныеВДвиженияхТрадиционныйУчет();
	
	ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ " + ТекстЗапросаНенужныеДанныеВДвиженияхКорректировкиИспользования();
	
	ТекстЗапроса = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО Регистратор " + " ИТОГИ ПО Регистратор";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаНенужныеДанныеВДвиженияхНКУ2015

Функция КоличествоДокументовНенужныеДанныеВДвиженияхНКУ2015() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаНенужныеДанныеВДвиженияхНКУ2015();
	Запрос.УстановитьПараметр("ДатаНач", глЗначениеПеременной("ДатаНКУ2015"));
	Результат = Запрос.Выполнить();
	ВыборкаРегистратор = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Возврат ВыборкаРегистратор.Количество();
	
КонецФункции // КоличествоДокументовНенужныеДанныеВДвиженияхНКУ2015

Процедура ОбработатьДвиженияРегистратора(Регистратор, ИмяРегистра, СтруктураКлючиАналитики) Экспорт 

	Если ИмяРегистра = "КорректировкиБракВПроизводствеНалоговыйУчет" 
		 ИЛИ ИмяРегистра = "КорректировкиЗатратыНалоговыйУчет" 
		 ИЛИ ИмяРегистра = "КорректировкиНезавершенноеПроизводствоНалоговыйУчет" 
		 ИЛИ ИмяРегистра = "КорректировкиПартииТоваровНалоговыйУчет" 
		 ИЛИ ИмяРегистра = "КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет" 
		
		Тогда 
		
		НаборЗаписейДокумента = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписейДокумента.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписейДокумента.Прочитать();
		Для Каждого Запись Из НаборЗаписейДокумента Цикл
			СкорректироватьНалоговыеНазначения(Запись.НалоговоеНазначениеПоФакту, Запись.НалоговоеНазначение);
		КонецЦикла; 
		НаборЗаписейДокумента.Записать();
		
	ИначеЕсли ИмяРегистра = "Хозрасчетный" Тогда
		
		НаборЗаписейДокумента = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборЗаписейДокумента.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписейДокумента.Прочитать();
		НаборЗаписейДокумента.мОчищатьДанныеНУДо2015 = Истина;
		НаборЗаписейДокумента.Записать();
		
	ИначеЕсли ИмяРегистра = "УчетЗатратРегл" Тогда
		
		НаборЗаписейДокумента = РегистрыНакопления.УчетЗатратРегл.СоздатьНаборЗаписей();
		НаборЗаписейДокумента.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписейДокумента.Прочитать();
		Для Каждого Запись Из НаборЗаписейДокумента Цикл
			КлючАналитикиВидаУчета    = УправлениеЗапасамиРасширеннаяАналитика.ПолучитьАналитикуПоКлючуАналитики("АналитикаВидаУчета", Запись.АналитикаВидаУчета, СтруктураКлючиАналитики);
			КлючКорАналитикиВидаУчета = УправлениеЗапасамиРасширеннаяАналитика.ПолучитьАналитикуПоКлючуАналитики("АналитикаВидаУчета", Запись.КорАналитикаВидаУчета, СтруктураКлючиАналитики);
			Если (Запись.СтоимостьНУ <> 0 И НЕ БухгалтерскийУчетПовтИсп.УчетСуммНУСчет(КлючАналитикиВидаУчета.СчетУчета)) Тогда
				Запись.СтоимостьНУ = 0;	
			КонецЕсли; 
			
			Если КлючАналитикиВидаУчета.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка() 
				 И НЕ БухгалтерскийУчетПовтИсп.УчетПоНалоговымНазначениямНДССчет(КлючАналитикиВидаУчета.СчетУчета) 
				 И НЕ НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(КлючАналитикиВидаУчета.НалоговоеНазначение) = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС
				 
				Тогда
				
				Если КлючКорАналитикиВидаУчета <> Неопределено Тогда
					НалоговоеНазначение	       = КлючАналитикиВидаУчета.НалоговоеНазначение;
					НалоговоеНазначениеПоФакту = КлючКорАналитикиВидаУчета.НалоговоеНазначение;
					СкорректироватьНалоговыеНазначения(НалоговоеНазначение, НалоговоеНазначениеПоФакту);
				Иначе
					НалоговоеНазначение	       = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(); 
				КонецЕсли;	
					
				СтруктураШапкиДокумента = Новый Структура;
				СтруктураШапкиДокумента.Вставить("Дата",   Запись.Период);
				СтруктураШапкиДокумента.Вставить("Ссылка", Регистратор);
				НоваяАналитикаВидаУчета = ПолучитьАналитикуВидаУчетаСНовымНалоговымНазначением(Запись.АналитикаВидаУчета, НалоговоеНазначение, СтруктураКлючиАналитики, СтруктураШапкиДокумента);
				Запись.АналитикаВидаУчета = НоваяАналитикаВидаУчета;	
					
				
			КонецЕсли; 
			
			Если КлючКорАналитикиВидаУчета <> Неопределено 
				 И КлючКорАналитикиВидаУчета.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка() 
				 И НЕ БухгалтерскийУчетПовтИсп.УчетПоНалоговымНазначениямНДССчет(КлючКорАналитикиВидаУчета.СчетУчета) 
				 И НЕ НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(КлючКорАналитикиВидаУчета.НалоговоеНазначение) = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС
				 
				Тогда
				
				НалоговоеНазначение	       = КлючКорАналитикиВидаУчета.НалоговоеНазначение;
				НалоговоеНазначениеПоФакту = КлючАналитикиВидаУчета.НалоговоеНазначение;
				СкорректироватьНалоговыеНазначения(НалоговоеНазначение, НалоговоеНазначениеПоФакту);
				
				СтруктураШапкиДокумента = Новый Структура;
				СтруктураШапкиДокумента.Вставить("Дата",   Запись.Период);
				СтруктураШапкиДокумента.Вставить("Ссылка", Регистратор);
				НоваяКорАналитикаВидаУчета = ПолучитьАналитикуВидаУчетаСНовымНалоговымНазначением(Запись.КорАналитикаВидаУчета, НалоговоеНазначение, СтруктураКлючиАналитики, СтруктураШапкиДокумента);
				Запись.КорАналитикаВидаУчета = НоваяКорАналитикаВидаУчета;	
				
			КонецЕсли; 
			
		КонецЦикла; 
		НаборЗаписейДокумента.Записать();
		
	ИначеЕсли ИмяРегистра = "УчетПродажИСебестоимости" Тогда
		
		НаборЗаписейДокумента = РегистрыНакопления.УчетПродажИСебестоимости.СоздатьНаборЗаписей();
		НаборЗаписейДокумента.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписейДокумента.Прочитать();
		Для Каждого Запись Из НаборЗаписейДокумента Цикл
			КлючАналитикиВидаУчета = УправлениеЗапасамиРасширеннаяАналитика.ПолучитьАналитикуПоКлючуАналитики("АналитикаВидаУчета", Запись.АналитикаВидаУчета, СтруктураКлючиАналитики);
			Если (КлючАналитикиВидаУчета.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка() И НЕ БухгалтерскийУчетПовтИсп.УчетПоНалоговымНазначениямНДССчет(КлючАналитикиВидаУчета.СчетУчета)) Тогда
				СтруктураШапкиДокумента = Новый Структура;
				СтруктураШапкиДокумента.Вставить("Дата",   Запись.Период);
				СтруктураШапкиДокумента.Вставить("Ссылка", Регистратор);
				АналитикаВидаУчетаПустоеНН = ПолучитьАналитикуВидаУчетаСНовымНалоговымНазначением(Запись.АналитикаВидаУчета, Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(), СтруктураКлючиАналитики, СтруктураШапкиДокумента);
				Запись.АналитикаВидаУчета = АналитикаВидаУчетаПустоеНН;	
			КонецЕсли; 
		КонецЦикла; 
		НаборЗаписейДокумента.Записать();
		
	Иначе
		
		// регистры накопления в традиционном учете
		ТаблицаРегистров = ЗаполнитьТаблицуРегистровНакопления();
		СтрокаРегистра = ТаблицаРегистров.Найти(ИмяРегистра, "ИмяРегистра");
		Если СтрокаРегистра = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		НаборЗаписейДокумента = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписейДокумента.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписейДокумента.Прочитать();
		Для Каждого Запись Из НаборЗаписейДокумента Цикл
			Если (Запись[СтрокаРегистра.ИмяРесурсаСуммаНУ] <> 0 И НЕ БухгалтерскийУчетПовтИсп.УчетСуммНУСчет(Запись[СтрокаРегистра.ИмяИзмеренияСчет])) Тогда
				Запись[СтрокаРегистра.ИмяРесурсаСуммаНУ] = 0;	
			КонецЕсли; 
			Если Запись[СтрокаРегистра.ИмяИзмеренияНалоговоеНазначение] <> Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка() 
				 И НЕ БухгалтерскийУчетПовтИсп.УчетПоНалоговымНазначениямНДССчет(Запись[СтрокаРегистра.ИмяИзмеренияСчет]) 
				 И НЕ НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(Запись[СтрокаРегистра.ИмяИзмеренияНалоговоеНазначение]) = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС
				 
				Тогда
				
				Если ЗначениеЗаполнено(СтрокаРегистра.ИмяИзмеренияНалоговоеНазначениеПоФакту) Тогда
					НалоговоеНазначение	       = Запись[СтрокаРегистра.ИмяИзмеренияНалоговоеНазначение];
					НалоговоеНазначениеПоФакту = Запись[СтрокаРегистра.ИмяИзмеренияНалоговоеНазначениеПоФакту];
					СкорректироватьНалоговыеНазначения(НалоговоеНазначение, НалоговоеНазначениеПоФакту);
					Запись[СтрокаРегистра.ИмяИзмеренияНалоговоеНазначение]        = НалоговоеНазначение;
					Запись[СтрокаРегистра.ИмяИзмеренияНалоговоеНазначениеПоФакту] = НалоговоеНазначениеПоФакту;
				Иначе	
					Запись[СтрокаРегистра.ИмяИзмеренияНалоговоеНазначение] = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
				КонецЕсли; 
				
			КонецЕсли; 
		КонецЦикла; 
		НаборЗаписейДокумента.Записать();
		
	КонецЕсли; 

КонецПроцедуры // ОбработатьДвиженияРегистратора

Процедура ОбработатьРегистратор(Регистратор) Экспорт 
	
	ТипРегистратора = ТипЗнч(Регистратор);
	
	Если ТипРегистратора = Тип("ДокументСсылка.ПодтверждениеКорректировокИспользованияНалоговыйУчет") Тогда
		БылиИзменения = Ложь;
		РегистраторОбъект = Регистратор.ПолучитьОбъект();
		Для Каждого СтрокаЗатраты Из РегистраторОбъект.Затраты Цикл
			БылиИзмененияСтрока = СкорректироватьНалоговыеНазначения(СтрокаЗатраты.НалоговоеНазначениеПоФакту, СтрокаЗатраты.НалоговоеНазначение);
			БылиИзменения = БылиИзменения ИЛИ БылиИзмененияСтрока;
			БылиИзмененияСтрока = СкорректироватьНалоговыеНазначения(СтрокаЗатраты.НалоговоеНазначениеПоФактуРекомендуемый, СтрокаЗатраты.НалоговоеНазначение);
			БылиИзменения = БылиИзменения ИЛИ БылиИзмененияСтрока;
		КонецЦикла; 
		Если БылиИзменения Тогда
			РегистраторОбъект.ОбменДанными.Загрузка = Истина;
			РегистраторОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		БылиИзменения = Ложь;
		РегистраторОбъект = Регистратор.ПолучитьОбъект();
		Для Каждого СтрокаМатериалы Из РегистраторОбъект.Материалы Цикл
			БылиИзмененияСтрока = СкорректироватьНалоговыеНазначения(СтрокаМатериалы.НалоговоеНазначениеДоходовИЗатрат, СтрокаМатериалы.НалоговоеНазначение);
			БылиИзменения = БылиИзменения ИЛИ БылиИзмененияСтрока;
		КонецЦикла; 
		Если БылиИзменения Тогда
			РегистраторОбъект.ОбменДанными.Загрузка = Истина;
			РегистраторОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.КорректировкаПрочихЗатрат") Тогда
		БылиИзменения = Ложь;
		РегистраторОбъект = Регистратор.ПолучитьОбъект();
		Для Каждого СтрокаЗатраты Из РегистраторОбъект.Затраты Цикл
			БылиИзмененияСтрока = СкорректироватьНалоговыеНазначения(СтрокаЗатраты.НалоговоеНазначениеДоходовИЗатратПолучатель, СтрокаЗатраты.НалоговоеНазначениеДоходовИЗатрат);
			БылиИзменения = БылиИзменения ИЛИ БылиИзмененияСтрока;
		КонецЦикла; 
		Если БылиИзменения Тогда
			РегистраторОбъект.ОбменДанными.Загрузка = Истина;
			РегистраторОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		БылиИзменения = Ложь;
		НалоговоеНазначениеСписания = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Регистратор, "НалоговоеНазначениеДоходовИЗатрат");
		Если НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(НалоговоеНазначениеСписания) = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат Тогда
			Если НалоговоеНазначениеСписания = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность Тогда
				НалоговоеНазначениеСписания = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
				БылиИзменения = Истина;
			ИначеЕсли НалоговоеНазначениеСписания = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда 
				НалоговоеНазначениеСписания = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
				БылиИзменения = Истина;
			Иначе
				НалоговоеНазначениеСписания = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
				БылиИзменения = Истина;
			КонецЕсли; 		
		КонецЕсли; 
		Если БылиИзменения Тогда
			РегистраторОбъект = Регистратор.ПолучитьОбъект();
			РегистраторОбъект.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеСписания;
			РегистраторОбъект.ОбменДанными.Загрузка = Истина;
			РегистраторОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.СписаниеНЗП") Тогда
		БылиИзменения = Ложь;
		НалоговоеНазначениеСписания = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Регистратор, "НалоговоеНазначениеДоходовИЗатрат");
		Если НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(НалоговоеНазначениеСписания) = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат Тогда
			Если НалоговоеНазначениеСписания = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность Тогда
				НалоговоеНазначениеСписания = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
				БылиИзменения = Истина;
			ИначеЕсли НалоговоеНазначениеСписания = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда 
				НалоговоеНазначениеСписания = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
				БылиИзменения = Истина;
			Иначе
				НалоговоеНазначениеСписания = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
				БылиИзменения = Истина;
			КонецЕсли; 		
		КонецЕсли; 
		Если БылиИзменения Тогда
			РегистраторОбъект = Регистратор.ПолучитьОбъект();
			РегистраторОбъект.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеСписания;
			РегистраторОбъект.ОбменДанными.Загрузка = Истина;
			РегистраторОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
	КонецЕсли; 

КонецПроцедуры // ОбработатьДвиженияРегистратора

Функция СкорректироватьНалоговыеНазначения(НалоговоеНазначение, НалоговоеНазначениеПоФакту)
	
	БылиИзменения = Ложь;
	Если НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(НалоговоеНазначение) = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат Тогда
		Если НалоговоеНазначениеПоФакту = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая И НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность Тогда
			НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
			БылиИзменения = Истина;
		ИначеЕсли НалоговоеНазначениеПоФакту = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность И НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность Тогда
			НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
			БылиИзменения = Истина;
		ИначеЕсли ЗначениеЗаполнено(НалоговоеНазначениеПоФакту) И НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
			НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
			БылиИзменения = Истина;
		Иначе
			НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
			БылиИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат БылиИзменения;

КонецФункции // СкорректироватьНалоговыеНазначения
 
Функция ЗаполнитьТаблицуРегистровНакопления()
	
	ТаблицаРегистров = Новый ТаблицаЗначений;
	
	ТаблицаРегистров.Колонки.Добавить("ИмяРегистра");
	ТаблицаРегистров.Колонки.Добавить("ТолькоДвижения");
	ТаблицаРегистров.Колонки.Добавить("ИмяИзмеренияСчет");     
	ТаблицаРегистров.Колонки.Добавить("ИмяИзмеренияНалоговоеНазначение");
	ТаблицаРегистров.Колонки.Добавить("ИмяИзмеренияНалоговоеНазначениеПоФакту");
	ТаблицаРегистров.Колонки.Добавить("ИмяРесурсаСуммаНУ");     
	
	ДобавитьСтрокуТаблицаРегистров(ТаблицаРегистров, Ложь, "БракВПроизводствеБухгалтерскийУчет",                 "СчетУчета", "НалоговоеНазначение", "", "СуммаНУ");
	ДобавитьСтрокуТаблицаРегистров(ТаблицаРегистров, Ложь, "ЗатратыБухгалтерскийУчет",                           "СчетУчета", "НалоговоеНазначение", "НалоговоеНазначениеПоФакту", "СуммаНУ");
	ДобавитьСтрокуТаблицаРегистров(ТаблицаРегистров, Ложь, "ЗатратыНаВыпускПродукцииНаработкаБухгалтерскийУчет", "СчетУчета", "НалоговоеНазначение", "", "СуммаНУ");
	ДобавитьСтрокуТаблицаРегистров(ТаблицаРегистров, Ложь, "НезавершенноеПроизводствоБухгалтерскийУчет",         "СчетУчета", "НалоговоеНазначение", "", "СтоимостьНУ");
	ДобавитьСтрокуТаблицаРегистров(ТаблицаРегистров, Ложь, "ПартииТоваровНаСкладахБухгалтерскийУчет",            "СчетУчета", "НалоговоеНазначение", "", "СтоимостьНУ");
	ДобавитьСтрокуТаблицаРегистров(ТаблицаРегистров, Ложь, "ПартииТоваровПереданныеБухгалтерскийУчет",           "СчетУчета", "НалоговоеНазначение", "", "СтоимостьНУ");
	
	
	ДобавитьСтрокуТаблицаРегистров(ТаблицаРегистров, Ложь, "СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет", "СчетУчета", "НалоговоеНазначение", "", "СтоимостьНУ");
	
	ДобавитьСтрокуТаблицаРегистров(ТаблицаРегистров, Истина, "ВыпускПродукцииБухгалтерскийУчет",             "СчетДт",     "НалоговоеНазначениеПолучатель", "", "СтоимостьНУ");
	ДобавитьСтрокуТаблицаРегистров(ТаблицаРегистров, Истина, "ЗатратыНаВыпускПродукцииБухгалтерскийУчет",    "СчетУчета",  "НалоговоеНазначение", "", "СуммаНУ");
	
	
	
	Возврат ТаблицаРегистров;
	
КонецФункции // ЗаполнитьТаблицуРегистровНакопления

Процедура ДобавитьСтрокуТаблицаРегистров(ТаблицаРегистров, ТолькоДвижения, ИмяРегистра, ИмяИзмеренияСчет, ИмяИзмеренияНалоговоеНазначение, ИмяИзмеренияНалоговоеНазначениеПоФакту, ИмяРесурсаСуммаНУ)

	НоваяСтрока = ТаблицаРегистров.Добавить();
	НоваяСтрока.ИмяРегистра                            = ИмяРегистра;
	НоваяСтрока.ТолькоДвижения                         = ТолькоДвижения;
	НоваяСтрока.ИмяИзмеренияСчет                       = ИмяИзмеренияСчет;
	НоваяСтрока.ИмяИзмеренияНалоговоеНазначение        = ИмяИзмеренияНалоговоеНазначение;
	НоваяСтрока.ИмяИзмеренияНалоговоеНазначениеПоФакту = ИмяИзмеренияНалоговоеНазначениеПоФакту;
	НоваяСтрока.ИмяРесурсаСуммаНУ                      = ИмяРесурсаСуммаНУ;

КонецПроцедуры // ДобавитьСтрокуТаблицаРегистров

Процедура ОтключитьИспользованиеИтогов() Экспорт
	
	Если РегистрыБухгалтерии.Хозрасчетный.ПолучитьИспользованиеИтогов() Тогда
		РегистрыБухгалтерии.Хозрасчетный.УстановитьИспользованиеИтогов(Ложь);
		Сообщить(НСтр("ru = 'Использование итогов для регистра бухгалтерии ""Хозрасчетный"" отключено!'; uk = 'Використання підсумків для регістра бухгалтерії ""Госпрозрахунковий"" вимкнено!'"));
	КонецЕсли; 
	
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(глЗначениеПеременной("ДатаНКУ2015")) Тогда
		Если РегистрыНакопления.УчетЗатратРегл.ПолучитьИспользованиеИтогов() Тогда
			РегистрыНакопления.УчетЗатратРегл.УстановитьИспользованиеИтогов(Ложь);
			Сообщить(НСтр("ru = 'Использование итогов для регистра накопления УчетЗатратРегл отключено!'; uk = 'Використання підсумків для регістра накопичення УчетЗатратРегл вимкнено!'"));
		КонецЕсли; 	
	Иначе
		ТаблицаРегистров = ЗаполнитьТаблицуРегистровНакопления();
		Для Каждого СтрокаРегистра Из ТаблицаРегистров Цикл
			Если СтрокаРегистра.ИмяРегистра = "ЗатратыНаВыпускПродукцииБухгалтерскийУчет" Тогда
				Продолжить;
			КонецЕсли; 
			Если РегистрыНакопления[СтрокаРегистра.ИмяРегистра].ПолучитьИспользованиеИтогов() Тогда
				РегистрыНакопления[СтрокаРегистра.ИмяРегистра].УстановитьИспользованиеИтогов(Ложь);
				Сообщить(НСтр("ru = 'Использование итогов для регистра накопления " + СтрокаРегистра.ИмяРегистра + " отключено!'; uk = 'Використання підсумків для регістра накопичення "  + СтрокаРегистра.ИмяРегистра + " вимкнено!'"));
			КонецЕсли; 		
		КонецЦикла;	
	КонецЕсли;	

КонецПроцедуры // ОтключитьИспользованиеИтогов

Процедура ВключитьИспользованиеИтогов() Экспорт
	
	Если РегистрыБухгалтерии.Хозрасчетный.ПолучитьИспользованиеИтогов() = Ложь Тогда
		РегистрыБухгалтерии.Хозрасчетный.УстановитьИспользованиеИтогов(Истина);
		Сообщить(НСтр("ru = 'Использование итогов для регистра бухгалтерии ""Хозрасчетный"" включено!'; uk = 'Використання підсумків для регістра бухгалтерії ""Госпрозрахунковий"" включено!'"));
	КонецЕсли;
	
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(глЗначениеПеременной("ДатаНКУ2015")) Тогда
		Если РегистрыНакопления.УчетЗатратРегл.ПолучитьИспользованиеИтогов() = Ложь Тогда
			РегистрыНакопления.УчетЗатратРегл.УстановитьИспользованиеИтогов(Истина);
			Сообщить(НСтр("ru = 'Использование итогов для регистра накопления УчетЗатратРегл включено!'; uk = 'Використання підсумків для регістра накопичення УчетЗатратРегл включено!'"));
		КонецЕсли; 	
	Иначе
		ТаблицаРегистров = ЗаполнитьТаблицуРегистровНакопления();
		Для Каждого СтрокаРегистра Из ТаблицаРегистров Цикл
			Если СтрокаРегистра.ИмяРегистра = "ЗатратыНаВыпускПродукцииБухгалтерскийУчет" Тогда
				Продолжить;
			КонецЕсли; 
			Если РегистрыНакопления[СтрокаРегистра.ИмяРегистра].ПолучитьИспользованиеИтогов() = Ложь Тогда
				РегистрыНакопления[СтрокаРегистра.ИмяРегистра].УстановитьИспользованиеИтогов(Истина);
				Сообщить(НСтр("ru = 'Использование итогов для регистра накопления " + СтрокаРегистра.ИмяРегистра + " включено!'; uk = 'Використання підсумків для регістра накопичення "  + СтрокаРегистра.ИмяРегистра + " включено!'"));
			КонецЕсли; 		
		КонецЦикла;	
	КонецЕсли;	

КонецПроцедуры // ВключитьИспользованиеИтогов

