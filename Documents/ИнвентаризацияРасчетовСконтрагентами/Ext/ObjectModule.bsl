////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//	Процедура выполняет заполнение документа по форме ИНВ-17 данными регистра БУ
//
//	Аргументы:	1.	ВидЗадолженности 
// 	Тип:	 		Перечисления.ВидыЗадолженности
//	Назначение:     Формирование выборки по конкретному виду задолженности (опция)
//
Процедура ЗаполнитьАктДляИнв17(ВидЗадолженности = Неопределено) Экспорт
	
	// Проверка требования на отбор данных по виду задолженности
	Если НЕ (ВидЗадолженности = Неопределено) Тогда
		// Вид задолженности выбран
		// Выполнение очистки записей ТЧ Контрагенты по виду задолженности
		СтруктураОтбора = Новый Структура("ВидЗадолженности", ВидЗадолженности);
		УдаляемыеСтроки = Контрагенты.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Контрагенты.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	Иначе
		// Полная очистка записей в ТЧ Контрагенты
		Контрагенты.Очистить();
	КонецЕсли;
	
	Запрос 		= Новый Запрос;
	ГраницаАкта = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	
	Запрос.УстановитьПараметр("Дата",        	  ГраницаАкта);
	Запрос.УстановитьПараметр("Организация", 	  Организация);
	МассивСчетов = СчетаРасчетов.ВыгрузитьКолонку("СчетРасчетов");
	МассивСчетов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	ВидыСубконто = Новый Массив();
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.УстановитьПараметр("ВидЗадолженности",  	ВидЗадолженности);
	Запрос.УстановитьПараметр("Дебиторская",  Перечисления.ВидыЗадолженности.Дебиторская);
	Запрос.УстановитьПараметр("Кредиторская", Перечисления.ВидыЗадолженности.Кредиторская);
	Запрос.УстановитьПараметр("Активный", ВидСчета.Активный);
	Запрос.УстановитьПараметр("Пассивный", ВидСчета.Пассивный);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = &Активный
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = &Активный
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА &Дебиторская
	|		ИНАЧЕ &Кредиторская
	|	КОНЕЦ КАК ВидЗадолженности
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет В (&МассивСчетов), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	(&ВидЗадолженности = НЕОПРЕДЕЛЕНО
	|			ИЛИ ВЫБОР
	|				КОГДА ХозрасчетныйОстатки.Счет.Вид = &Активный
	|						ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|					ТОГДА &Дебиторская
	|				ИНАЧЕ &Кредиторская
	|			КОНЕЦ = &ВидЗадолженности)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = &Активный
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА &Дебиторская
	|		ИНАЧЕ &Кредиторская
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1.Представление,
	|	ХозрасчетныйОстатки.Счет.Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока (Выборка.Следующий()) Цикл
		СтрокаДанных = Контрагенты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАктДляИнв17()
                                                                       
//	Процедура выполняет формирование и вывод итоговых значений документа в форме
Функция ПолучитьИтоги() Экспорт
	
	ТабКонтрагентыДт = Контрагенты.Выгрузить();
	ТабКонтрагентыКт = ТабКонтрагентыДт.Скопировать();
	
	ОтборДт	 = Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская);
	ОтборКт	 = Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская);
	мИтогиДт = ТабКонтрагентыДт.НайтиСтроки(ОтборКт);
	мИтогиКт = ТабКонтрагентыКт.НайтиСтроки(ОтборДт);
	
	Для Каждого ЭлмИтогиДт Из мИтогиДт Цикл
		ТабКонтрагентыДт.Удалить(ЭлмИтогиДт);
	КонецЦикла;
	
	Для Каждого ЭлмИтогиКт Из мИтогиКт Цикл
		ТабКонтрагентыКт.Удалить(ЭлмИтогиКт);
	КонецЦикла;
	
	СуммаДт = 	ТабКонтрагентыДт.Итог("Подтверждено")	+ 
				ТабКонтрагентыДт.Итог("НеПодтверждено");
				
	СуммаКт = 	ТабКонтрагентыКт.Итог("Подтверждено")	+ 
				ТабКонтрагентыКт.Итог("НеПодтверждено");
	
	ТекстИтогиДт = НСтр("ru='Всего строк:';uk='Усього рядків:'") + Символы.НПП	+ ТабКонтрагентыДт.Количество() + Символы.Таб + 
	НСтр("ru='Всего, грн.:';uk='Усього, грн.:'") + Символы.НПП + 
	Формат(СуммаДт, "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ НСтр("ru='подтверждено:';uk='підтверджено:'") + Символы.НПП + 
	Формат(ТабКонтрагентыДт.Итог("Подтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ 
	НСтр("ru='не подтверждено:';uk='не підтверджено:'") + Символы.НПП + 
	Формат(ТабКонтрагентыДт.Итог("НеПодтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ 
	НСтр("ru='истек срок давности:';uk='минув строк давнини:'") + Символы.НПП + 
	Формат(ТабКонтрагентыДт.Итог("ИстекСрокДавности"), "ЧЦ=15; ЧДЦ=2; ЧН=-");
	
	ТекстИтогиКт = НСтр("ru='Всего строк:';uk='Усього рядків:'") + Символы.НПП	+ ТабКонтрагентыКт.Количество() + Символы.Таб + 
	НСтр("ru='Всего, грн.:';uk='Усього, грн.:'") + Символы.НПП + 
	Формат(СуммаКт, "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ НСтр("ru='подтверждено:';uk='підтверджено:'") + Символы.НПП + 
	Формат(ТабКонтрагентыКт.Итог("Подтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ 
	НСтр("ru='не подтверждено:';uk='не підтверджено:'") + Символы.НПП + 
	Формат(ТабКонтрагентыКт.Итог("НеПодтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ 
	НСтр("ru='истек срок давности:';uk='минув строк давнини:'") + Символы.НПП + 
	Формат(ТабКонтрагентыКт.Итог("ИстекСрокДавности"), "ЧЦ=15; ЧДЦ=2; ЧН=-");
	
	ТекстИтогиДт = ?(ТабКонтрагентыДт.Количество() = 0,
					НСтр("ru='Документ по дебиторской задолженности не заполнен.';uk='Документ по дебіторській заборгованості не заповнений.'"),
					ТекстИтогиДт);

	ТекстИтогиКт = ?(ТабКонтрагентыКт.Количество() = 0,
					НСтр("ru='Документ по кредиторской задолженности не заполнен.';uk='Документ по кредиторській заборгованості не заповнений.'"),
					ТекстИтогиКт);

	Возврат Новый Структура("СтрокаДт,СтрокаКт", ТекстИтогиДт,ТекстИтогиКт);
	
КонецФункции // ПолучитьИтоги()

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ПЕЧАТНЫХ ФОРМ

# Если Клиент Тогда

// Процедура формирования унифицированной печатной формы документа ИНВ-17
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта инвентаризации.
//
//
Функция ПечатьИнв17() Экспорт
	
	КодЯзыкаПечать = 
	  Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
	                                                  "РежимФормированияПечатныхФорм"));
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", НСтр("ru='Председатель комиссии';uk='Голова комісії'", КодЯзыкаПечать) );
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии", НСтр("ru='Члены комиссии';uk='Члени комісії'", КодЯзыкаПечать) );
	
	//	Данные для шапки акта
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", 	Ссылка);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Инвентаризация.Дата КАК Дата,
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	Инвентаризация.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	Инвентаризация.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	Инвентаризация.ДокументОснованиеНомер КАК ДокументОснованиеНомер
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСконтрагентами КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка";  
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ВыборкаПоКомиссии = РаботаСДиалогами.ПолучитьСведенияОКомиссии(ЭтотОбъект);
	
	//	Данные строк таблиц
	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.УстановитьПараметр("Ссылка", Ссылка);
	
	ЗапросКонтрагенты.Текст = 
	"ВЫБРАТЬ
	|	Инвентаризация.ВидЗадолженности КАК ВидЗадолженности,
	|	Инвентаризация.Контрагент КАК Контрагент,
	|	ПОДСТРОКА(Инвентаризация.Контрагент.НаименованиеПолное, 1, 200) КАК КонтрагентНаименованиеПолное,
	|	Инвентаризация.Контрагент.Наименование КАК КонтрагентНаименование,
	|	Инвентаризация.СчетРасчетов КАК СчетРасчетов,
	|	ПРЕДСТАВЛЕНИЕ(Инвентаризация.СчетРасчетов) КАК СчетРасчетовПредставление,
	|	СУММА(Инвентаризация.Подтверждено + Инвентаризация.НеПодтверждено) КАК Всего,
	|	СУММА(Инвентаризация.Подтверждено) КАК Подтверждено,
	|	СУММА(Инвентаризация.НеПодтверждено) КАК НеПодтверждено,
	|	СУММА(Инвентаризация.ИстекСрокДавности) КАК ИстекСрокДавности
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСконтрагентами.Контрагенты КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Инвентаризация.ВидЗадолженности,
	|	Инвентаризация.Контрагент,
	|	ПОДСТРОКА(Инвентаризация.Контрагент.НаименованиеПолное, 1, 200),
	|	Инвентаризация.СчетРасчетов,
	|	Инвентаризация.Контрагент.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтрагентНаименование,
	|	Инвентаризация.СчетРасчетов.Порядок
	|ИТОГИ
	|	СУММА(Всего),
	|	СУММА(Подтверждено),
	|	СУММА(НеПодтверждено),
	|	СУММА(ИстекСрокДавности)
	|ПО
	|	ВидЗадолженности";
	
	РезультатКонтрагенты = ЗапросКонтрагенты.Выполнить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетов_ИНВ17";
	
	Макет = ПолучитьМакет("ИНВ17");
	
	Макет.КодЯзыкаМакета = КодЯзыкаПечать; 	 
	
	// Формирование шапки
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Заполнить(Выборка);
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата);
	Шапка.Параметры.Организация = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации,,,КодЯзыкаПечать);

	Шапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	Шапка.Параметры.ДеньДокумента  = День(Выборка.Дата);
	Шапка.Параметры.МесяцДокумента = Сред(Формат(Выборка.Дата, "ДЛФ=ДД;"+НСтр("ru='Л=ru';uk='Л=uk'", КодЯзыкаПечать)), 
	                                   Найти(Формат(Выборка.Дата, "ДЛФ=ДД;"+НСтр("ru='Л=ru';uk='Л=uk'",КодЯзыкаПечать)), " "));
													 
	Шапка.Параметры.ДеньОснования = День(Выборка.ДокументОснованиеДата);
	Шапка.Параметры.МесяцОснования = Сред(Формат(Выборка.ДокументОснованиеДата, "ДЛФ=ДД;"+НСтр("ru='Л=ru';uk='Л=uk'", КодЯзыкаПечать)), 
	                                   Найти(Формат(Выборка.ДокументОснованиеДата, "ДЛФ=ДД;"+НСтр("ru='Л=ru';uk='Л=uk'", КодЯзыкаПечать)), " "));
	Шапка.Параметры.ДокументОснованиеНомер = Выборка.ДокументОснованиеНомер;
		
	ТабДокумент.Вывести(Шапка);

	// Формирование строк дебиторской задолженности
	ПодвалТаблицыДт = Макет.ПолучитьОбласть("ПодвалТаблицыДт");
	СтрокаТаблицыДт = Макет.ПолучитьОбласть("СтрокаТаблицыДт");
	
	ВыборкаПоВидуЗадолженности = РезультатКонтрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаПоВидуЗадолженности.НайтиСледующий(Перечисления.ВидыЗадолженности.Дебиторская, "ВидЗадолженности") Тогда

		ПодвалТаблицыДт.Параметры.Заполнить(ВыборкаПоВидуЗадолженности);
		
		ВыборкаПоКонтрагенту = ВыборкаПоВидуЗадолженности.Выбрать();
		Пока ВыборкаПоКонтрагенту.Следующий() Цикл
			СтрокаТаблицыДт.Параметры.Заполнить(ВыборкаПоКонтрагенту);
			СтрокаТаблицыДт.Параметры.КонтрагентПредставление = ?(ПустаяСтрока(ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное),
				ВыборкаПоКонтрагенту.КонтрагентНаименование, ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное);
			ТабДокумент.Вывести(СтрокаТаблицыДт);
		КонецЦикла;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ПодвалТаблицыДт);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Шапка оборотной стороны Акта
	ШапкаОборот = Макет.ПолучитьОбласть("ШапкаОборот");
	ТабДокумент.Вывести(ШапкаОборот);
	
	// Формирование строк кредиторской задолженности
	ПодвалТаблицыКт = Макет.ПолучитьОбласть("ПодвалТаблицыКт");
	СтрокаТаблицыКт = Макет.ПолучитьОбласть("СтрокаТаблицыКт");
			
	ВыборкаПоВидуЗадолженности.Сбросить();
	Если ВыборкаПоВидуЗадолженности.НайтиСледующий(Перечисления.ВидыЗадолженности.Кредиторская, "ВидЗадолженности") Тогда
		
		ПодвалТаблицыКт.Параметры.Заполнить(ВыборкаПоВидуЗадолженности);
		
		ВыборкаПоКонтрагенту = ВыборкаПоВидуЗадолженности.Выбрать();
		Пока ВыборкаПоКонтрагенту.Следующий() Цикл
			СтрокаТаблицыКт.Параметры.Заполнить(ВыборкаПоКонтрагенту);
			СтрокаТаблицыКт.Параметры.КонтрагентПредставление = ?(ПустаяСтрока(ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное),
				ВыборкаПоКонтрагенту.КонтрагентНаименование, ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное);
			ТабДокумент.Вывести(СтрокаТаблицыКт);
		КонецЦикла;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ПодвалТаблицыКт);
	
	// Подвал печатной формы
	Подвал = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Подвал);
	
	Подпись = Макет.ПолучитьОбласть("Подпись");   	
	
	// Выведем подпись председателя инвентаризационной комиссии
	Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
	Подпись.Параметры.Должность                = ВыборкаПоКомиссии.ПредседательКомиссииДолжность;
	Подпись.Параметры.РасшифровкаПодписи       = ВыборкаПоКомиссии.ПредседательКомиссииФИО;
	
	ТабДокумент.Вывести(Подпись);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();	
	
	НаименованиеЧленовКомиссии = Новый Массив;
	НаименованиеЧленовКомиссии.Добавить("ПервыйЧленКомиссии");
	НаименованиеЧленовКомиссии.Добавить("ВторойЧленКомиссии");
	НаименованиеЧленовКомиссии.Добавить("ТретийЧленКомиссии");
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из НаименованиеЧленовКомиссии Цикл
		
		Если НЕ ТабДокумент.ПроверитьВывод(Подпись) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
		                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
													   "");
		Подпись.Параметры.Должность                = ВыборкаПоКомиссии[ЧленКомиссии + "Должность"];
		Подпись.Параметры.РасшифровкаПодписи       = ВыборкаПоКомиссии[ЧленКомиссии + "ФИО"];
		
		ТабДокумент.Вывести(Подпись);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;     	
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьИнв17()     

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли; 
	
	// Получить экземпляр документа на печать
	ТабДокумент = ПечатьИнв17();	
	
	Если НЕ (ТабДокумент = Неопределено) Тогда
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 
			КоличествоЭкземпляров, 
			НаПринтер, 
			ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Метаданные().Представление()), 
			Ссылка);
	КонецЕсли;
		
	
КонецПроцедуры // Печать

# КонецЕсли 

//	Функция возвращает доступные варианты печати документа
//
//	Значение: Структура вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ИНВ17", НСтр("ru='ИНВ-17 (акт инвентаризации)';uk='ІНВ-17 (акт інвентаризації)'")); 
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

