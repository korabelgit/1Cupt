Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВестиСкладскойУчет Экспорт;
// коэфф для текущего года
Перем мКоэффициентПропорциональногоНДС Экспорт;

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru='Документ можно распечатать только после его записи';uk='Документ можна роздрукувати тільки після його запису'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выполняет движения по регистрам.
//
Процедура ДвиженияПоРегистрам(ТаблицаПоАвансамПоставщикам, ТаблицаПоПерерасчетуОС, ТаблицаОстатков15Счета, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ДвиженияПоЗатратамПоТоварам(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ДвиженияПоОстаткам15Счета(ТаблицаОстатков15Счета, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПересчетПропорциональногоНДСПоВзаиморасчетам(ТаблицаПоАвансамПоставщикам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ДвиженияПоОС(ТаблицаПоПерерасчетуОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ФормированиеДокументаУстановкаКоэффициентаПропорциональногоОтнесенияНДСНаКредит(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// технологическая операция по регистру учета пропорционального НДС по ОС
	ЗакрытиеРегистраСтоимостьПриобретенияОСПропорциональноОблагаемыхНДС(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Дата > '20160101' Тогда
		ДвиженияПоРегиструОжидаемогоИПодтвержденногоНДСПродаж(СтруктураШапкиДокумента, Отказ, Заголовок);	
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоЗатратамПоТоварам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СуммаКорректировкиБУ = 0 И СуммаКорректировкиНУ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Проводка = Движения.Хозрасчетный.Добавить();

	Проводка.Период      = Дата;

	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = НСтр("ru='Корректировка пропорц. НДС по товарам/услугам и ОС';uk='Коригування пропорц. ПДВ по товарам/послугам та ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());

	Проводка.СчетДт      = СтруктураШапкиДокумента.СчетДт;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоДт1, Истина);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоДт2);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоДт3);
	
	// проводку будем делать транзитом через счет корректировки НК, так, чтобы проводка по счету НДС (6412) была по дебету.
	//Проводка.СчетКт      = СтруктураШапкиДокумента.СчетНДС;
	Проводка.СчетКт      = СтруктураШапкиДокумента.СчетКорректировкиНДС;
	//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, СтруктураШапкиДокумента.СубконтоКт1, Истина);
	//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2, СтруктураШапкиДокумента.СубконтоКт2);
	//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3, СтруктураШапкиДокумента.СубконтоКт3);

	Проводка.Сумма       = СуммаКорректировкиБУ;
	
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
		Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
			Проводка.СуммаНУДт = СуммаКорректировкиНУ;	
		КонецЕсли;
	КонецЕсли;

	Если СтруктураШапкиДокумента.дата > '20160101' Тогда
		//c 2016 года  проводки формируются через корректировки обязательств!
		Проводка.СчетКт      = СтруктураШапкиДокумента.СчетНДСУсловнаяПродажа;
	Иначе	
		
		// проводку будем делать транзитом через счет корректировки НК, так, чтобы проводка по счету НДС (6412) была по дебету.
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Дата;

		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = НСтр("ru='Корректировка пропорц. НДС по товарам/услугам';uk='Коригування пропорц. ПДВ по товарам/послугам'",Локализация.КодЯзыкаИнформационнойБазы());

		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоКт1, Истина);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоКт3);

		Проводка.СчетКт      = СтруктураШапкиДокумента.СчетКорректировкиНДС;

		Проводка.Сумма       = - СуммаКорректировкиБУ;
		
	КонецЕсли;
	
	// сразу отнесем на фин. рез
	Проводка = Движения.Хозрасчетный.Добавить();

	Проводка.Период      = Дата;

	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = НСтр("ru='Отнесение на фин. результат результата пересчета пропорц. НДС по товарам/услугам';uk='Віднесення на фін. результат перерахунку пропорц. ПДВ по товарам/послугам'",Локализация.КодЯзыкаИнформационнойБазы());

	Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РезультатОперационнойДеятельности;
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
		Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
			Проводка.СуммаНУДт = СуммаКорректировкиНУ;	
		КонецЕсли;
	КонецЕсли;
	
	Проводка.СчетКт      = СтруктураШапкиДокумента.СчетДт;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, СтруктураШапкиДокумента.СубконтоДт1, Истина);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2, СтруктураШапкиДокумента.СубконтоДт2);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3, СтруктураШапкиДокумента.СубконтоДт3);

	Проводка.Сумма       = СуммаКорректировкиБУ;
	
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
		Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
			Проводка.СуммаНУКт = СуммаКорректировкиНУ;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоОстаткам15Счета(ТаблицаОстатков15Счета, СтруктураШапкиДокумента, Отказ, Заголовок)

	Для Каждого Строка Из ТаблицаОстатков15Счета Цикл
		
		Если Строка.СуммаКорректировкиНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Дата;

		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = НСтр("ru='Корректировка пропорц. НДС по инвестициям';uk='Коригування пропорц. ПДВ по инвестициям'",Локализация.КодЯзыкаИнформационнойБазы());

		Проводка.СчетДт      = Строка.Счет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ОбъектыСтроительства", Строка.НеоборотныйАктив);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НематериальныеАктивы", Строка.НеоборотныйАктив);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", 		 Строка.НеоборотныйАктив);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",  			 Строка.Склад);
		
		Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			Если Строка.КорректироватьПоНУ Тогда
				Проводка.СуммаНУДт = - Строка.СуммаКорректировкиНДС;	
			КонецЕсли;
		КонецЕсли;
		
		Проводка.СчетКт      = СтруктураШапкиДокумента.СчетКорректировкиНДС;

		Проводка.Сумма       = - Строка.СуммаКорректировкиНДС;
		
		Если СтруктураШапкиДокумента.дата > '20160101' Тогда
			//c 2016 года  проводки формируются через корректировки обязательств!
			Проводка.СчетКт  = СтруктураШапкиДокумента.СчетНДСУсловнаяПродажа;
		Иначе	
		
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Дата;

			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = НСтр("ru='Корректировка пропорц. НДС по инвестициям';uk='Коригування пропорц. ПДВ по инвестициям'",Локализация.КодЯзыкаИнформационнойБазы());

			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоКт1, Истина);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоКт3);

			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетКорректировкиНДС;

			Проводка.Сумма       = Строка.СуммаКорректировкиНДС;
		КонецЕсли;	
		
		Если ТипЗнч(Строка.НеоборотныйАктив) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда
				// движения по регистру УчетЗатратРегл
				Движение = Движения.УчетЗатратРегл.Добавить();
				
				Движение.ВидДвижения 				= ВидДвиженияНакопления.Приход;
				Движение.Период 					= Дата;
				
				АналитикаВидаУчета = Неопределено;
				АналитикаУчетаЗатрат = Неопределено;
				АналитикаРаспределенияЗатрат = Неопределено;
				АналитикаУчетаПартий = Неопределено;
				
				СтруктураПараметров = Новый Структура;
				
				СтруктураПараметров.Вставить("РазделУчета", Перечисления.РазделыУчета.МПЗ);
	
				СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
				СтруктураПараметров.Вставить("СчетУчета", Строка.Счет);
				СтруктураПараметров.Вставить("Склад", Строка.Склад);
				СтруктураПараметров.Вставить("НалоговоеНазначение", Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально);
				
				АналитикаВидаУчета = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
					СтруктураШапкиДокумента,
					СтруктураПараметров,
					Перечисления.КлючиАналитики.АналитикаВидаУчета,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
				);
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Затрата", Строка.НеоборотныйАктив);
				СтруктураПараметров.Вставить("ХарактеристикаЗатраты", Строка.ХарактеристикаНоменклатуры);
				СтруктураПараметров.Вставить("СерияЗатраты", Строка.СерияНоменклатуры);
				
				АналитикаУчетаЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
					СтруктураШапкиДокумента,
					СтруктураПараметров,
					Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
				);
				
				
				СтруктураПараметров = Новый Структура;
				АналитикаРаспределенияЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
					СтруктураШапкиДокумента,
					СтруктураПараметров,
					Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
				);
				
				АналитикаУчетаПартий = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
					СтруктураШапкиДокумента,
					СтруктураПараметров,
					Перечисления.КлючиАналитики.АналитикаУчетаПартий,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
				);
				
				Движение.АналитикаВидаУчета = АналитикаВидаУчета;
				Движение.АналитикаУчетаЗатрат = АналитикаУчетаЗатрат;
				Движение.АналитикаРаспределенияЗатрат = АналитикаРаспределенияЗатрат;
				Движение.АналитикаУчетаПартий = АналитикаУчетаПартий;
				
				Движение.Стоимость 				= - Строка.СуммаКорректировкиНДС;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Если Строка.КорректироватьПоНУ Тогда
						Движение.СтоимостьНУ 			= - Строка.СуммаКорректировкиНДС;
					КонецЕсли;
				КонецЕсли;
				
				Движение.НДСВходящий 				= Строка.СуммаКорректировкиНДС;
				Движение.НДСКредит 					= Строка.СуммаКорректировкиНДС;
				
				// Движение.КодОперации				= Перечисления.КодыОперацийПартииТоваров.КорректировкиНУ;
				
				
			Иначе	
				// движения по регистру ПартииТоваровНаСкладахБухгалтерскийУчет
				Движение = Движения.ПартииТоваровНаСкладахБухгалтерскийУчет.Добавить();
				
				Движение.ВидДвижения 				= ВидДвиженияНакопления.Приход;
				Движение.Период 					= Дата;
				
				Движение.Организация 				= СтруктураШапкиДокумента.Организация;
				Движение.Номенклатура 				= Строка.НеоборотныйАктив;
				Движение.СчетУчета 					= Строка.Счет;
				Движение.НалоговоеНазначение 		= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально;
				Движение.Склад 						= Строка.Склад;
				Движение.ДокументОприходования 		= Строка.ДокументОприходования;
				Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
				Движение.СерияНоменклатуры 			= Строка.СерияНоменклатуры;
				Движение.Качество                   = Справочники.Качество.Новый; 
				
				Движение.Стоимость 				= - Строка.СуммаКорректировкиНДС;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Если Строка.КорректироватьПоНУ Тогда
						Движение.СтоимостьНУ 			= - Строка.СуммаКорректировкиНДС;
					КонецЕсли;
				КонецЕсли;
				
				Движение.НДСВходящий 				= Строка.СуммаКорректировкиНДС;
				Движение.НДСКредит 					= Строка.СуммаКорректировкиНДС;
				
				Движение.КодОперации				= Перечисления.КодыОперацийПартииТоваров.КорректировкиНУ;
				
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(Строка.НеоборотныйАктив) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				// движения по регистру СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет
				Движение = Движения.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.Добавить();
				
				Движение.ВидДвижения 				= ВидДвиженияНакопления.Приход;
				Движение.Период 					= Дата;
				
				Движение.Организация 				= СтруктураШапкиДокумента.Организация;
				Движение.ОбъектСтроительства 		= Строка.НеоборотныйАктив;
				Движение.СчетУчета 					= Строка.Счет;
				Движение.НалоговоеНазначение 		= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально;
				
				Движение.Стоимость 				= - Строка.СуммаКорректировкиНДС;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Если Строка.КорректироватьПоНУ Тогда
						Движение.СтоимостьНУ 			= - Строка.СуммаКорректировкиНДС;
					КонецЕсли;
				КонецЕсли;
				
				Движение.НДСВходящий 				= Строка.СуммаКорректировкиНДС;
				Движение.НДСКредит 					= Строка.СуммаКорректировкиНДС;

		КонецЕсли;	

	КонецЦикла;

КонецПроцедуры

Процедура ПересчетПропорциональногоНДСПоВзаиморасчетам(ТаблицаПоАвансамПоставщикам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если Месяц(Дата) <> 12 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из ТаблицаПоАвансамПоставщикам Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Дата;

		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = НСтр("ru='Корректировка пропорц. НДС по предоплатам за товары/услуги';uk='Коригування пропорц. ПДВ по передоплатам за товари/послуги'",Локализация.КодЯзыкаИнформационнойБазы());

		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетНДС;
		Если СтруктураШапкиДокумента.дата > '20160101' Тогда
			//c 2016 года  проводки формируются через корректировки обязательств!
			Проводка.СчетДт  = СтруктураШапкиДокумента.СчетНДСУсловнаяПродажа;
		Иначе	
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоКт1, Истина);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоКт3);
		КонецЕсли;

		Проводка.СчетКт      = Строка.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        				Строка.Контрагент, Истина);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           				Строка.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Сделки", 							Строка.Сделка);

		Проводка.Сумма          = Строка.СуммаНДСПропорционально * ?(Строка.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком, -1, 1);
		
	КонецЦикла;
				   
	
	///////////////////////////////////////////////////////
	// теперь сформируем движения по регистру Ожидаемого и подтвержденного НДС по договорам со сложным налоговым учетом (чтобы правильно закрылись поставки следующего года)
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаПоАвансамПоставщикамКопия = ТаблицаПоАвансамПоставщикам.Скопировать();
	
	// оставим строки по которым есть сумма корректировки и договора - с простым налоговым учетом
	Инд = 0;
	Пока ТаблицаПоАвансамПоставщикамКопия.Количество() > Инд Цикл
	
		Строка = ТаблицаПоАвансамПоставщикамКопия[Инд];
		Если Строка.СуммаНДСПропорционально = 0 Тогда
			ТаблицаПоАвансамПоставщикамКопия.Удалить(Строка);
		ИначеЕсли Строка.СложныйНалоговыйУчет = Ложь Тогда
			ТаблицаПоАвансамПоставщикамКопия.Удалить(Строка);
		Иначе
			Инд = Инд + 1;
		КонецЕсли;
	
	КонецЦикла;
	
	// записывать в регистр будем только сумму корректировки пропорционального НДС
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоАвансамПоставщикамКопия, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально, "НалоговоеНазначение");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.КорректировкаРегламентная, "КодОперации");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьРасход();
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоОС(ТаблицаПоПерерасчетуОС, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// 1. по СправочникСсылка.ОсновныеСредства
	ЗапросПараметрыАмортизацииОС = Новый Запрос();
	ЗапросПараметрыАмортизацииОС.УстановитьПараметр("Период", 		Дата);
	ЗапросПараметрыАмортизацииОС.УстановитьПараметр("Организация", 	Организация);
	ЗапросПараметрыАмортизацииОС.УстановитьПараметр("СписокОС", 	ПараметрыПерерасчетаОС.ВыгрузитьКолонку("НеоборотныйАктив"));
	
	ЗапросПараметрыАмортизацииОС.Текст = "ВЫБРАТЬ
	                                     |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования,
	                                     |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот,
	                                     |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации,
	                                     |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации,
	                                     |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
	                                     |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость,
	                                     |	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияНУ,
	                                     |	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизацииНУ,
	                                     |	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизацииНУ,
	                                     |	ЕстьNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство, ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство) КАК ОсновноеСредство,
										 |	СчетаБухгалтерскогоУчетаОС.СчетУчета                                КАК СчетУчетаБУ,
										 |	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации                КАК СчетНачисленияАмортизацииБУ
	                                     |ИЗ
	                                     |	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	                                     |			&Период,
	                                     |			Организация = &Организация
	                                     |				И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
										 |ЛЕВОЕ СОЕДИНЕНИЕ
										 |	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
										 |		            &Период,
										 |		            Организация = &Организация
										 |		            И ОсновноеСредство В (&СписокОС)) КАК СчетаБухгалтерскогоУчетаОС
										 |ПО ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство
										 |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	                                     |				&Период,
	                                     |				Организация = &Организация
	                                     |					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	                                     |		ПО ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство";
	
	ЗапросПараметрыАмортизацииОС = ЗапросПараметрыАмортизацииОС.Выполнить().Выгрузить();

	Для каждого СтрокаТЧ Из ТаблицаПоПерерасчетуОС Цикл
		
		Если НЕ ТипЗнч(СтрокаТЧ.НеоборотныйАктив) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.ОССписан = Истина Тогда
			ДвиженияПоКорректировкеКредитаПоСписаннымОС(СтруктураШапкиДокумента, СтрокаТЧ);
			Продолжить;
		КонецЕсли;		
		
		// Движения по регистру ПараметрыАмортизации - изменена первоначальная стоимость ОС
		СтрокаПараметров = ЗапросПараметрыАмортизацииОС.Найти(СтрокаТЧ.НеоборотныйАктив, "ОсновноеСредство");
		Если СтрокаПараметров = Неопределено 
			 ИЛИ НЕ ЗначениеЗаполнено(СтрокаПараметров.СчетУчетаБУ)
			 ИЛИ НЕ ЗначениеЗаполнено(СтрокаПараметров.СчетНачисленияАмортизацииБУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По ОС %1 в строке %2 не обнаружены данные по учету! По данному ОС проводки не сформированы!'; uk = 'По ОЗ %1 у рядку %2 не знайдені дані по обліку! За даним ОЗ проведення не сформовані!'"), СтрокаТЧ.НеоборотныйАктив, СтрокаТЧ.НомерСтроки), , Заголовок);
			Продолжить;	
		КонецЕсли;
		
		СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяОС;
		Если СтрокаПараметров.СчетНачисленияАмортизацииБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивов) Тогда
			СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяМНМА;
		КонецЕсли;
		
		ДвижениеПоОСПоПерерасчетам(СтруктураШапкиДокумента, СтрокаТЧ, СтрокаПараметров, "ОсновныеСредства", СтатьяЗатрат);
		
		// зафиксируем изменения в регистрах учета параметров ОС
		Движение = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаПараметров);
		
		Движение.Период                                       = Дата;
		Движение.ОсновноеСредство                             = СтрокаТЧ.НеоборотныйАктив;
		Движение.Организация                                  = Организация;
		
		Движение.СтоимостьДляВычисленияАмортизации    		  = Движение.СтоимостьДляВычисленияАмортизации - СтрокаТЧ.СуммаКорректировкиНДС;
		
		// Движения по регистру ПараметрыАмортизацииНУ - изменена первоначальная стоимость ОС
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда	
			
			Движение = Движения.ПараметрыАмортизацииОСНалоговыйУчет.Добавить();
			
			Движение.Период 									= Дата;
			Движение.ОсновноеСредство 							= СтрокаТЧ.НеоборотныйАктив;
			Движение.Организация 								= Организация;
			
			Движение.СрокПолезногоИспользования 				= СтрокаПараметров.СрокПолезногоИспользованияНУ;
			
			Движение.СрокИспользованияДляВычисленияАмортизации 	= СтрокаПараметров.СрокИспользованияДляВычисленияАмортизацииНУ;
			
			Движение.СтоимостьДляВычисленияАмортизации 		    = СтрокаПараметров.СтоимостьДляВычисленияАмортизацииНУ - СтрокаТЧ.СуммаКорректировкиНДС;						
			
		КонецЕсли;
		
		// движения по регистру СтоимостьОСБухгалтерскийУчет
		Движение = Движения.СтоимостьОСБухгалтерскийУчет.Добавить();
		
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Приход;
		
		Движение.Период 				= Дата;
		Движение.ОсновноеСредство 		= СтрокаТЧ.НеоборотныйАктив;
		Движение.Организация 			= Организация;
		
		Движение.Стоимость 				= - СтрокаТЧ.СуммаКорректировкиНДС;
		Движение.СтоимостьНУ 			= - СтрокаТЧ.СуммаКорректировкиНДС;
		
		Движение.Амортизация 			= + СтрокаТЧ.СуммаКорректировкиБУ;
		Движение.АмортизацияНУ			= + СтрокаТЧ.СуммаКорректировкиНУ;
		
	
	КонецЦикла;
	
	// 2. по СправочникСсылка.НематериальныеАктивы
	ЗапросПараметрыАмортизацииНМА = Новый Запрос();
	ЗапросПараметрыАмортизацииНМА.УстановитьПараметр("Период", 		Дата);
	ЗапросПараметрыАмортизацииНМА.УстановитьПараметр("Организация", 	Организация);
	ЗапросПараметрыАмортизацииНМА.УстановитьПараметр("НематериальныйАктив", 	ПараметрыПерерасчетаОС.ВыгрузитьКолонку("НеоборотныйАктив"));
	
	ЗапросПараметрыАмортизацииНМА.Текст = "ВЫБРАТЬ
	                                     |	ПервоначальныеСведенияНМАБухгалтерскийУчет.ПервоначальнаяСтоимость,
	                                     |	ПервоначальныеСведенияНМАБухгалтерскийУчет.НачислятьАмортизацию,
	                                     |	ПервоначальныеСведенияНМАБухгалтерскийУчет.СпособНачисленияАмортизации,
	                                     |	ПервоначальныеСведенияНМАБухгалтерскийУчет.СрокПолезногоИспользования,
	                                     |	ПервоначальныеСведенияНМАБухгалтерскийУчет.ОбъемПродукцииРаботДляВычисленияАмортизации,
	                                     |	ПервоначальныеСведенияНМАБухгалтерскийУчет.ЛиквидационнаяСтоимость,
										 |	ПервоначальныеСведенияНМАНалоговыйУчет.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимостьНУ,
	                                     |	ПервоначальныеСведенияНМАНалоговыйУчет.НачислятьАмортизацию КАК НачислятьАмортизацию,
										 |	ПервоначальныеСведенияНМАНалоговыйУчет.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
										 |	ПервоначальныеСведенияНМАНалоговыйУчет.НалоговаяГруппаОС КАК НалоговаяГруппаОС,
										 |	ПервоначальныеСведенияНМАНалоговыйУчет.НалоговоеНазначение КАК НалоговоеНазначение,
	                                     |	ЕстьNULL(ПервоначальныеСведенияНМАНалоговыйУчет.НематериальныйАктив, ПервоначальныеСведенияНМАБухгалтерскийУчет.НематериальныйАктив) КАК НематериальныйАктив,
										 |	СчетаБухгалтерскогоУчетаНМА.СчетУчета                                КАК СчетУчетаБУ,
										 |	СчетаБухгалтерскогоУчетаНМА.СчетНачисленияАмортизации                КАК СчетНачисленияАмортизацииБУ
	                                     |ИЗ
	                                     |	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	                                     |			&Период,
	                                     |			Организация = &Организация
	                                     |				И НематериальныйАктив В (&НематериальныйАктив)) КАК ПервоначальныеСведенияНМАБухгалтерскийУчет
										 |ЛЕВОЕ СОЕДИНЕНИЕ
										 |	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
										 |		            &Период,
										 |		            Организация = &Организация
										 |		            И НематериальныйАктив В (&НематериальныйАктив)) КАК СчетаБухгалтерскогоУчетаНМА
										 |ПО ПервоначальныеСведенияНМАБухгалтерскийУчет.НематериальныйАктив = СчетаБухгалтерскогоУчетаНМА.НематериальныйАктив
										 |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	                                     |				&Период,
	                                     |				Организация = &Организация
	                                     |					И НематериальныйАктив В (&НематериальныйАктив)) КАК ПервоначальныеСведенияНМАНалоговыйУчет
	                                     |		ПО ПервоначальныеСведенияНМАБухгалтерскийУчет.НематериальныйАктив = ПервоначальныеСведенияНМАНалоговыйУчет.НематериальныйАктив";
	
	ЗапросПараметрыАмортизацииНМА = ЗапросПараметрыАмортизацииНМА.Выполнить().Выгрузить();

	Для каждого СтрокаТЧ Из ТаблицаПоПерерасчетуОС Цикл
		
		Если НЕ ТипЗнч(СтрокаТЧ.НеоборотныйАктив) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.ОССписан = Истина Тогда
			ДвиженияПоКорректировкеКредитаПоСписаннымОС(СтруктураШапкиДокумента, СтрокаТЧ);
			Продолжить;
		КонецЕсли;		
		
		// Движения по регистру ПараметрыАмортизации - изменена первоначальная стоимость ОС
		СтрокаПараметров = ЗапросПараметрыАмортизацииНМА.Найти(СтрокаТЧ.НеоборотныйАктив, "НематериальныйАктив");
		Если СтрокаПараметров = Неопределено 
			 ИЛИ НЕ ЗначениеЗаполнено(СтрокаПараметров.СчетУчетаБУ)
			 ИЛИ НЕ ЗначениеЗаполнено(СтрокаПараметров.СчетНачисленияАмортизацииБУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По НМА %1 в строке %2 не обнаружены данные по учету! По данному НМА проводки не сформированы!'; uk = 'По НМА %1 у рядку %2 не знайдені дані по обліку! За даним НМА проведення не сформовані!'"), СтрокаТЧ.НеоборотныйАктив, СтрокаТЧ.НомерСтроки), , Заголовок);
			Продолжить;	
		КонецЕсли;
		
		ДвижениеПоОСПоПерерасчетам(СтруктураШапкиДокумента, СтрокаТЧ, СтрокаПараметров, "НематериальныеАктивы", СтруктураШапкиДокумента.СтатьяНМА);
	
		// зафиксируем изменения в регистрах учета параметров НМА
		Движение = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаПараметров);
		                                                                                     
		Движение.Период                                       = Дата;
		Движение.НематериальныйАктив                          = СтрокаТЧ.НеоборотныйАктив;
		Движение.Организация                                  = Организация;
		
		Движение.ПервоначальнаяСтоимость 		    = СтрокаПараметров.ПервоначальнаяСтоимость - СтрокаТЧ.СуммаКорректировкиНДС;
		
		// Движения по регистру ПараметрыАмортизацииНУ - изменена первоначальная стоимость ОС
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда	
			
			Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
			
			ЗаполнитьЗначенияСвойств(Движение, СтрокаПараметров);
			
			Движение.Период 							= Дата;
			Движение.НематериальныйАктив 				= СтрокаТЧ.НеоборотныйАктив;
			Движение.Организация 						= Организация;
			
			Движение.ПервоначальнаяСтоимость 		    = СтрокаПараметров.ПервоначальнаяСтоимостьНУ - СтрокаТЧ.СуммаКорректировкиНДС;
			
		КонецЕсли;
		
		// движения по регистру СтоимостьНМАБухгалтерскийУчет
		Движение = Движения.СтоимостьНМАБухгалтерскийУчет.Добавить();
		
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Приход;

		Движение.Период 				= Дата;
		Движение.НематериальныйАктив 	= СтрокаТЧ.НеоборотныйАктив;
		Движение.Организация 			= Организация;
		
		Движение.Стоимость 				= - СтрокаТЧ.СуммаКорректировкиНДС;
		Движение.СтоимостьНУ 			= - СтрокаТЧ.СуммаКорректировкиНДС;
		
		Движение.Амортизация 			= + СтрокаТЧ.СуммаКорректировкиБУ;
		Движение.АмортизацияНУ			= + СтрокаТЧ.СуммаКорректировкиНУ;
		
	КонецЦикла;
	
	// 3. по СправочникСсылка.Номенклатура
	ЗапросПараметрыАмортизацииМНМА = Новый Запрос();
	ЗапросПараметрыАмортизацииМНМА.УстановитьПараметр("Период", 	КонецМесяца(Дата));
	ЗапросПараметрыАмортизацииМНМА.УстановитьПараметр("Организация",Организация);
	ЗапросПараметрыАмортизацииМНМА.УстановитьПараметр("Счет1112", 	ПланыСчетов.Хозрасчетный.БиблиотечныеФондыКоличественно);
	ЗапросПараметрыАмортизацииМНМА.УстановитьПараметр("Счет1122", 	ПланыСчетов.Хозрасчетный.МалоценныеНеоборотныеМатериальныеАктивыКоличественно);
	ЗапросПараметрыАмортизацииМНМА.УстановитьПараметр("Счет1322", 	ПланыСчетов.Хозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовКоличественно);
	ЗапросПараметрыАмортизацииМНМА.УстановитьПараметр("МНМА", 		ПараметрыПерерасчетаОС.ВыгрузитьКолонку("НеоборотныйАктив"));
	ЗапросПараметрыАмортизацииМНМА.УстановитьПараметр("Номенклатура", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);	
	
	ЗапросПараметрыАмортизацииМНМА.УстановитьПараметр("Пропорциональное", 	Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально);
	
	ЗапросПараметрыАмортизацииМНМА.Текст = "ВЫБРАТЬ
	                                       |	ВЫБОР
	                                       |		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (&Счет1322)
	                                       |			ТОГДА ХозрасчетныйОстатки.Счет
	                                       |	КОНЕЦ КАК СчетНачисленияАмортизацииБУ,
	                                       |	ВЫБОР
	                                       |		КОГДА НЕ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (&Счет1322)
	                                       |			ТОГДА ХозрасчетныйОстатки.Счет
	                                       |	КОНЕЦ КАК СчетУчетаБУ,
	                                       |	ХозрасчетныйОстатки.Субконто1 КАК МНМА,
	                                       |	ХозрасчетныйОстатки.СуммаОстаток КАК Остаток
	                                       |ПОМЕСТИТЬ ВложенныйЗапрос
	                                       |ИЗ
	                                       |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	                                       |			&Период,
	                                       |			Счет В ИЕРАРХИИ (&Счет1112)
	                                       |				ИЛИ Счет В ИЕРАРХИИ (&Счет1122)
	                                       |				ИЛИ Счет В ИЕРАРХИИ (&Счет1322),
	                                       |			&Номенклатура,
	                                       |			Организация = &Организация
	                                       |				И НАлоговоеНазначение = &Пропорциональное
	                                       |				И Субконто1 В (&МНМА)) КАК ХозрасчетныйОстатки
	                                       |;
	                                       |
	                                       |////////////////////////////////////////////////////////////////////////////////
	                                       |ВЫБРАТЬ
	                                       |	МАКСИМУМ(ВложенныйЗапрос.СчетУчетаБУ) КАК СчетУчетаБУ,
	                                       |	МАКСИМУМ(ВложенныйЗапрос.СчетНачисленияАмортизацииБУ) КАК СчетНачисленияАмортизацииБУ,
	                                       |	ВложенныйЗапрос.МНМА
	                                       |ИЗ
	                                       |	ВложенныйЗапрос КАК ВложенныйЗапрос
	                                       |
	                                       |СГРУППИРОВАТЬ ПО
	                                       |	ВложенныйЗапрос.МНМА
	                                       |
										   |";
										   
										   
	ЗапросПараметрыАмортизацииМНМА = ЗапросПараметрыАмортизацииМНМА.Выполнить().Выгрузить();
	
	ТабМНМА = Новый ТаблицаЗначений;
	ТабМНМА.Колонки.Добавить("НеоборотныйАктив");
	ТабМНМА.Колонки.Добавить("СуммаКорректировкиНДС");

	Для каждого СтрокаТЧ Из ТаблицаПоПерерасчетуОС Цикл
		
		Если НЕ ТипЗнч(СтрокаТЧ.НеоборотныйАктив) = Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.ОССписан = Истина Тогда
			ДвиженияПоКорректировкеКредитаПоСписаннымОС(СтруктураШапкиДокумента, СтрокаТЧ);
			Продолжить;
		КонецЕсли;		
		
		// Движения по регистру ПараметрыАмортизации - изменена первоначальная стоимость ОС
		СтрокаПараметров = ЗапросПараметрыАмортизацииМНМА.Найти(СтрокаТЧ.НеоборотныйАктив, "МНМА");
		Если СтрокаПараметров = Неопределено 
			 ИЛИ НЕ ЗначениеЗаполнено(СтрокаПараметров.СчетУчетаБУ)
			 ИЛИ НЕ ЗначениеЗаполнено(СтрокаПараметров.СчетНачисленияАмортизацииБУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По МНМА %1 в строке %2 не обнаружены данные по учету! По данному МНМА проводки не сформированы!'; uk = 'По МНМА %1 у рядку %2 не знайдені дані по обліку! За даним МНМА проведення не сформовані!'"), СтрокаТЧ.НеоборотныйАктив, СтрокаТЧ.НомерСтроки), , Заголовок);
			Продолжить;	
		КонецЕсли;
		
		ДвижениеПоОСПоПерерасчетам(СтруктураШапкиДокумента, СтрокаТЧ, СтрокаПараметров, "Номенклатура", СтруктураШапкиДокумента.СтатьяМНМА);
		
		СтрокаМНМА = ТабМНМА.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаМНМА, СтрокаТЧ);
	
	КонецЦикла;	
	
	ДвиженияПоМНМА(ТабМНМА, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// 4. запись в регистр СтоимостьПриобретенияОСПропорциональноОблагаемыхНДС суммы корректировки НДС
	НаборДвижений = Движения.СтоимостьПриобретенияОСПропорциональноОблагаемыхНДС;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	Для каждого СтрокаТЧ Из ТаблицаПоПерерасчетуОС Цикл
	    СтрокаРегистра = ТаблицаДвижений.Добавить();
		СтрокаРегистра.НеоборотныйАктив = СтрокаТЧ.НеоборотныйАктив;
		
		СтрокаРегистра.ДатаНачалаИспользования = СтрокаТЧ.ДатаНачалаИспользования;
		СтрокаРегистра.ДатаФормированияКредита = СтрокаТЧ.ДатаФормированияКредита;
		
		СтрокаРегистра.СуммаНДСПропорциональноКредит = СтрокаТЧ.СуммаКорректировкиНДС;
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СпецРежимНалогообложения, "СпецРежимНалогообложения");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
		Движения.СтоимостьПриобретенияОСПропорциональноОблагаемыхНДС.ВыполнитьПриход();
		Движения.СтоимостьПриобретенияОСПропорциональноОблагаемыхНДС.Записать();
			
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоОС

Процедура ДвижениеПоОСПоПерерасчетам(СтруктураШапкиДокумента, СтрокаТЧ, СтрокаПараметров, ВидСубконто, СтатьяЗатрат);
		
	Если СтрокаТЧ.СуммаКорректировкиНДС <> 0 Тогда
	
		Если СтрокаТЧ.ДатаНачалаИспользования >= НачалоГода(Дата) Тогда   
			
			// проводки по плану счетов по корректировке начальной стоимости ОС на сумму налогового кредита
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Активность 	= Истина;
			Проводка.Организация 	= Организация;
			Проводка.Период 		= Дата;
			
			Проводка.СчетДт = СтрокаПараметров.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВидСубконто, СтрокаТЧ.НеоборотныйАктив);
			Проводка.Содержание = НСтр("ru = 'Изменение балансовой стоимости в связи с перерасчетом НДС'; uk = 'Зміна балансової вартості у зв''язку з перерахунком ПДВ'");
			
			Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда	
				Проводка.СуммаНУДт	= -СтрокаТЧ.СуммаКорректировкиНДС;
			КонецЕсли;
			
			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетНДСУсловнаяПродажа;

			Проводка.Сумма       = -СтрокаТЧ.СуммаКорректировкиНДС;
			
		Иначе
			
			// проводки по плану счетов по корректировке начальной стоимости ОС на сумму налогового кредита
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Активность 	= Истина;
			Проводка.Организация 	= Организация;
			Проводка.Период 		= Дата;
			
			Проводка.СчетДт = СтрокаПараметров.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВидСубконто, СтрокаТЧ.НеоборотныйАктив);
			Проводка.Содержание = НСтр("ru = 'Изменение балансовой стоимости в связи с перерасчетом НДС'; uk = 'Зміна балансової вартості у зв''язку з перерахунком ПДВ'");
			
			Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда	
				Проводка.СуммаНУДт	= -СтрокаТЧ.СуммаКорректировкиНДС;
			КонецЕсли;
			
			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетКорректировкиНДС;

			Проводка.Сумма       = -СтрокаТЧ.СуммаКорректировкиНДС;
			
			// транзитом на 6412
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Дата;

			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = НСтр("ru='Корректировка пропорц. НДС по ОС';uk='Коригування пропорц. ПДВ по ОС'",Локализация.КодЯзыкаИнформационнойБазы());

			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоКт1, Истина);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоКт3);

			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетКорректировкиНДС;

			Проводка.Сумма       = СтрокаТЧ.СуммаКорректировкиНДС;
			
		КонецЕсли;
	
	КонецЕсли;
	
	// проводка на затраты в связи с пересчетом накопленной амортизации
	Если    СтрокаТЧ.СуммаКорректировкиБУ <> 0
		ИЛИ СтрокаТЧ.СуммаКорректировкиНУ <> 0 Тогда
	
		// проводки по затратам по пересчету накопленной амортизации при корректировке НДС
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Активность 	= Истина;
		Проводка.Организация 	= Организация;
		Проводка.Период 		= Дата;
		Проводка.Содержание = НСтр("ru = 'Изменение накопленной амортизации в связи с перерасчетом НДС'; uk = 'Зміна накопиченої амортизації у зв''язку з перерахунком ПДВ'");
		
		Проводка.Сумма = СтрокаТЧ.СуммаКорректировкиБУ;
		
		Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоДт1, Истина);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоДт3);

		// статью затрат определим для каждого вида необоротных активов
		Если ТипЗнч(СтатьяЗатрат) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "СтатьиЗатрат", СтатьяЗатрат);
		Иначе	
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "СтатьиНеоперационныхРасходов", СтатьяЗатрат);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
			Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
				Проводка.СуммаНУДт = СтрокаТЧ.СуммаКорректировкиНУ;	
			КонецЕсли;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаПараметров.СчетНачисленияАмортизацииБУ;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВидСубконто, СтрокаТЧ.НеоборотныйАктив);
		
		Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда	
			Проводка.СуммаНУКт	= СтрокаТЧ.СуммаКорректировкиНУ;
		КонецЕсли;
		
		
		// сразу отнесем на фин. рез
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Дата;

		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = НСтр("ru='Отнесение на фин. результат результата пересчета пропорц. НДС по ОС';uk='Віднесення на фін. результат перерахунку пропорц. ПДВ по ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());

		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РезультатОперационнойДеятельности;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
			Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
				Проводка.СуммаНУДт =  СтрокаТЧ.СуммаКорректировкиНУ;	
			КонецЕсли;
		КонецЕсли;
		
		Проводка.СчетКт      = СтруктураШапкиДокумента.СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, СтруктураШапкиДокумента.СубконтоДт1, Истина);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2, СтруктураШапкиДокумента.СубконтоДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3, СтруктураШапкиДокумента.СубконтоДт3);

		Проводка.Сумма       =  СтрокаТЧ.СуммаКорректировкиБУ;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
			Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
				Проводка.СуммаНУКт =  СтрокаТЧ.СуммаКорректировкиНУ;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДвижениеПоОСПоПерерасчетам

Процедура ДвиженияПоКорректировкеКредитаПоСписаннымОС(СтруктураШапкиДокумента, СтрокаТЧ)
	
	Если СтрокаТЧ.СуммаКорректировкиНДС = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроводкаСуммаКорректировкиБУ = СтрокаТЧ.СуммаКорректировкиБУ;
	ПроводкаСуммаКорректировкиНУ = СтрокаТЧ.СуммаКорректировкиНУ;
	
	Проводка = Движения.Хозрасчетный.Добавить();

	Проводка.Период      = Дата;

	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = НСтр("ru='Корректировка пропорц. НДС по ОС - списанными или учитываемым по справедливой стоимости ';uk='Коригування пропорц. ПДВ по ОЗ - списаним або тим що обліковуються за справедливою вартістю'",Локализация.КодЯзыкаИнформационнойБазы());

	Проводка.СчетДт      = СтруктураШапкиДокумента.СчетДт;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоДт1, Истина);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоДт2);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоДт3);
	
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
		Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
			Проводка.СуммаНУДт = ПроводкаСуммаКорректировкиНУ;	
		КонецЕсли;
	КонецЕсли;
	
	Проводка.СчетКт      = СтруктураШапкиДокумента.СчетКорректировкиНДС;
	Проводка.Сумма       = ПроводкаСуммаКорректировкиБУ;
	
	Проводка = Движения.Хозрасчетный.Добавить();

	Проводка.Период      = Дата;

	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = НСтр("ru='Корректировка пропорц. НДС по ОС - списанными или учитываемым по справедливой стоимости ';uk='Коригування пропорц. ПДВ по ОЗ - списаним або тим що обліковуються за справедливою вартістю'",Локализация.КодЯзыкаИнформационнойБазы());

	Проводка.СчетДт      = СтруктураШапкиДокумента.СчетНДС;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоКт1, Истина);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоКт2);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоКт3);

	Проводка.СчетКт      = СтруктураШапкиДокумента.СчетКорректировкиНДС;

	Проводка.Сумма       = - ПроводкаСуммаКорректировкиБУ;

	// сразу отнесем на фин. рез
	Проводка = Движения.Хозрасчетный.Добавить();

	Проводка.Период      = Дата;

	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = НСтр("ru='Отнесение на фин. результат результата пересчета пропорц. НДС по списанным ОС';uk='Віднесення на фін. результат перерахунку пропорц. ПДВ по списаним ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());

	Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РезультатОперационнойДеятельности;
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
		Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
			Проводка.СуммаНУДт = ПроводкаСуммаКорректировкиНУ;	
		КонецЕсли;
	КонецЕсли;
	
	Проводка.СчетКт      = СтруктураШапкиДокумента.СчетДт;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, СтруктураШапкиДокумента.СубконтоДт1, Истина);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2, СтруктураШапкиДокумента.СубконтоДт2);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3, СтруктураШапкиДокумента.СубконтоДт3);

	Проводка.Сумма       = ПроводкаСуммаКорректировкиБУ;
	
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
		Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
			Проводка.СуммаНУКт = ПроводкаСуммаКорректировкиНУ;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормированиеДокументаУстановкаКоэффициентаПропорциональногоОтнесенияНДСНаКредит(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ФормироватьДокументУстановкиКоэффициентаНаСледующийГод = Ложь
		ИЛИ Месяц(Дата) <> 12 Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СпецРежимНалогообложения", СпецРежимНалогообложения);
	Запрос.УстановитьПараметр("Период", НачалоГода(ДобавитьМесяц(СтруктураШапкиДокумента.Дата, 12)));
	
	Запрос.Текст = "ВЫБРАТЬ Первые 1
	               |	КоэффициентыПропорциональногоОтнесенияНДСНаКредит.Регистратор,
	               |	КоэффициентыПропорциональногоОтнесенияНДСНаКредит.Регистратор.Коэффициент КАК Коэффициент,
	               |	КоэффициентыПропорциональногоОтнесенияНДСНаКредит.Регистратор.СуммаОблагаемыхОпераций КАК СуммаОблагаемыхОпераций,
	               |	КоэффициентыПропорциональногоОтнесенияНДСНаКредит.Регистратор.СуммаВсехОпераций КАК СуммаВсехОпераций,
				   //	если движение сделал не документ установки коэффициента, а универсальный - мы это определим по отсутствию реквизита
				   |	ЕстьNULL(КоэффициентыПропорциональногоОтнесенияНДСНаКредит.Регистратор.ПоДаннымПрошлогоГода, НЕОПРЕДЕЛЕНО) КАК ПоДаннымПрошлогоГода
	               |ИЗ
	               |	РегистрСведений.КоэффициентыПропорциональногоОтнесенияНДСНаКредит КАК КоэффициентыПропорциональногоОтнесенияНДСНаКредит
	               |ГДЕ
	               |	КоэффициентыПропорциональногоОтнесенияНДСНаКредит.Организация = &Организация
	               |	И КоэффициентыПропорциональногоОтнесенияНДСНаКредит.СпецРежимНалогообложения = &СпецРежимНалогообложения
	               |	И КоэффициентыПропорциональногоОтнесенияНДСНаКредит.Период = &Период";
				                                    
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		// если запись в регистр сделал не правильный документ - не будем его переоформлять
		Если Выборка.ПоДаннымПрошлогоГода = Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru = 'Невозможно установить коэффициент пропорционального НДС на следующий год!
                           |Запись в регистр сформирована не документом ""Установка коэффициента пропорционального отнесения НДС на кредит""'"),,Заголовок);
						   
			Возврат;			  	 
		
		КонецЕсли;
		
		// проверим, нужно ли переоформлять этот документ
		Если    Выборка.ПоДаннымПрошлогоГода = Истина 
			И  Выборка.Коэффициент 				= СтруктураШапкиДокумента.Коэффициент/100
			И  Выборка.СуммаОблагаемыхОпераций 	= СтруктураШапкиДокумента.СуммаОблагаемыхОпераций
			И  Выборка.СуммаВсехОпераций		= СтруктураШапкиДокумента.СуммаВсехОпераций Тогда
		
			возврат;	
		
		КонецЕсли;
		
		Док = Выборка.Регистратор.ПолучитьОбъект();
		
	Иначе
		
		Док = Документы.УстановкаКоэффициентаПропорциональногоОтнесенияНДСНаКредит.СоздатьДокумент();
		
	КонецЕсли;
				   
	Док.Дата 		= НачалоГода(ДобавитьМесяц(СтруктураШапкиДокумента.Дата, 12));
	Док.Организация = СтруктураШапкиДокумента.Организация;
	Док.СпецРежимНалогообложения = СтруктураШапкиДокумента.СпецРежимНалогообложения;
	Док.Ответственный = СтруктураШапкиДокумента.Ответственный;
	Док.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сформирован автоматически документом %1'"), СтруктураШапкиДокумента.Ссылка);
	Док.МесяцРасчета = 12;
	Док.ПоДаннымПрошлогоГода = Истина;
	Док.СуммаОблагаемыхОпераций = СтруктураШапкиДокумента.СуммаОблагаемыхОпераций;
	Док.СуммаВсехОпераций = СтруктураШапкиДокумента.СуммаВсехОпераций;
	Док.Коэффициент = СтруктураШапкиДокумента.Коэффициент / 100;
	
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Невозможно установить коэффициент пропорционального НДС на следующий год! 
		| ошибка: %1'"), ОписаниеОшибки()),,Заголовок);
	КонецПопытки;
	
КонецПроцедуры // ФормированиеДокументаУстановкаКоэффициентаПропорциональногоОтнесенияНДСНаКредит

Процедура ЗакрытиеРегистраСтоимостьПриобретенияОСПропорциональноОблагаемыхНДС(СтруктураШапкиДокумента, Отказ, Заголовок)

	// закроем остатки в регистре, по ОС, которые эксплуатируются более 36 месяцев
	
	НаборДвижений = Движения.СтоимостьПриобретенияОСПропорциональноОблагаемыхНДС;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	Запрос = новый Запрос();
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СпецРежимНалогообложения", СпецРежимНалогообложения);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ДатаНачалаИспользования", НачалоГода(ДобавитьМесяц(Дата, - 36)));
	
    Запрос.Текст = "ВЫБРАТЬ
                   |	СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.НеоборотныйАктив,
                   |	СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.ДатаНачалаИспользования,
                   |	СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.ДатаФормированияКредита,
                   |	СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.БазаНДСОстаток КАК БазаНДС,
                   |	СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.СуммаНДСОстаток КАК СуммаНДС,
                   |	СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.СуммаНДСПропорциональноКредитОстаток КАК СуммаНДСПропорциональноКредит
                   |ИЗ
                   |	РегистрНакопления.СтоимостьПриобретенияОСПропорциональноОблагаемыхНДС.Остатки(&Период, 
				   |			ДатаНачалаИспользования < &ДатаНачалаИспользования 
				   |            И Организация = &Организация 
				   |			И СпецРежимНалогообложения = &СпецРежимНалогообложения
				   |    ) КАК СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки
				   |";
				   
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
		Движения.СтоимостьПриобретенияОСПропорциональноОблагаемыхНДС.ВыполнитьРасход();
		Движения.СтоимостьПриобретенияОСПропорциональноОблагаемыхНДС.Записать();
			
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеРегистраСтоимостьПриобретенияОСПропорциональноОблагаемыхНДС

Процедура ДвиженияПоРегиструОжидаемогоИПодтвержденногоНДСПродаж(СтруктураШапкиДокумента, Отказ, Заголовок)

	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	Запрос = новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
    Запрос.Текст = "ВЫБРАТЬ
                   |	ДокП2.СтавкаНДС КАК СтавкаНДС,
				   |	СУММА(-ДокП2.ИзменениеСуммыНДС) КАК СуммаНДС
                   |ИЗ
                   |	Документ.ПерерасчетПропорциональногоНДСпоТоварамИОС.НалоговыеДокументы КАК НалоговыеДокументы
                   |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Приложение2КНалоговойНакладной.Услуги КАК ДокП2
                   |		ПО (ДокП2.Ссылка = НалоговыеДокументы.П2)
                   |ГДЕ
                   |	НалоговыеДокументы.Ссылка = &Ссылка
                   |
                   |СГРУППИРОВАТЬ ПО
                   |	ДокП2.СтавкаНДС";
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажаВозврат, "СобытиеНДС");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УПП" Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая, "НалоговоеНазначение");
	КонецЕсли;		
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
			
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДвиженияПоМНМАПартионный(ТабМНМА, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// получим таблицу остатков
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КонПериода", 		 Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("ПропорциональныйНДС", Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.УстановитьПараметр("ВидМатериалаМНМА", Перечисления.ВидыМатериалов.МалоценныйНеоборотныйАктив);
	Запрос.УстановитьПараметр("ВидМатериалаБиблиотечныеФонды", Перечисления.ВидыМатериалов.БиблиотечныеФонды);
	
	ТабМНМА.Свернуть("НеоборотныйАктив", "СуммаКорректировкиНДС");
	МассивНоменклатуры = ТабМНМА.ВыгрузитьКолонку("НеоборотныйАктив");
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток.Организация,
				   |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток.Подразделение,
				   |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток.Номенклатура,
				   |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток.ХарактеристикаНоменклатуры,
				   |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток.СерияНоменклатуры,
				   |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток.ДокументПередачи,
				   |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток.ФизЛицо,
				   |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток.Качество,
				   |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток.ДокументОприходования,
				   |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток.СхемаНазначенияИспользования,
				   |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток.СпособОтраженияРасходов,
				   |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток.СрокПолезногоИспользования,
				   |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток.НалоговоеНазначение,
				   |
				   |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток.НДСВходящийОстаток
				   |
	               |ИЗ
	               |	РегистрНакопления.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет.Остатки(
	               |			&КонПериода,
	               |			Организация = &Организация 
				   |			И Номенклатура В (&МассивНоменклатуры)
				   |		    И (СхемаНазначенияИспользования.ВидМатериала = &ВидМатериалаМНМА 
				   |               ИЛИ СхемаНазначенияИспользования.ВидМатериала = &ВидМатериалаБиблиотечныеФонды
				   |              )
	               |			И НалоговоеНазначение = &ПропорциональныйНДС) КАК ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток
				   |
				   |УПОРЯДОЧИТЬ ПО 
				   |	ПартииМатериаловВЭксплуатацииБухгалтерскийУчетКонечныйОстаток.Номенклатура
				   |
				   |";
				   
	ТаблицаОстатковМНМА = Запрос.Выполнить().Выгрузить();
	
	// распределим сумму корректировки НДС пропорционально НДСВходящий конечных остатков
	
	НаборДвиженийПартииМатериаловВЭксплуатацииБухгалтерскийУчет = Движения.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет;
	ТаблицаДвиженийПартииМатериаловВЭксплуатацииБухгалтерскийУчет = НаборДвиженийПартииМатериаловВЭксплуатацииБухгалтерскийУчет.ВыгрузитьКолонки();
	
	Для Каждого СтрокаМНМА Из ТабМНМА Цикл
		
		МассивСтрокОстатковМНМА = ТаблицаОстатковМНМА.НайтиСтроки(Новый Структура("Номенклатура", СтрокаМНМА.НеоборотныйАктив));
		МассивКоэфСтрокОстатковМНМА = Новый Массив;
		Для Каждого СтрокаОстатковМНМА Из МассивСтрокОстатковМНМА Цикл
			МассивКоэфСтрокОстатковМНМА.Добавить(СтрокаОстатковМНМА.НДСВходящийОстаток);
		КонецЦикла;
		
		МассивСуммаКорректировкиНДС = ОбщегоНазначения.РаспределитьПропорционально(СтрокаМНМА.СуммаКорректировкиНДС, МассивКоэфСтрокОстатковМНМА, 2, Ложь);	
		
		Для Индекс = 0 По МассивСуммаКорректировкиНДС.ВГраница() Цикл
			
			СтрокаОстатковМНМА = МассивСтрокОстатковМНМА[Индекс];
			СтрокаРегистра = ТаблицаДвиженийПартииМатериаловВЭксплуатацииБухгалтерскийУчет.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаРегистра, СтрокаОстатковМНМА);
			
			СуммаКорректировкиНДСПоСтроке = МассивСуммаКорректировкиНДС[Индекс];
			
			СтрокаРегистра.Стоимость = - СуммаКорректировкиНДСПоСтроке;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда		
				СтрокаРегистра.СтоимостьНУ = - СуммаКорректировкиНДСПоСтроке;	
			КонецЕсли;	
			
			СтрокаРегистра.НДСВходящий = + СуммаКорректировкиНДСПоСтроке;	
			СтрокаРегистра.НДСКредит   = + СуммаКорректировкиНДСПоСтроке;	
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	Если НЕ Отказ И ТаблицаДвиженийПартииМатериаловВЭксплуатацииБухгалтерскийУчет.Количество() > 0 Тогда
			
		НаборДвиженийПартииМатериаловВЭксплуатацииБухгалтерскийУчет.мПериод          = Дата;
		НаборДвиженийПартииМатериаловВЭксплуатацииБухгалтерскийУчет.мТаблицаДвижений = ТаблицаДвиженийПартииМатериаловВЭксплуатацииБухгалтерскийУчет;
			
		Движения.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет.ВыполнитьПриход();
		Движения.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоМНМАПартионный

Процедура ДвиженияПоМНМАРАУЗ(ТабМНМА, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// получим таблицу остатков
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КонПериода", 		 Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("ПропорциональныйНДС", Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.УстановитьПараметр("РазделУчетаМатериалыВЭксплуатации", Перечисления.РазделыУчета.МатериалыВЭксплуатации);
	
	Запрос.УстановитьПараметр("ВидМатериалаМНМА", Перечисления.ВидыМатериалов.МалоценныйНеоборотныйАктив);
	Запрос.УстановитьПараметр("ВидМатериалаБиблиотечныеФонды", Перечисления.ВидыМатериалов.БиблиотечныеФонды);
	
	
	ТабМНМА.Свернуть("НеоборотныйАктив", "СуммаКорректировкиНДС");
	МассивНоменклатуры = ТабМНМА.ВыгрузитьКолонку("НеоборотныйАктив");
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетЗатратРегл.АналитикаВидаУчета,
				   |	УчетЗатратРегл.АналитикаУчетаЗатрат,
				   |	УчетЗатратРегл.АналитикаУчетаПартий,
				   |	УчетЗатратРегл.АналитикаРаспределенияЗатрат,
				   |
				   |	РегАналитикаУчетаЗатрат.Затрата КАК Номенклатура,
				   |
				   |	УчетЗатратРегл.НДСВходящийОстаток
				   |
	               |ИЗ
	               |	РегистрНакопления.УчетЗатратРегл.Остатки(
	               |			&КонПериода
	               |			) КАК УчетЗатратРегл
				   |
				   |	ЛЕВОЕ СОЕДИНЕНИЕ 
	               |		РегистрСведений.АналитикаВидаУчета КАК РегАналитикаВидаУчета
	               |	ПО 
	               |		УчетЗатратРегл.АналитикаВидаУчета = РегАналитикаВидаУчета.Ссылка
				   |	ЛЕВОЕ СОЕДИНЕНИЕ 
				   |		РегистрСведений.АналитикаУчетаЗатрат КАК РегАналитикаУчетаЗатрат
				   |	ПО 
				   |		УчетЗатратРегл.АналитикаУчетаЗатрат = РегАналитикаУчетаЗатрат.Ссылка
				   |	ЛЕВОЕ СОЕДИНЕНИЕ 
				   |		РегистрСведений.АналитикаУчетаПартий КАК РегАналитикаУчетаПартий
				   |	ПО 
				   |		УчетЗатратРегл.АналитикаУчетаПартий = РегАналитикаУчетаПартий.Ссылка
				   |
				   |	ГДЕ  РегАналитикаВидаУчета.Организация = &Организация
				   |		И РегАналитикаВидаУчета.РазделУчета = &РазделУчетаМатериалыВЭксплуатации
				   |		И РегАналитикаВидаУчета.НалоговоеНазначение = &ПропорциональныйНДС
				   |		И РегАналитикаУчетаЗатрат.Затрата В (&МассивНоменклатуры)
				   |		И (РегАналитикаУчетаПартий.СхемаНазначенияИспользования.ВидМатериала = &ВидМатериалаМНМА 
				   |           ИЛИ РегАналитикаУчетаПартий.СхемаНазначенияИспользования.ВидМатериала = &ВидМатериалаБиблиотечныеФонды
				   |          )
				   |
				   |УПОРЯДОЧИТЬ ПО 
				   |	РегАналитикаУчетаЗатрат.Затрата
				   |
				   |";
				   
				   
	ТаблицаОстатковМНМА = Запрос.Выполнить().Выгрузить();
	
	// распределим сумму корректировки НДС пропорционально НДСВходящий конечных остатков
	
	Для Каждого СтрокаМНМА Из ТабМНМА Цикл
		
		МассивСтрокОстатковМНМА = ТаблицаОстатковМНМА.НайтиСтроки(Новый Структура("Номенклатура", СтрокаМНМА.НеоборотныйАктив));
		МассивКоэфСтрокОстатковМНМА = Новый Массив;
		Для Каждого СтрокаОстатковМНМА Из МассивСтрокОстатковМНМА Цикл
			МассивКоэфСтрокОстатковМНМА.Добавить(СтрокаОстатковМНМА.НДСВходящийОстаток);
		КонецЦикла;
		
		МассивСуммаКорректировкиНДС = ОбщегоНазначения.РаспределитьПропорционально(СтрокаМНМА.СуммаКорректировкиНДС, МассивКоэфСтрокОстатковМНМА, 2, Ложь);	
		
		Для Индекс = 0 По МассивСуммаКорректировкиНДС.ВГраница() Цикл
			
			СтрокаОстатковМНМА = МассивСтрокОстатковМНМА[Индекс];
			
			ДвижениеУчетЗатратРегл = Движения.УчетЗатратРегл.Добавить();
				
			ДвижениеУчетЗатратРегл.ВидДвижения 				= ВидДвиженияНакопления.Приход;
			ДвижениеУчетЗатратРегл.Период 					= Дата;
			
			ЗаполнитьЗначенияСвойств(ДвижениеУчетЗатратРегл, СтрокаОстатковМНМА);
			
			СуммаКорректировкиНДСПоСтроке = МассивСуммаКорректировкиНДС[Индекс];
			
			ДвижениеУчетЗатратРегл.Стоимость = - СуммаКорректировкиНДСПоСтроке;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда		
				ДвижениеУчетЗатратРегл.СтоимостьНУ = - СуммаКорректировкиНДСПоСтроке;	
			КонецЕсли;	
			
			ДвижениеУчетЗатратРегл.НДСВходящий = + СуммаКорректировкиНДСПоСтроке;	
			ДвижениеУчетЗатратРегл.НДСКредит   = + СуммаКорректировкиНДСПоСтроке;	
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры // ДвиженияПоМНМАРАУЗ

Процедура ДвиженияПоМНМА(ТабМНМА, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда
		ДвиженияПоМНМАРАУЗ(ТабМНМА, СтруктураШапкиДокумента, Отказ, Заголовок);
	Иначе
		ДвиженияПоМНМАПартионный(ТабМНМА, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияПоМНМА

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов, влияющих на проведение, не заполнен или
// заполнен некорректно, то устанавливается флаг отказа в проведении.
//
// Параметры:
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Организация");
	
	СтруктураОбязательныхПолей.Вставить("СчетДт");
	СтруктураОбязательныхПолей.Вставить("СчетНДС");
	СтруктураОбязательныхПолей.Вставить("СчетКорректировкиНДС");
	
	Если СтруктураШапкиДокумента.Дата > '20160101' Тогда
		СтруктураОбязательныхПолей.Вставить("СчетНДСУсловнаяПродажа");	
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		СтруктураОбязательныхПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат");
			
		//проверим указание субконто для заполнения декларации по прибыли
		Если ЗначениеЗаполнено(СчетДт) Тогда
			
			ЕстьСубконтоСтатьяЗатратДоходов = Ложь;
			Для НомСубконто = 1 По 3 Цикл
				Если СчетДт.ВидыСубконто.Количество()<НомСубконто Тогда
					Прервать;
				КонецЕсли;
				
				ВидСубконто = СчетДт.ВидыСубконто[НомСубконто-1].ВидСубконто;
				Если     ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
					 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов
					 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов Тогда
					ЕстьСубконтоСтатьяЗатратДоходов = Истина;
					Прервать;
				КонецЕсли;

			КонецЦикла;
			
			Если ЕстьСубконтоСтатьяЗатратДоходов Тогда
				СтруктураОбязательныхПолей.Вставить("СубконтоДт" + НомСубконто, НСТР("ru='Не заполнено значение субконто: ';uk='Не заповнене значення субконто: '") + ВидСубконто); 	
				
				// дополнительно проверим заполнение статей затрат
				Если 	 ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
					 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов Тогда
					 
					 ЕстьОС   = Ложь;
					 ЕстьНМА  = Ложь;
					 ЕстьМНМА = Ложь;
					 Для каждого СтрокаТЧ Из ПараметрыПерерасчетаОС Цикл
						 
						 Если Не ЕстьОС 
							 И ТипЗнч(СтрокаТЧ.НеоборотныйАктив) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
						 	ЕстьОС = Истина;
							Продолжить;
						 КонецЕсли;
						 
						 Если Не ЕстьНМА 
							 И ТипЗнч(СтрокаТЧ.НеоборотныйАктив) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
						 	ЕстьНМА = Истина;
							Продолжить;
						 КонецЕсли;
						 
						 Если Не ЕстьМНМА 
							 И ТипЗнч(СтрокаТЧ.НеоборотныйАктив) = Тип("СправочникСсылка.Номенклатура") Тогда
						 	ЕстьМНМА = Истина;
							Продолжить;
						 КонецЕсли;
					 
					 КонецЦикла;
					 
					 Если ЕстьОС Тогда
					 	СтруктураОбязательныхПолей.Вставить("СтатьяОС");
					 КонецЕсли;
					 Если ЕстьНМА Тогда
					 	СтруктураОбязательныхПолей.Вставить("СтатьяНМА");
					 КонецЕсли;
					 Если ЕстьМНМА Тогда
					 	СтруктураОбязательныхПолей.Вставить("СтатьяМНМА");
					 КонецЕсли;
				
				 КонецЕсли;	
				 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// не допускаем наличия нескольких документов в одном периоде
	ПроверитьЧтоДокументВПериодеОдин(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЧтоДокументВПериодеОдин(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НачПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СпецРежимНалогообложения", СпецРежимНалогообложения);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПерерасчетПропорциональногоНДСпоТоварамИОС.Ссылка
	               |ИЗ
	               |	Документ.ПерерасчетПропорциональногоНДСпоТоварамИОС КАК ПерерасчетПропорциональногоНДСпоТоварамИОС
	               |ГДЕ
	               |	ПерерасчетПропорциональногоНДСпоТоварамИОС.Дата МЕЖДУ &НачПериода И  &КонПериода
	               |	И ПерерасчетПропорциональногоНДСпоТоварамИОС.Проведен
	               |	И ПерерасчетПропорциональногоНДСпоТоварамИОС.Организация = &Организация
				   |	И ПерерасчетПропорциональногоНДСпоТоварамИОС.СпецРежимНалогообложения = &СпецРежимНалогообложения
				   |	И ПерерасчетПропорциональногоНДСпоТоварамИОС.СпецРежимНалогообложения = &СпецРежимНалогообложения
	               |	И НЕ ПерерасчетПропорциональногоНДСпоТоварамИОС.Ссылка = &Ссылка";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='В данном периоде по данной организации/спец. режиму уже имеется проведенный документ ""Перерасчет пропорционального НДС по товарам и ОС""!';uk='У поточному періоді по даній організації/спец. режиму вже існує інший проведенй документ ""Перерахунок пропорційного ПДВ за товарами та ОЗ""'"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЧтоДокументВПериодеОдин

Функция ПодготовитьТаблицуПоАвансамПоставщикам(РезультатЗапросаПоАвансамПоставщикам, СтруктураШапкиДокумента)
	
	ТаблицаПоАвансамПоставщикам = РезультатЗапросаПоАвансамПоставщикам.Выгрузить();

	ТаблицаПоАвансамПоставщикам.Колонки.Добавить("ДляХозяйственнойДеятельности");
	ТаблицаПоАвансамПоставщикам.ЗаполнитьЗначения(Истина, "ДляХозяйственнойДеятельности");
	
	ТаблицаПоАвансамПоставщикам.Колонки.Добавить("ВидДеятельностиНДС");
	ТаблицаПоАвансамПоставщикам.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая, "ВидДеятельностиНДС");
	
	ТаблицаПоАвансамПоставщикам.Колонки.Добавить("Событие");
	ТаблицаПоАвансамПоставщикам.Колонки.Добавить("СобытиеНДС");
	ТаблицаПоАвансамПоставщикам.Колонки.Добавить("СуммаНДСПропорционально");
	
	Для каждого Строка Из ТаблицаПоАвансамПоставщикам Цикл
		
		Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
			Строка.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику;
			Строка.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
		Иначе
			Строка.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком;
			Строка.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
		КонецЕсли;	
		
		Строка.СуммаНДСПропорционально = Строка.НДСПропорциональноКредит - Строка.НДСПропорциональноКредитДоПерерасчета;
	
	КонецЦикла;
	
	Возврат ТаблицаПоАвансамПоставщикам;
	
КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиАвансыПоставщикам(ТаблицаПоАвансамПоставщикам, СтруктураШапкиДокумента, Отказ, Заголовок)
		
	ИмяТабличнойЧасти = "АвансыПоставщикам";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДоговорКонтрагента, РасчетыВозврат, СтавкаНДС, СчетУчетаНДС");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "АвансыПоставщикам", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

Функция ПодготовитьТаблицуПоПерерасчетуОС(РезультатЗапросаПоПерерасчету, СтруктураШапкиДокумента)

	ТаблицаПоПерерасчету = РезультатЗапросаПоПерерасчету.Выгрузить();

	Возврат ТаблицаПоПерерасчету;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПроверитьЗаполнениеТабличнойЧастиПоПерерасчетуОС(ТаблицаПоПерерасчету, СтруктураШапкиДокумента, Отказ, Заголовок)

	Для каждого Строка Из ТаблицаПоПерерасчету Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ДатаНачалаИспользования) Тогда

			СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Перерасчет ОС (за 1, 2, 3 год использования)"": ';uk='У рядку номер ""%1"" табличної частини ""Перерахунок ОЗ (за 1, 2, 3 рік використання)"": '"), СокрЛП(Строка.НомерСтроки));
			
			СтрокаСообщения = НСтр("ru='Не заполнено значение реквизита ""Начало использования""!';uk='Не заповнене значення реквізиту ""Початок використання""!'");
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			
		ИначеЕсли  НачалоГода(Строка.ДатаНачалаИспользования) < НачалоГода(ДобавитьМесяц(Дата, -36)) Тогда
			
				СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Перерасчет ОС (за 1, 2, 3 год использования)"": ';uk='У рядку номер ""%1"" табличної частини ""Перерахунок ОЗ (за 1, 2, 3 рік використання)"": '"), СокрЛП(Строка.НомерСтроки));
				
				СтрокаСообщения = НСтр("ru = 'Указано некорректное значение реквизита ""Начало использования"". Прошло уже более 3-х лет после года ввода в эксплуатацию!'; uk = 'Зазначене некоректне значення реквізиту ""Початок використання"". Пройшло вже більше 3-х років після року введення у експлуатацію!'");
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				
		ИначеЕсли  КонецГода(Строка.ДатаНачалаИспользования) > КонецГода(Дата) Тогда		
				
				СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""ОС, введенные в эксплуатацию в текущем году"": ';uk='У рядку номер ""%1"" табличної частини ""ОС, що введені у експлуатацію в поточному році"": '"), СокрЛП(Строка.НомерСтроки));
				
				СтрокаСообщения = НСтр("ru = 'Указано некорректное значение реквизита ""Начало использования"". Дата ввода в эксплуатацию не может быть позже конца текущего месяца!'; uk = 'Зазначене некоректне значення реквізиту ""Початок використання"". Дата введення в експлуатацію не може бути більшою за кінець поточного місяця!'");
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Функция ПодготовитьТаблицуНалоговыхДокументов(РезультатЗапроса, СтруктураШапкиДокумента)

	Таблица = РезультатЗапроса.Выгрузить();

	Возврат Таблица;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПроверитьЗаполнениеТабличнойЧастиНалоговыеДокументы(ТаблицаНалоговыхДокументов, СтруктураШапкиДокумента, Отказ, Заголовок)
 		
	ИмяТабличнойЧасти = "НалоговыеДокументы";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("П2");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НалоговыеДокументы", СтруктураОбязательныхПолей, Отказ, Заголовок);

	ИтогКОрректировкиНДС = 0;
	Для каждого Строка Из ТаблицаНалоговыхДокументов Цикл
		
		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке номер ""%1"" табличной части ""Налоговые документы"": '; uk = 'У рядку номер ""%1"" табличної частини ""Податкові документи"": '"), СокрЛП(Строка.НомерСтроки));
		Если НЕ Строка.Проведен = Истина Тогда
			
			СтрокаСообщения = НСтр("ru = 'Указан непроведенный документ ""Корректировка к Сводной налоговой накладной"". Его необходимо провести вручную!'; uk = 'Зазначений непроведений документ ""Коригування до Зведеної податкової накладної"". Його необхідно провести вручну!'");
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);				
		
		КонецЕсли;
		
		ИтогКОрректировкиНДС = ИтогКОрректировкиНДС + Строка.СуммаНДС;
		
	КонецЦикла;
	
	ИтогКОрректировкиНДС = -ИтогКорректировкиНДС;
	
	Если НЕ ИтогКОрректировкиНДС = СтруктураШапкиДокумента.СуммаКорректировкиНДС Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Сумма корректировки НДС на закладке ""Налоговые документы"" не совпадает с суммой корректировки НДС, указанной на закладке ""Перерасчет товаров/услуг и ОС""!'; uk = 'Сума коригування ПДВ на закладці ""Податкові документи"" не співадає з сумою коригування ПДВ, що зазначена на закладці ""Перерахунок товарів/послуг та ОЗ""!'");
		                                                      // разрешаем проводить!!!
		ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке, , Заголовок);					
	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()


Функция ПодготовитьТаблицуПоОстаткам15Счета(РезультатЗапросаПоОстаткам15Счета, СтруктураШапкиДокумента)

	ТаблицаПоОстаткам15Счета = РезультатЗапросаПоОстаткам15Счета.Выгрузить();

	Возврат ТаблицаПоОстаткам15Счета;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПроверитьЗаполнениеТабличнойЧастиПоОстаткам15Счета(ТаблицаПоОстаткам15Счета, СтруктураШапкиДокумента, Отказ, Заголовок)
 		
	ИмяТабличнойЧасти = "Остатки15Счета";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Счет, НеоборотныйАктив");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Остатки15Счета", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , мУчетнаяПолитика.ЕстьНалогНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"       , мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , мУчетнаяПолитика.ЕстьНДС);
		
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
 	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа.
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "АвансыПоставщикам".
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураПолей.Вставить("Контрагент", 					"Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента", 			"ДоговорКонтрагента");
	СтруктураПолей.Вставить("Амортизируется", 			    "Амортизируется");
	СтруктураПростыхПолей.Вставить("СложныйНалоговыйУчет", 	Истина);
	СтруктураПолей.Вставить("Сделка", 						"Сделка");
	СтруктураПолей.Вставить("РасчетыВозврат", 				"РасчетыВозврат");
	СтруктураПолей.Вставить("СтавкаНДС", 					"СтавкаНДС");
	СтруктураПолей.Вставить("НДСПропорциональноКредитДоПерерасчета", "НДСПропорциональноКредитДоПерерасчета");
	СтруктураПолей.Вставить("НДСПропорциональноКредит", 	"НДСПропорциональноКредит");
	СтруктураПолей.Вставить("СчетУчетаНДС", 				"СчетУчетаНДС");
	
	РезультатЗапросаПоАвансамПоставщикам 	= УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "АвансыПоставщикам", СтруктураПолей, СтруктураПростыхПолей);
	ТаблицаПоАвансамПоставщикам 		  	= ПодготовитьТаблицуПоАвансамПоставщикам(РезультатЗапросаПоАвансамПоставщикам, СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиАвансыПоставщикам(ТаблицаПоАвансамПоставщикам, СтруктураШапкиДокумента, Отказ, Заголовок);
		
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "ПараметрыПерерасчетаОС".
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураПолей.Вставить("СуммаВсехОпераций", 			"СуммаВсехОпераций");
	СтруктураПолей.Вставить("СуммаОблагаемыхОпераций", 		"СуммаОблагаемыхОпераций");
	СтруктураПолей.Вставить("Коэффициент", 					"Коэффициент");
	СтруктураПолей.Вставить("СуммаПоставки", 				"СуммаПоставки");
	СтруктураПолей.Вставить("НДСПоставки", 					"НДСПоставки");
	СтруктураПолей.Вставить("НДСПропорциональноКредитДоПерерасчета", "НДСПропорциональноКредитДоПерерасчета");
	СтруктураПолей.Вставить("НДСПропорциональноКредит", 	"НДСПропорциональноКредит");
	СтруктураПолей.Вставить("СуммаКорректировкиНДС", 		"СуммаКорректировкиНДС");
	СтруктураПолей.Вставить("НеоборотныйАктив", 			"НеоборотныйАктив");
	СтруктураПолей.Вставить("ДатаНачалаИспользования", 		"ДатаНачалаИспользования");
	СтруктураПолей.Вставить("ДатаФормированияКредита", 		"ДатаФормированияКредита");
	СтруктураПолей.Вставить("СуммаКорректировкиБУ", 		"СуммаКорректировкиБУ");
	СтруктураПолей.Вставить("СуммаКорректировкиНУ", 		"СуммаКорректировкиНУ");
	СтруктураПолей.Вставить("ОССписан", 					"ОССписан");
	
	
	РезультатЗапросаПоПерерасчетуОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПараметрыПерерасчетаОС", СтруктураПолей, СтруктураПростыхПолей);
	ТаблицаПоПерерасчетуОС 		  = ПодготовитьТаблицуПоПерерасчетуОС(РезультатЗапросаПоПерерасчетуОС, СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиПоПерерасчетуОС(ТаблицаПоПерерасчетуОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Остатки15Счета".
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураПолей.Вставить("Счет", 				 "Счет");
	
	СтруктураПолей.Вставить("НеоборотныйАктив", 	 "НеоборотныйАктив");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры", "СерияНоменклатуры");
	
	СтруктураПолей.Вставить("Склад", 				 "Склад");
	СтруктураПолей.Вставить("ДокументОприходования", 				 "ДокументОприходования");
	
	СтруктураПолей.Вставить("СуммаКорректировкиНДС", "СуммаКорректировкиНДС");
	СтруктураПолей.Вставить("КорректироватьПоНУ",    "КорректироватьПоНУ");
	
	РезультатЗапросаПоОстаткам15Счета = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Остатки15Счета", СтруктураПолей, СтруктураПростыхПолей);
	ТаблицаПоОстаткам15Счета 		  = ПодготовитьТаблицуПоОстаткам15Счета(РезультатЗапросаПоОстаткам15Счета, СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиПоОстаткам15Счета(ТаблицаПоОстаткам15Счета, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные проверки заполенения данные по табличной части "НалоговыеДокументы".
	Если Дата > '20160101' Тогда
		СтруктураПолей = Новый Структура;
		СтруктураПростыхПолей = Новый Структура;
		СтруктураПолей.Вставить("П2", 			 "П2");
		СтруктураПолей.Вставить("Проведен",		 "П2.Проведен");
		СтруктураПолей.Вставить("СуммаНДС", 	 "П2.СуммаНДСДокумента");
		
		РезультатЗапросаПоНалоговымДокументам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НалоговыеДокументы", СтруктураПолей, СтруктураПростыхПолей);
		ТаблицаНалоговыхДокументов			  = ПодготовитьТаблицуНалоговыхДокументов(РезультатЗапросаПоНалоговымДокументам, СтруктураШапкиДокумента);
		ПроверитьЗаполнениеТабличнойЧастиНалоговыеДокументы(ТаблицаНалоговыхДокументов, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(ТаблицаПоАвансамПоставщикам, ТаблицаПоПерерасчетуОС, ТаблицаПоОстаткам15Счета, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

    Дата = КонецМесяца(Дата);
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");



мВестиСкладскойУчет  = Константы.ВестиПартионныйУчетПоСкладамРегл.Получить();


