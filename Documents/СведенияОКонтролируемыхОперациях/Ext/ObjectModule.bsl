Перем мУдалятьДвижения Экспорт;

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

Процедура СинхронизироватьТЧ(ЗаполнятьСуммы = Истина) Экспорт

	СписокКонтрагентов = КонтролируемыеСделки.Выгрузить(, "Контрагент, СуммаРегл");
	СписокКонтрагентов.Свернуть("Контрагент", "СуммаРегл");
	Для каждого ТекКонтрагент Из СписокКонтрагентов Цикл
		
		СтрокаВсехОпераций = СуммыВсехОпераций.Найти(ТекКонтрагент.Контрагент, "Контрагент");
		Если СтрокаВсехОпераций = Неопределено Тогда
			СтрокаВсехОпераций = СуммыВсехОпераций.Добавить();
			СтрокаВсехОпераций.Контрагент = ТекКонтрагент.Контрагент;
		КонецЕсли;
		
		Если СтрокаВсехОпераций.СуммаОперацийЗаПериод < ТекКонтрагент.СуммаРегл Тогда
			СтрокаВсехОпераций.СуммаОперацийЗаПериод = ТекКонтрагент.СуммаРегл;
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов, влияющих на проведение, не заполнен или
// заполнен некорректно, то устанавливается флаг отказа в проведении.
//
// Параметры:
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("Организация, НачПериода, КонПериода");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если Не Отказ Тогда
		Если    НЕ Год(дата) = Год(НачПериода)
			ИЛИ НЕ Год(дата) = Год(КонПериода) Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке("Начало и конец периода должны быть в том же году, что и дата документа!", Отказ, Заголовок);
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()


// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОперациям, ТаблицаПоВсемОперациям) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
 	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Контрагент"     				, "Контрагент");
	СтруктураПолей.Вставить("ДокументИнформационнйБазы"     , "ДокументИнформационнйБазы");
	СтруктураПолей.Вставить("ДоговорКонтрагента"            , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("Сделка"                        , "Сделка");
	СтруктураПолей.Вставить("КодНаименованияОперации"       , "КодНаименованияОперации");
	СтруктураПолей.Вставить("ПредметСделкиСтрока"           , "ПредметСделкиСтрока");
	СтруктураПолей.Вставить("КодПредмета"                   , "КодПредмета");
	СтруктураПолей.Вставить("КодКлассификатораПродукцииИУслуг", "КодКлассификатораПродукцииИУслуг");
	СтруктураПолей.Вставить("КодУКТВЭД"                     , "КодУКТВЭД");
	СтруктураПолей.Вставить("КодУКВЭП"                      , "КодУКВЭП");
	СтруктураПолей.Вставить("ДатаКонтракта"                 , "ДатаКонтракта");
	СтруктураПолей.Вставить("НомерКонтракта"                , "НомерКонтракта");
	СтруктураПолей.Вставить("КодСтороныОперации1"           , "КодСтороныОперации1");
	СтруктураПолей.Вставить("КодСтороныОперации2"           , "КодСтороныОперации2");
	СтруктураПолей.Вставить("КодСтраныПроисхождения"        , "КодСтраныПроисхождения");
	СтруктураПолей.Вставить("УсловиеПоставкиПоИнкотермс"    , "УсловиеПоставкиПоИнкотермс");
	СтруктураПолей.Вставить("ТорговаяМарка"                 , "ТорговаяМарка");
	СтруктураПолей.Вставить("Производитель"                 , "Производитель");
	СтруктураПолей.Вставить("ДатаОперацииС"                 , "ДатаОперацииС");
	СтруктураПолей.Вставить("ДатаОперацииПо"                , "ДатаОперацииПо");
	СтруктураПолей.Вставить("ЦенаВал"                       , "ЦенаВал");
	СтруктураПолей.Вставить("Количество"                    , "Количество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"              , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("КодВалюты"                     , "КодВалюты");
	СтруктураПолей.Вставить("КурсВалюты"                    , "КурсВалюты");
	СтруктураПолей.Вставить("СуммаРегл"                     , "СуммаРегл");
	СтруктураПолей.Вставить("ЦенаРегл"                      , "ЦенаРегл");
	СтруктураПолей.Вставить("КодОснования"                  , "КодОснования");
	СтруктураПолей.Вставить("КодМетода1"                    , "КодМетода1");
	СтруктураПолей.Вставить("КодМетода2"                    , "КодМетода2");
	СтруктураПолей.Вставить("КодМетода3"                    , "КодМетода3");
	СтруктураПолей.Вставить("КодИсточника"                  , "КодИсточника");
	СтруктураПолей.Вставить("ЦенаОбычнаяРегл"               , "ЦенаОбычнаяРегл");
	
	СтруктураПолей.Вставить("СуммаКорректировкиДоходов"     , "СуммаКорректировкиДоходов");
	СтруктураПолей.Вставить("СуммаКорректировкиРасходов"    , "СуммаКорректировкиРасходов");
	
	СтруктураПолей.Вставить("ПоказательРентабельности"    , "ПоказательРентабельности");
	СтруктураПолей.Вставить("ЗначениеПоказателяРентабельности"    , "ЗначениеПоказателяРентабельности");
	СтруктураПолей.Вставить("ПризнакГруппировкиВСовокупность"    , "ПризнакГруппировкиВСовокупность");
	
	СтруктураПолей.Вставить("ИсследуемаяСторона"    , "ИсследуемаяСторона");
	
	РезультатЗапросаПоОперациям = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "КонтролируемыеСделки", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	ТаблицаПоОперациям = РезультатЗапросаПоОперациям.Выгрузить();
	ТаблицаПоОперациям.Сортировать("НомерСтроки");

	
	СтруктураПолей = Новый Структура();
 	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Контрагент"     				, "Контрагент");
	СтруктураПолей.Вставить("СуммаОперацийЗаПериод"         , "СуммаОперацийЗаПериод");
	
	РезультатЗапросаПоВсемОперациям = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СуммыВсехОпераций", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	ТаблицаПоВсемОперациям = РезультатЗапросаПоВсемОперациям.Выгрузить();
	
КонецПроцедуры	

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОперации(ТаблицаПоОперациям, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "КонтролируемыеСделки";
	
	// согласно сехмы J01471xx - любое поле может быть пустым
	СтруктураОбязательныхПолей = Новый Структура("Контрагент");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ТекГод = Год(Дата);
		Для каждого Строка Из ТаблицаПоОперациям Цикл
			
			НомерСтроки = ТаблицаПоОперациям.Индекс(Строка) + 1;
			
			Если Не Отказ Тогда
				Если  НЕ Год(Строка.ДатаОперацииС) = ТекГод И НЕ Год(Строка.ДатаОперацииПо) = ТекГод Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("В строке " + НомерСтроки + " дата начала или конца осуществления операции должны быть в том же году, что и дата документа!", Отказ, Заголовок);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВсеОперации(ТаблицаПоВсемОперациям, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "КонтролируемыеСделки";
	
	СтруктураОбязательныхПолей = Новый Структура("Контрагент");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры 


// Выполняет движения по регистрам.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОперациям, ТаблицаПоВсемОперациям, Отказ, Заголовок)

	// ПО РЕГИСТРУ КонтролируемыеОперации.
	НаборДвижений = Движения.КонтролируемыеОперации;
	
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	ТаблицаКопия = ТаблицаПоОперациям.Скопировать();
	Инд = 0;
	Пока Инд < ТаблицаКопия.Количество() Цикл
		ТекСтрока = ТаблицаКопия[Инд];
		
		Если ТекСтрока.СуммаРегл = 0 Тогда
			ТаблицаКопия.Удалить(ТекСтрока);
		Иначе	
			Инд = Инд + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		Движения.КонтролируемыеОперации.ВыполнитьДвижения();
	КонецЕсли;

	// ПО РЕГИСТРУ ОбщиеСведенияОКонтролируемыхОперациях.
	НаборДвижений = Движения.ОбщиеСведенияОКонтролируемыхОперациях;
	
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	ТаблицаКопия = ТаблицаПоОперациям.Скопировать();
	ТаблицаКопия.Свернуть("Контрагент", "СуммаРегл");
	
	ТаблицаКопия.Колонки.СуммаРегл.Имя 			   = "СуммаКонтролируемыхОпераций";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаКопия = ТаблицаПоВсемОперациям.Скопировать();
	ТаблицаКопия.Свернуть("Контрагент", "СуммаОперацийЗаПериод");
	
	ТаблицаКопия.Колонки.СуммаОперацийЗаПериод.Имя = "СуммаОбщая";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// Заполним таблицу движений.
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		Движения.ОбщиеСведенияОКонтролируемыхОперациях.ВыполнитьДвижения();
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоОперациям, ТаблицаПоВсемОперациям;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа.
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОперациям, ТаблицаПоВсемОперациям);
	
	ПроверитьЗаполнениеТабличнойЧастиОперации(ТаблицаПоОперациям, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВсеОперации(ТаблицаПоВсемОперациям, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОперациям, ТаблицаПоВсемОперациям, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();
	
	СинхронизироватьТЧ(Ложь);
	
	СуммаКонтролируемыхОпераций = КонтролируемыеСделки.Итог("СуммаРегл");
	СуммаОперацийЗаПериод       = СуммыВсехОпераций.Итог("СуммаОперацийЗаПериод");;
	
КонецПроцедуры // ПередЗаписью

