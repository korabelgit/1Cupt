Перем мУдалятьДвижения;

#Если Клиент Тогда

Функция ПечатьДоверенности(НазваниеМакета)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийДокумент", 	ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСреза",			Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Доверенность.Дата КАК ДатаДокумента,
	|	Доверенность.Организация,
	|	Доверенность.Организация.ЮрФизЛицо Как ЮрФизЛицо,
	|	Доверенность.ФизЛицо,
	|	Доверенность.ФизЛицо.Представление КАК КомуВыдана,
	|	Доверенность.Контрагент КАК Поставщик,
	|	Доверенность.НаПолучениеОт КАК ПоставщикПредставление,
	|	Доверенность.ДатаДействия,
	|	Доверенность.ПоДокументу,
	|	Доверенность.БанковскийСчетОрганизации.Банк КАК БанкОрганизации,
	|	Доверенность.БанковскийСчетОрганизации.НомерСчета КАК НомерРасчетногоСчетаОрганизации,
	|	Доверенность.БанковскийСчетОрганизации.Банк.Код КАК МФОБанкаОрганизации
	|ИЗ
	|	Документ.Доверенность КАК Доверенность
	|ГДЕ
	|	Доверенность.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НомерСтроки              КАК Номер,
	|	НаименованиеТовара       КАК Ценности,
	|	ЕдиницаПоКлассификатору.Представление КАК ЕдиницаИзмерения,
	|	Количество
	|ИЗ
	|	Документ.Доверенность.Товары КАК Доверенность
	|ГДЕ
	|	Доверенность.Ссылка = &ТекущийДокумент	
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер
	|";
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Доверенность_Бланк";
	
	Если НазваниеМакета = "ДоверенностьБланк" Тогда
		Макет = ПолучитьОбщийМакет(НазваниеМакета);
	Иначе
		Если НазваниеМакета = "ДоверенностьСтраница" Тогда
			Макет = ПолучитьМакет("Доверенность");
		Иначе
			Макет = ПолучитьМакет(НазваниеМакета);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСотрудника     = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация, Шапка.ФизЛицо, Шапка.ДатаДокумента);
	ФамилияИмяОтчествоДоверенного = ?(ДанныеСотрудника.Фамилия = Неопределено,"",ДанныеСотрудника.Фамилия + " ") + 
									?(ДанныеСотрудника.Имя = Неопределено,"",ДанныеСотрудника.Имя + " ") +
									?(ДанныеСотрудника.Отчество = Неопределено,"",ДанныеСотрудника.Отчество);
									
	ДолжностьДоверенного = НРег(СокрЛП(ДанныеСотрудника.Должность));
	
	// печать производится на языке ИБ
	
	КодЯзыкаПечать = "uk";
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ПаспортФизЛица        = ОбщегоНазначения.ПаспортныеДанные(Шапка.ФизЛицо, Шапка.ДатаДокумента);
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента,,,КодЯзыкаПечать);

	ОбластьМакета = Макет.ПолучитьОбласть("ЛицеваяСторона");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Если ВидОперации = Перечисления.ВидыОперацийДоверенность.Доверенность Тогда
		Если НазваниеМакета = "Доверенность" ИЛИ НазваниеМакета = "ДоверенностьСтраница" Тогда
			ОбластьМакета.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
		ИначеЕсли НазваниеМакета = "ДоверенностьБланк" Тогда
			ОбластьМакета.Параметры.Номер = "/" + ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;	
	
	КомуВыдана = ?(ЗначениеЗаполнено(ДолжностьДоверенного),ДолжностьДоверенного + " ","");
	ОбластьМакета.Параметры.КомуВыдана 						 = КомуВыдана + ФамилияИмяОтчествоДоверенного;
	ОбластьМакета.Параметры.НазваниеОрганизации		 		 = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,", Ложь,КодЯзыкаПечать);
	Если Шапка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ОбластьМакета.Параметры.ЕДРПОУОрганизации	     		 = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "КодПоЕДРПОУ,", Ложь,КодЯзыкаПечать);
	Иначе
		ОбластьМакета.Параметры.ЕДРПОУОрганизации	     		 = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "КодПоДРФО,", Ложь,КодЯзыкаПечать);	
	КонецЕсли;
	ОбластьМакета.Параметры.ЮридическийАдрес         		 = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,", Ложь,КодЯзыкаПечать);
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.НомерРасчетногоСчетаОрганизации) Тогда
		ОбластьМакета.Параметры.НомерРасчетногоСчетаОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,", Ложь,КодЯзыкаПечать);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.МФОБанкаОрганизации) Тогда
		ОбластьМакета.Параметры.МФОБанкаОрганизации	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "МФО,", Ложь,КодЯзыкаПечать);
	КонецЕСли;
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.БанкОрганизации) Тогда
		ОбластьМакета.Параметры.БанкОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "Банк,", Ложь,КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПодтверждающийДокументВид     	 = ПаспортФизЛица.Вид;
	ОбластьМакета.Параметры.ПодтверждающийДокументСерия      = ПаспортФизЛица.Серия;
	ОбластьМакета.Параметры.ПодтверждающийДокументНомер      = ПаспортФизЛица.Номер;
	ОбластьМакета.Параметры.ПодтверждающийДокументКемВыдан   = ПаспортФизЛица.Выдан;
	ОбластьМакета.Параметры.ПодтверждающийДокументДатаВыдачи = ПаспортФизЛица.ДатаВыдачи;
	ТабДокумент.Вывести(ОбластьМакета);

	Если (НазваниеМакета = "ДоверенностьСтраница") ТОгда
		ОбластьМакета = Макет.ПолучитьОбласть("Отступ");
		ТабДокумент.Вывести(ОбластьМакета);
	Иначе
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
    	
	ОбластьМакета = Макет.ПолучитьОбласть("ОбратнаяСторонаШапка");
	ТабДокумент.Вывести(ОбластьМакета);

	Если (НазваниеМакета = "ДоверенностьБланк") Тогда
		Если (ВыборкаСтрокТовары.Количество() > 6) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			Сообщить("Количество строк в табличной части больше шести.Типовая форма М-2 ""Доверенность"" рассчитана на шесть строк!", СтатусСообщения.Важное);
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаВысокая");
		КонецЕсли;
	Иначе 
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСПереносом");
	КонецЕсли;		
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.КоличествоПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(ВыборкаСтрокТовары.Количество, КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	Если (НазваниеМакета = "Доверенность") ИЛИ (НазваниеМакета = "ДоверенностьСтраница") Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОбратнаяСторонаПодвал");
		
		
		Руководители = ФормированиеПечатныхФорм.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.ДатаДокумента);
		
		Если ЗначениеЗаполнено(Руководители.РуководительФИО) Тогда
			ОбластьМакета.Параметры.ФИОРуководителя = ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(Руководители.РуководительФИО.Фамилия, Руководители.РуководительФИО.Имя, Руководители.РуководительФИО.Отчество, Истина); // Кратко
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерФИО) Тогда
			ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(Руководители.ГлавныйБухгалтерФИО.Фамилия, Руководители.ГлавныйБухгалтерФИО.Имя, Руководители.ГлавныйБухгалтерФИО.Отчество, Истина); // Кратко
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьДоверенности()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// ПолучитьОбласть экземпляр документа на печать
	Если (ИмяМакета = "ДоверенностьБланк") ИЛИ (ИмяМакета = "Доверенность") ИЛИ (ИмяМакета = "ДоверенностьСтраница") Тогда
		
		ТабДокумент = ПечатьДоверенности(ИмяМакета);
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать()

// Процедура выполняет заполнение табличной части неполученными ТМЦ по заказу поставщику.
//
Процедура ЗаполнитьТоварыПоОстаткам() Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;

	Товары.Очистить();

	// Оборудование
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Договор",      ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументОснование",   ДокументОснование);
	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Оборудование);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура                КАК Номенклатура,
	|	Остатки.ЕдиницаИзмерения            КАК Единица,
	|	СУММА(Остатки.КоличествоОстаток)    КАК КоличествоПоЗаказу
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор И ЗаказПоставщику = &ДокументОснование) КАК Остатки
	|
	|ГДЕ
	|	Остатки.СтатусПартии = &СтатусПартии
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Номенклатура, 
	|	Остатки.ЕдиницаИзмерения";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		НаименованиеТовара = Выборка.Номенклатура.НаименованиеПолное;
		НаименованиеТовара = ?(НЕ ЗначениеЗаполнено(НаименованиеТовара), Выборка.Номенклатура.Наименование, НаименованиеТовара);

		СтрокаТабличнойЧасти                         = Товары.Добавить();
		СтрокаТабличнойЧасти.НаименованиеТовара      = НаименованиеТовара + " (оборудование)";
		СтрокаТабличнойЧасти.Количество              = Выборка.КоличествоПоЗаказу * Выборка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
													/ ?(НЕ ЗначениеЗаполнено(Выборка.Единица) , 1, Выборка.Единица.Коэффициент);
		СтрокаТабличнойЧасти.ЕдиницаПоКлассификатору = Выборка.Единица.ЕдиницаПоКлассификатору;

	КонецЦикла;

	// Товар
	Запрос = Новый Запрос;

	СписокСтатусПартии = Новый СписокЗначений;
	СписокСтатусПартии.Добавить(Перечисления.СтатусыПартийТоваров.Купленный);
	СписокСтатусПартии.Добавить(Перечисления.СтатусыПартийТоваров.НаКомиссию);

	Запрос.УстановитьПараметр("Договор",      ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументОснование",   ДокументОснование);
	Запрос.УстановитьПараметр("СтатусПартии", СписокСтатусПартии);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура                КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	|	Остатки.ХарактеристикаНоменклатуры.Представление КАК ХарактеристикаНоменклатурыПредставление,
	|	Остатки.ЕдиницаИзмерения            КАК Единица,
	|	СУММА(Остатки.КоличествоОстаток)    КАК КоличествоПоЗаказу
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор И ЗаказПоставщику = &ДокументОснование) КАК Остатки
	|
	|ГДЕ
	|	Остатки.СтатусПартии В (&СтатусПартии)
	|	И Остатки.Номенклатура.Услуга <> Истина
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Номенклатура, Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.ЕдиницаИзмерения";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		НаименованиеТовара = Выборка.Номенклатура.НаименованиеПолное;
		НаименованиеТовара = ?(НЕ ЗначениеЗаполнено(НаименованиеТовара), Выборка.Номенклатура.Наименование, НаименованиеТовара);
		
		Если ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
			НаименованиеТовара = НаименованиеТовара + " (" + Выборка.ХарактеристикаНоменклатурыПредставление + ")";
		КонецЕсли; 

		СтрокаТабличнойЧасти                         = Товары.Добавить();
		СтрокаТабличнойЧасти.НаименованиеТовара      = НаименованиеТовара;
		СтрокаТабличнойЧасти.Количество              = Выборка.КоличествоПоЗаказу * Выборка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
													/ ?(НЕ ЗначениеЗаполнено(Выборка.Единица) , 1, Выборка.Единица.Коэффициент);
		СтрокаТабличнойЧасти.ЕдиницаПоКлассификатору = Выборка.Единица.ЕдиницаПоКлассификатору;

	КонецЦикла;

	// Возвратная тара
	МетаданныеДокумента = ДокументОснование.Метаданные();

	Если НЕ МетаданныеДокумента.ТабличныеЧасти.Найти("ВозвратнаяТара") <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Договор",      ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументОснование",   ДокументОснование);
	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура                КАК Номенклатура,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков КАК Единица,
	|	СУММА(Остатки.КоличествоОстаток)    КАК КоличествоПоЗаказу
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор И ЗаказПоставщику = &ДокументОснование) КАК Остатки
	|
	|ГДЕ
	|	Остатки.СтатусПартии = &СтатусПартии
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		НаименованиеТовара = Выборка.Номенклатура.НаименованиеПолное;
		НаименованиеТовара = ?(НЕ ЗначениеЗаполнено(НаименованиеТовара), Выборка.Номенклатура.Наименование, НаименованиеТовара);

		СтрокаТабличнойЧасти                         = Товары.Добавить();
		СтрокаТабличнойЧасти.НаименованиеТовара      = НаименованиеТовара + " (возвратная тара)";
		СтрокаТабличнойЧасти.Количество              = Выборка.КоличествоПоЗаказу;
		СтрокаТабличнойЧасти.ЕдиницаПоКлассификатору = Выборка.Единица.ЕдиницаПоКлассификатору;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОстаткам()

Функция НайтиСоздатьЕдиницу(Код, КодАльтернативный, Наименование, НаименованиеПолное) Экспорт

	ЕдиницаСсылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);
	
	Если ЕдиницаСсылка.Пустая() Тогда
		ЕдиницаСсылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(КодАльтернативный);
	КонецЕсли;
	
	Если ЕдиницаСсылка.Пустая() Тогда
		СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;

		СправочникОбъект.Записать();

		ЕдиницаСсылка = СправочникОбъект.Ссылка;
	КонецЕсли;

	Возврат ЕдиницаСсылка;

КонецФункции // НайтиСоздатьЕдиницу

// Процедура выполняет заполнение табличной части по счету на оплату поставщику.
//
Процедура ЗаполнитьТоварыПоСчету(Основание)

	Товары.Очистить();

	// Оборудование
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Основание", Основание);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура                         КАК Номенклатура,
	|	Док.ЕдиницаИзмерения 					 КАК Единица,
	|	Док.Количество                           КАК Количество
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Оборудование КАК Док
	|ГДЕ
	|	Док.Ссылка = &Основание И Док.Количество > 0
	|";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		НаименованиеТовара = Выборка.Номенклатура.НаименованиеПолное;
		НаименованиеТовара = ?(НЕ ЗначениеЗаполнено(НаименованиеТовара), Выборка.Номенклатура.Наименование, НаименованиеТовара);

		СтрокаТабличнойЧасти                         = Товары.Добавить();
		СтрокаТабличнойЧасти.НаименованиеТовара      = НаименованиеТовара;
		СтрокаТабличнойЧасти.Количество              = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаПоКлассификатору = Выборка.Единица.ЕдиницаПоКлассификатору;

	КонецЦикла;

	// Товар
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Основание", Основание);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерТЧ,
	|	Док.Номенклатура                         КАК Номенклатура,
	|	Док.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
	|	Док.ХарактеристикаНоменклатуры.Представление КАК ХарактеристикаНоменклатурыПредставление,
	|	Док.ЕдиницаИзмерения 					 КАК Единица,
	|	Док.Количество                           КАК Количество
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &Основание И Док.Количество > 0
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
    |
	|	ВЫБРАТЬ
	|		2,
	|		Бланки.Номенклатура,
	|		Неопределено КАК ХарактеристикаНоменклатуры,
	|		Неопределено КАК ХарактеристикаНоменклатурыПредставление,
	|		Бланки.Номенклатура.ЕдиницаХраненияОстатков,
	|		Бланки.Количество
	|	ИЗ
	|		Документ.СчетНаОплатуПоставщика.БланкиСтрогогоУчета КАК Бланки
	|	ГДЕ
	|		Бланки.Ссылка = &Основание
	|		И Бланки.Количество > 0
    |
	|	УПОРЯДОЧИТЬ ПО
	|		НомерТЧ
	|";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		НаименованиеТовара = Выборка.Номенклатура.НаименованиеПолное;
		НаименованиеТовара = ?(НЕ ЗначениеЗаполнено(НаименованиеТовара), Выборка.Номенклатура.Наименование, НаименованиеТовара);
		
		Если ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
			НаименованиеТовара = НаименованиеТовара + " (" + Выборка.ХарактеристикаНоменклатурыПредставление + ")";
		КонецЕсли; 

		СтрокаТабличнойЧасти                         = Товары.Добавить();
		СтрокаТабличнойЧасти.НаименованиеТовара      = НаименованиеТовара;
		СтрокаТабличнойЧасти.Количество              = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаПоКлассификатору = Выборка.Единица.ЕдиницаПоКлассификатору;

	КонецЦикла;

	// Возвратная тара
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Основание", Основание);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура                         КАК Номенклатура,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК Единица,
	|	Док.Количество                           КАК Количество
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.ВозвратнаяТара КАК Док
	|ГДЕ
	|	Док.Ссылка = &Основание И Док.Количество > 0
	|";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		НаименованиеТовара = Выборка.Номенклатура.НаименованиеПолное;
		НаименованиеТовара = ?(НЕ ЗначениеЗаполнено(НаименованиеТовара), Выборка.Номенклатура.Наименование, НаименованиеТовара);

		СтрокаТабличнойЧасти                         = Товары.Добавить();
		СтрокаТабличнойЧасти.НаименованиеТовара      = НаименованиеТовара + " (возвратная тара)";
		СтрокаТабличнойЧасти.Количество              = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаПоКлассификатору = Выборка.Единица.ЕдиницаПоКлассификатору;

	КонецЦикла;

	// Нематериальные активы
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Основание", Основание);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.НематериальныйАктив                         КАК Номенклатура
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.НематериальныеАктивы КАК Док
	|ГДЕ
	|	Док.Ссылка = &Основание
	|";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		НаименованиеТовара = Выборка.Номенклатура.НаименованиеПолное;
		НаименованиеТовара = ?(НЕ ЗначениеЗаполнено(НаименованиеТовара), Выборка.Номенклатура.Наименование, НаименованиеТовара);

		СтрокаТабличнойЧасти                         = Товары.Добавить();
		СтрокаТабличнойЧасти.НаименованиеТовара      = НаименованиеТовара + " (нематериальный актив)";
		СтрокаТабличнойЧасти.Количество              = 1;
		СтрокаТабличнойЧасти.ЕдиницаПоКлассификатору = НайтиСоздатьЕдиницу("2009", "796", "шт", "Штука");

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТоварыПоСчету()

// Процедура выполняет заполнение табличной части по возврату товаров от покупателя.
Процедура ЗаполнитьТоварыПоВозврату(Основание)

	Товары.Очистить();

	// Товар
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Основание", Основание);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура                         КАК Номенклатура,
	|	Док.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
	|	Док.ХарактеристикаНоменклатуры.Представление КАК ХарактеристикаНоменклатурыПредставление,
	|	Док.ЕдиницаИзмерения                     КАК Единица,
	|	Док.Количество                           КАК Количество
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &Основание И Док.Количество > 0
	|";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		НаименованиеТовара = Выборка.Номенклатура.НаименованиеПолное;
		НаименованиеТовара = ?(НЕ ЗначениеЗаполнено(НаименованиеТовара), Выборка.Номенклатура.Наименование, НаименованиеТовара);
		
		Если ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
			НаименованиеТовара = НаименованиеТовара + " (" + Выборка.ХарактеристикаНоменклатурыПредставление + ")";
		КонецЕсли; 

		СтрокаТабличнойЧасти                         = Товары.Добавить();
		СтрокаТабличнойЧасти.НаименованиеТовара      = НаименованиеТовара;
		СтрокаТабличнойЧасти.Количество              = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаПоКлассификатору = Выборка.Единица.ЕдиницаПоКлассификатору;

	КонецЦикла;
	
	// Возвратная тара
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Основание", Основание);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура                         КАК Номенклатура,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК Единица,
	|	Док.Количество                           КАК Количество
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.ВозвратнаяТара КАК Док
	|ГДЕ
	|	Док.Ссылка = &Основание И Док.Количество > 0
	|";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		НаименованиеТовара = Выборка.Номенклатура.НаименованиеПолное;
		НаименованиеТовара = ?(НЕ ЗначениеЗаполнено(НаименованиеТовара), Выборка.Номенклатура.Наименование, НаименованиеТовара);

		СтрокаТабличнойЧасти                         = Товары.Добавить();
		СтрокаТабличнойЧасти.НаименованиеТовара      = НаименованиеТовара + " (возвратная тара)";
		СтрокаТабличнойЧасти.Количество              = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаПоКлассификатору = Выборка.Единица.ЕдиницаПоКлассификатору;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТоварыПоВозврату

Процедура ОбработкаЗаполнения(Основание)

	ДокументОснование   = Основание;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		Организация        = Основание.Организация;
		ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		Контрагент         = Основание.Контрагент;
		НаПолучениеОт = ?(Основание.Контрагент.НаименованиеПолное="", Основание.Контрагент.Наименование, Основание.Контрагент.НаименованиеПолное);

		Подразделение      = Основание.Подразделение;

		Если ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница)
		   И ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета")
		   И Основание.СтруктурнаяЕдиница.Владелец = Организация Тогда
			БанковскийСчетОрганизации = Основание.СтруктурнаяЕдиница;
		Иначе
			БанковскийСчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;

		ЗаполнитьТоварыПоОстаткам();

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

		Организация        = Основание.Организация;
		ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		Контрагент         = Основание.Контрагент;
		
		НаПолучениеОт = ?(Основание.Контрагент.НаименованиеПолное="", Основание.Контрагент.Наименование, Основание.Контрагент.НаименованиеПолное);
		Подразделение	   = Основание.Подразделение;

		Если ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница)
		   И ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета")
		   И Основание.СтруктурнаяЕдиница.Владелец = Организация Тогда
			БанковскийСчетОрганизации = Основание.СтруктурнаяЕдиница;
		Иначе
			БанковскийСчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;

		ЗаполнитьТоварыПоСчету(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда

		Организация        = Основание.Организация;
		ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		Контрагент         = Основание.Контрагент;
		
		НаПолучениеОт = ?(Основание.Контрагент.НаименованиеПолное = "", Основание.Контрагент.Наименование, Основание.Контрагент.НаименованиеПолное);
		
		Подразделение	   = Основание.Подразделение;
		
		БанковскийСчетОрганизации = Организация.ОсновнойБанковскийСчет;

		ЗаполнитьТоварыПоВозврату(Основание);
		
	КонецЕсли;

КонецПроцедуры

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийДоверенность.Доверенность Тогда
		Возврат Новый Структура("Доверенность, ДоверенностьСтраница, ДоверенностьБланк", "Доверенность", "Доверенность на одну страницу", "Доверенность (на бланк)");
	Иначе
		Возврат Новый Структура("ДоверенностьБланк","Доверенность");		
	КонецЕсли;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ПриУстановкеНовогоНомераДляДокументов(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
	Если ВидОперации = Перечисления.ВидыОперацийДоверенность.Доверенность Тогда
		Префикс = СокрЛП(Префикс) + "Д";
	Иначе
		Префикс = СокрЛП(Префикс) + "0";
	КонецЕсли;
	
КонецПроцедуры