Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета =  "Подразделение,
								|МОЛ,
								|ОС.КоличествоУУ,
								|ОС.КоличествоПоФактуУУ,
								|ОС.РасхожденияУУ,
								|ОС.ПримечанияУУ
								|";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "ПодразделениеОрганизации,
								|МОЛОрганизации,
								|ОС.КоличествоБУ,
								|ОС.КоличествоПоФактуБУ,
								|ОС.РасхожденияБУ,
								|ОС.ПримечанияБУ
								|";
	мСтрокаРеквизитыНалУчета = "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьУправленческий(Черновик = Ложь)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнвентаризацияОС.Дата                        КАК ДатаАкта,
	               |	ИнвентаризацияОС.Номер                       КАК НомерАкта,
	               |	ИнвентаризацияОС.Подразделение.Представление КАК Подразделение,
	               |	ИнвентаризацияОС.МОЛ.Представление           КАК МОЛ
	               |ИЗ
	               |	Документ.ИнвентаризацияОС                    КАК ИнвентаризацияОС
	               |
	               |ГДЕ
	               |	ИнвентаризацияОС.Ссылка = &Ссылка";
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();

	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",   Ссылка);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.ЗаводскойНомер     КАК ЗаводскойНомер,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.ДатаВыпуска        КАК ГодВыпуска,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.НомерПаспорта      КАК НомерПаспорта,
	               |	ИнвентаризацияОСОС.КоличествоУУ                        КАК Количество," + ?(Не Черновик,"
	               |	ИнвентаризацияОСОС.КоличествоПоФактуУУ                 КАК КоличествоПоФакту,", "") + "
	               |	ИнвентаризацияОСОС.ПримечанияУУ                        КАК Примечания,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.Код                КАК ИнвентарныйНомер
	               |ИЗ
	               |	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
	               |
	               |ГДЕ
	               |	ИнвентаризацияОСОС.Ссылка = &Ссылка
	               |
	               |ИТОГИ СУММА(Количество)" + ?(Не Черновик, " ,СУММА(КоличествоПоФакту)", "") + " ПО
	               |	ОБЩИЕ";
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТабДокумент   = Новый ТабличныйДокумент();
	Макет         = ПолучитьМакет("Инвентаризация");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьШапкаТаблицы.Параметры.ТипУчета_ = "Управлін-";
	ОбластьШапкаТаблицы.Параметры.ТипУчета  = "ського";
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
	ОбластьМакета.Параметры.Организация = "Управлінський облік";
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьШапкаТаблицы);
	НомерПП = 0;
	СтруктураПодвала = Новый Структура;
	
	Если ЗначениеЗаполнено(ВыборкаПоШапке.МОЛ) Тогда
		
		СтруктураПодвала.Вставить("МОЛ", "/ " + ВыборкаПоШапке.МОЛ + " /");
		
	КонецЕсли;
	
	ВыборкаПоКомиссии = РаботаСДиалогами.ПолучитьСведенияОКомиссии(ЭтотОбъект);
	
	Пока ВыборкаПоОС.Следующий() Цикл
		
		Если ВыборкаПоОС.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
			
			Если Не Черновик Тогда
				
				СтруктураПодвала.Вставить("КоличествоИтого",        ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.Количество));
				СтруктураПодвала.Вставить("КоличествоПоФактуИтого", ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.КоличествоПоФакту));
				
			КонецЕсли;
			
			Продолжить
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.Количество) и НЕ ЗначениеЗаполнено(ВыборкаПоОС.Примечания)
			и (Черновик или НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоличествоПоФакту)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НомерПП                       = НомерПП + 1;
		ОбластьМакета                 = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Номер = НомерПП;
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьШапкаТаблицы);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Если Черновик Тогда
		
		ЧислоПустыхСтрок = 0;
		
		Если ВвестиЧисло(ЧислоПустыхСтрок, "Сколько пустых строк вывести?", 5, 0) Тогда
			
			Для Н = 1 По ЧислоПустыхСтрок Цикл
			
				НомерПП                       = НомерПП + 1;
				ОбластьМакета                 = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Номер = НомерПП;
		
				Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабДокумент.Вывести(ОбластьШапкаТаблицы);
					
				КонецЕсли;
		
				ТабДокумент.Вывести(ОбластьМакета);
			
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе //Если не черновик, то выводится подвал
		
		Если НомерПП <> 0 Тогда
			
			СтруктураПодвала.Вставить("НачальнийНомер", 1);
			СтруктураПодвала.Вставить("КонечныйНомер",  НомерПП);
			СтруктураПодвала.Вставить("ПорядковыеПрописью",  ЧислоПрописью(НомерПП,"Л=uk_UA;НП=Ложь;НД=Ложь",",,,м,,,,,0"));
			СтруктураПодвала.Вставить("КоличествоПрописью",  ЧислоПрописью(СтруктураПодвала.КоличествоПоФактуИтого,
			                                                               "Л=uk_UA;НП=Ложь;НД=Ложь",",,,ж,,,,,0"));
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(СтруктураПодвала);
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоКомиссии);
		
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьШапкаТаблицы);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Расписка");
		ОбластьМакета.Параметры.Заполнить(СтруктураПодвала);
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;	
	
    ТабДокумент.ОбластьПечати = ТабДокумент.Область( , 2, , 10);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьУправленческий()

// Функция формирует табличный документ с печатной формой
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьБухгалтерский(Черновик = Ложь)
	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",         Ссылка);
	Запрос.УстановитьПараметр("ТекДата",        МоментВремени());
	Запрос.УстановитьПараметр("ТекОрганизация", Организация);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнвентаризацияОС.Дата                                   КАК ДатаАкта,
	               |	ИнвентаризацияОС.Номер                                  КАК НомерАкта,
	               |	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК Подразделение,
	               |	ИнвентаризацияОС.МОЛОрганизации.Представление           КАК МОЛ,
	               |	ВЫРАЗИТЬ(ИнвентаризацияОС.Организация.НаименованиеПолное 
				   |	                          КАК СТРОКА(1000))             КАК Организация,
	               |	КодыОрганизации.КодПоЕДРПОУ                             КАК ЕДРПОУ
	               |ИЗ
	               |	Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&ТекДата,
				   |		                                 Организация = &ТекОрганизация) КАК КодыОрганизации
	               |		ПО ИнвентаризацияОС.Организация = КодыОрганизации.Организация
	               |
	               |ГДЕ
	               |	ИнвентаризацияОС.Ссылка = &Ссылка";
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();

	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",   Ссылка);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("ТекДата",  МоментВремени());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПервоначальныеСведенияБУ.ИнвентарныйНомер              КАК ИнвентарныйНомер,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.ЗаводскойНомер     КАК ЗаводскойНомер,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.ДатаВыпуска        КАК ГодВыпуска,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.НомерПаспорта      КАК НомерПаспорта,
	               |	ИнвентаризацияОСОС.КоличествоБУ                        КАК Количество," + ?(Не Черновик, "
	               |	ИнвентаризацияОСОС.КоличествоПоФактуБУ                 КАК КоличествоПоФакту,", "") + "
	               |	ИнвентаризацияОСОС.ПримечанияБУ КАК Примечания
	               |ИЗ
	               |	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ТекДата) 
				   |		                         КАК ПервоначальныеСведенияБУ
	               |		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПервоначальныеСведенияБУ.ОсновноеСредство
	               |
	               |ГДЕ
	               |	ИнвентаризацияОСОС.Ссылка = &Ссылка
	               |
	               |ИТОГИ СУММА(Количество)" + ?(Не Черновик, " ,СУММА(КоличествоПоФакту)", "") + " ПО
	               |	ОБЩИЕ";
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТабДокумент         = Новый ТабличныйДокумент();
	Макет               = ПолучитьМакет("Инвентаризация");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьШапкаТаблицы.Параметры.ТипУчета_ = "Бухгалтер-";
	ОбластьШапкаТаблицы.Параметры.ТипУчета  = "ського";
	ОбластьМакета       = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
	ОбластьМакета.Параметры.Организация = СокрП(ВыборкаПоШапке.Организация);
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьШапкаТаблицы);
	НомерПП = 0;
	СтруктураПодвала = Новый Структура;
	
	Если ЗначениеЗаполнено(ВыборкаПоШапке.МОЛ) Тогда
		
		СтруктураПодвала.Вставить("МОЛ", "/ " + ВыборкаПоШапке.МОЛ + " /");
		
	КонецЕсли;
	
	ВыборкаПоКомиссии = РаботаСДиалогами.ПолучитьСведенияОКомиссии(ЭтотОбъект);
	
	Пока ВыборкаПоОС.Следующий() Цикл
		
		Если ВыборкаПоОС.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
			
			Если Не Черновик Тогда
				
				СтруктураПодвала.Вставить("КоличествоИтого",        ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.Количество));
				СтруктураПодвала.Вставить("КоличествоПоФактуИтого", ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.КоличествоПоФакту));
				
			КонецЕсли;
			
			Продолжить
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.Количество) и НЕ ЗначениеЗаполнено(ВыборкаПоОС.Примечания)
			и (Черновик или НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоличествоПоФакту)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НомерПП                       = НомерПП + 1;
		ОбластьМакета                 = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Номер = НомерПП;
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьШапкаТаблицы);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Если Черновик Тогда
		
		ЧислоПустыхСтрок = 0;
		
		Если ВвестиЧисло(ЧислоПустыхСтрок, "Сколько пустых строк вывести?", 5, 0) Тогда
			
			Для Н = 1 По ЧислоПустыхСтрок Цикл
			
				НомерПП                       = НомерПП + 1;
				ОбластьМакета                 = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Номер = НомерПП;
				
				Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабДокумент.Вывести(ОбластьШапкаТаблицы);
					
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьМакета);
			
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе //Если не черновик, то выводится подвал
		
		Если НомерПП <> 0 Тогда
			
			СтруктураПодвала.Вставить("НачальнийНомер", 1);
			СтруктураПодвала.Вставить("КонечныйНомер",  НомерПП);
			СтруктураПодвала.Вставить("ПорядковыеПрописью",  ЧислоПрописью(НомерПП,"Л=uk_UA;НП=Ложь;НД=Ложь",",,,м,,,,,0"));
			СтруктураПодвала.Вставить("КоличествоПрописью",  ЧислоПрописью(СтруктураПодвала.КоличествоПоФактуИтого,
			                                                               "Л=uk_UA;НП=Ложь;НД=Ложь",",,,ж,,,,,0"));
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(СтруктураПодвала);
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоКомиссии);
		
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьШапкаТаблицы);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Расписка");
		ОбластьМакета.Параметры.Заполнить(СтруктураПодвала);
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;	
	
    ТабДокумент.ОбластьПечати = ТабДокумент.Область( , 2, , 10);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьБухгалтерский()

// Функция формирует табличный документ по регламентированной форме ОЗ-9
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
Функция ПечатьОЗ9(ПечатьПоДаннымУпрУчета = Ложь)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",         Ссылка);
	Запрос.УстановитьПараметр("ТекДата",        МоментВремени());
	Запрос.УстановитьПараметр("ТекОрганизация", Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ИнвентаризацияОС.Дата                                   КАК ДатаАкта,
	|	ИнвентаризацияОС.Номер                                  КАК НомерАкта,"
	+ ?(ПечатьПоДаннымУпрУчета,"
	|	ИнвентаризацияОС.Подразделение.Представление КАК Подразделение,
	|	ИнвентаризацияОС.МОЛ.Представление           КАК МОЛ"
	 , "
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК Подразделение,
	|	ИнвентаризацияОС.МОЛОрганизации.Представление           КАК МОЛ,
	|	ВЫРАЗИТЬ(ИнвентаризацияОС.Организация.НаименованиеПолное 
	|	                          КАК СТРОКА(1000))             КАК Организация,
	|	КодыОрганизации.КодПоЕДРПОУ                             КАК ЕДРПОУ"
	)+ "
	|ИЗ
	|	Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&ТекДата,
	|		                                 Организация = &ТекОрганизация) КАК КодыОрганизации
	|		ПО ИнвентаризацияОС.Организация = КодыОрганизации.Организация
	|
	|ГДЕ
	|	ИнвентаризацияОС.Ссылка = &Ссылка";
	
	
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаДок"             , Дата);
	Запрос.УстановитьПараметр("МоментДок"           , МоментВремени());
	Запрос.УстановитьПараметр("Организация"           , Организация);
	Запрос.УстановитьПараметр("Ссылка"              , Ссылка);
	Запрос.УстановитьПараметр("СписокОС"            , СписокОС);
	Запрос.УстановитьПараметр("СостояниеСнятоСУчета", Перечисления.СостоянияОС.СнятоСУчета);
	
	Если ПечатьПоДаннымУпрУчета Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПервоначальныеСведенияОС.Период                        КАК ДатаДок,
		|	ПервоначальныеСведенияОС.Регистратор.Номер             КАК НомерДок,
		|	ИнвентаризацияОСОС.ОсновноеСредство.Код                КАК ИнвентарныйНомер,
		|	ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
		|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимость       КАК БалансоваяСтоимость,
		|	СостояниеОС.ДатаСписания                               КАК ДатаСписания,
		|	СостояниеОС.НомерСписания                              КАК НомерСписания,
		|	СостояниеОС.ПричинаСписания                            КАК ПричинаСписания
		|ИЗ
		|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
		|			                &МоментДок, 
		|			                ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОС
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			(ВЫБРАТЬ
		|				СостоянияОС.ОсновноеСредство  КАК ОсновноеСредство,
		|				ВЫБОР
		|					КОГДА СостоянияОС.Регистратор ССЫЛКА Документ.СписаниеОС
		|						ТОГДА СостоянияОС.Регистратор.ПричинаСписания
		|					ИНАЧЕ ""Передача""
		|				КОНЕЦ                         КАК ПричинаСписания,
		|				СостоянияОС.ДатаСостояния     КАК ДатаСписания,
		|				СостоянияОС.Регистратор.Номер КАК НомерСписания
		|			ИЗ
		|				РегистрСведений.СостоянияОС КАК СостоянияОС
		|			ГДЕ
		|				СостоянияОС.Состояние = &СостояниеСнятоСУчета
		|				И СостоянияОС.ОсновноеСредство В(&СписокОС)
		|				И СостоянияОС.ДатаСостояния <= &ДатаДок) КАК СостояниеОС
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = СостояниеОС.ОсновноеСредство
		|ГДЕ
		|	ИнвентаризацияОСОС.Ссылка = &Ссылка";
		
	Иначе

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведенияОС.Период                        КАК ДатаДок,
		|	ПервоначальныеСведенияОС.Регистратор.Номер             КАК НомерДок,
		|	ПервоначальныеСведенияОС.ИнвентарныйНомер              КАК ИнвентарныйНомер,
		|	ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
		|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимость       КАК БалансоваяСтоимость,
		|	СостояниеОС.НомерСписания                              КАК НомерСписания,
		|	СостояниеОС.ДатаСписания                               КАК ДатаСписания,
		|	СостояниеОС.ПричинаСписания                            КАК ПричинаСписания
		|ИЗ
		|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|			               &МоментДок,
		|			               Организация = &Организация
		|			               И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОС
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			(ВЫБРАТЬ
		|				СостоянияОС.ОсновноеСредство  КАК ОсновноеСредство,
		|				СостоянияОС.Регистратор.Номер КАК НомерСписания,
		|				СостоянияОС.ДатаСостояния     КАК ДатаСписания,
		|				ВЫБОР
		|					КОГДА СостоянияОС.Регистратор ССЫЛКА Документ.СписаниеОС
		|						ТОГДА СостоянияОС.Регистратор.ПричинаСписания
		|					ИНАЧЕ ""Передача""
		|				КОНЕЦ                         КАК ПричинаСписания
		|			ИЗ
		|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
		|			ГДЕ
		|				СостоянияОС.Организация = &Организация
		|				И СостоянияОС.ОсновноеСредство В(&СписокОС)
		|				И СостоянияОС.Состояние = &СостояниеСнятоСУчета
		|				И СостоянияОС.ДатаСостояния <= &ДатаДок) КАК СостояниеОС
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = СостояниеОС.ОсновноеСредство
		|ГДЕ
		|	ИнвентаризацияОСОС.Ссылка = &Ссылка";
		
	КонецЕсли;

	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТабДокумент         = Новый ТабличныйДокумент();
	Макет               = ПолучитьМакет("ОЗ9");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
	
	Если Не ПечатьПоДаннымУпрУчета Тогда
		
		ОбластьМакета.Параметры.Организация = СокрП(ВыборкаПоШапке.Организация);
		
	Иначе
		
		ОбластьМакета.Параметры.Организация = "Управлінський облік";
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Номера = Макет.ПолучитьОбласть("Номера");
	ТабДокумент.Вывести(Номера);
	ТабДокумент.ПовторятьПриПечатиСтроки = ТабДокумент.Область("R"+ ТабДокумент.ВысотаТаблицы);
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Пока ВыборкаПоОС.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(ВыборкаПоОС);
		ТабДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	Возврат ТабДокумент;


КонецФункции // ПечатьОЗ9()

// Функция вызывает форму печати табличного документа с печатной формой
// инвентаризационной описи необоротных активов.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьИнвентаризационнаяОпись() Экспорт
	
	// Всегда на украинском языке
	КодЯзыкаПечать = "uk";

	// Создаем колонки Таблицы итогов
	ТаблицаИтогов = Новый ТаблицаЗначений();
	ТаблицаИтогов.Колонки.Добавить("ПорядковыйНомерИтогов");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеФактическое");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьФактическая");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеПоДаннымУчета");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьПоДаннымУчета");
	ТаблицаИтогов.Колонки.Добавить("ИтогНакопленнаяАмортизация");
	ТаблицаИтогов.Колонки.Добавить("ИтогБалансоваяСтоимость");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", НСтр("ru='Председатель комиссии';uk='Голова комісії'",КодЯзыкаПечать));
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        НСтр("ru='Члены комиссии';uk='Члени комісії'",КодЯзыкаПечать));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ИнвентаризацияОС.Номер КАК Номер,
	|	ИнвентаризацияОС.Организация КАК Организация,
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК ПодразделениеПредставление,
	|	ИнвентаризацияОС.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияОС.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер
	|ИЗ
	|	Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
	|ГДЕ
	|	ИнвентаризацияОС.Ссылка = &Ссылка";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	ВыборкаПоКомиссии = РаботаСДиалогами.ПолучитьСведенияОКомиссии(ЭтотОбъект);
	
	СписокОС = ЭтотОбъект.ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",      ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Док.Организация);
	Запрос.УстановитьПараметр("Дата",        Док.Дата);
	Запрос.УстановитьПараметр("ОсновноеСредство", СписокОС);
	Запрос.УстановитьПараметр("СубконтоОС",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОСОС.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК ОсновноеСредствоНаименованиеПолное,
	|	ИнвентаризацияОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	|	ИнвентаризацияОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ИнвентаризацияОСОС.ОсновноеСредство.Изготовитель КАК Изготовитель,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ИнвентаризацияОСОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчетаБУ КАК СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическаяБУ КАК СтоимостьФактическая,
	|	ИнвентаризацияОСОС.КоличествоБУ КАК НаличиеПоДаннымУчета,
	|	ИнвентаризацияОСОС.КоличествоПоФактуБУ КАК НаличиеФактическое,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	МестонахождениеОСБухгалтерскийУчет.МОЛ КАК МОЛ,
	|	ЕстьNULL(АмортизацияОС.АмортизацияОстаток, 0) КАК НакопленнаяАмортизация,
	|	(ИнвентаризацияОСОС.СтоимостьПоДаннымУчетаБУ - ЕстьNULL(АмортизацияОС.АмортизацияОстаток, 0)) КАК БалансоваяСтоимость
	|ИЗ
	|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|		&Дата,Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|		&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК СчетаБухгалтерскогоУчетаОС
	|		ПО ИнвентаризацияОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОСБухгалтерскийУчет.Остатки(
	|		&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК АмортизацияОС
	|		ПО ИнвентаризацияОСОС.ОсновноеСредство = АмортизацияОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК ПараметрыАмортизацииОСБухгалтерскийУчет
	|		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчет.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|		&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчет
	|		ПО ИнвентаризацияОСОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	|ГДЕ
	|	ИнвентаризацияОСОС.Ссылка = &Ссылка
	|	И (ИнвентаризацияОСОС.КоличествоБУ <> 0
	|		ИЛИ ИнвентаризацияОСОС.КоличествоПоФактуБУ <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	МОЛ	
	|";

	Макет = ПолучитьМакет("ИнвентаризационнаяОпись");
	
	// Получаем области макета для вывода в табличный документ
	Шапка            = Макет.ПолучитьОбласть("Шапка");
	Подпись          = Макет.ПолучитьОбласть("Подпись");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");	
	Итоги            = Макет.ПолучитьОбласть("Итоги");	
	Дно	             = Макет.ПолучитьОбласть("Дно");	
	СтрокаСтраница 	 = Макет.ПолучитьОбласть("СтрокаСтраница");	
	НумерацияКолонокТаблицы = Макет.ПолучитьОбласть("НумерацияКолонокТаблицы");	
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.АвтоМасштаб             = Истина;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_ИнвентаризационнаяОпись";
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
	
	ВыборкаМОЛ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаМОЛ.Следующий() Цикл
		
		ВыборкаОС = ВыборкаМОЛ.Выбрать();
		
		СписокСчетов = Новый Массив;
		СтрокаСчетов = "";
		Пока ВыборкаОС.Следующий() Цикл
			СчетУчета = ВыборкаОС.СчетУчета; 
			Если СписокСчетов.Найти(СчетУчета) = Неопределено Тогда
				СписокСчетов.Добавить(СчетУчета);
				
				Если НЕ ПустаяСтрока(СтрокаСчетов) Тогда
					СтрокаСчетов = СтрокаСчетов + ", " + СокрЛП(СчетУчета);
				Иначе	
					СтрокаСчетов = СокрЛП(СчетУчета);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		ВыборкаОС.Сбросить();
		
		Если ТабДокумент.КоличествоСтраниц() > 0 Тогда 
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;	
		
		//////////////////////////////////////////////////////////////////////
		// 1-я страница формы
		
		// Выведем шапку документа
		
		Шапка.Параметры.Заполнить(Док);
		Шапка.Параметры.Организация          = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации,,,КодЯзыкаПечать);
		Шапка.Параметры.ОрганизацияКодПоОКПО = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
		Шапка.Параметры.Подразделение        = Док.ПодразделениеПредставление;
		
		//Шапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Док);
		Шапка.Параметры.ДатаДокумента  		= Док.Дата;
		
		Шапка.Параметры.СписокСчетов  		= СтрокаСчетов;
		
		ДанныеМОЛ = ОбщегоНазначения.ДанныеФизЛица(Организация, ВыборкаМОЛ.МОЛ, Док.Дата);
		
		Шапка.Параметры.Должность  			= ДанныеМОЛ.Должность;
		Шапка.Параметры.РасшифровкаПодписи  = ДанныеМОЛ.Представление;
		
		ТабДокумент.Вывести(Шапка);
		
		// Выведем разрыв страницы
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		//////////////////////////////////////////////////////////////////////
		// 2-я страница формы
		
		// Выведем заголовок таблицы	
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		ТабДокумент.Вывести(НумерацияКолонокТаблицы);
		
		ПорядковыйНомерИтогов = 1; // счетчик количества итоговых строк в таблице
		
		НаличиеФактическоеПоСтранице     = 0;
		СтоимостьФактическаяПоСтранице   = 0;
		НаличиеПоДаннымУчетаПоСтранице   = 0;
		СтоимостьПоДаннымУчетаПоСтранице = 0;
		
		НакопленнаяАмортизацияПоСтранице = 0;
		БалансоваяСтоимостьПоСтранице 	 = 0;
		
		ПорядковыйНомерСтроки = 0; // счетчик количества строк в таблице
		
		ТаблицаИтогов.Очистить();
		
		// Выведем строки таблицы
		Пока ВыборкаОС.Следующий() Цикл
			
			СтрокаОС = ВыборкаОС;
			
			ПорядковыйНомерСтроки = ПорядковыйНомерСтроки + 1;
			
			СтрокаТаблицы   = Макет.ПолучитьОбласть("СтрокаТаблицы");
			
			СтрокаТаблицы.Параметры.Заполнить(СтрокаОС);
			
			СтрокаТаблицы.Параметры.НомерСтроки = ПорядковыйНомерСтроки;
			
			Если ЗначениеЗаполнено(СтрокаОС.Изготовитель) Тогда
				СтрокаТаблицы.Параметры.ОсновноеСредствоНаименованиеПолное = СокрЛП(СтрокаТаблицы.Параметры.ОсновноеСредствоНаименованиеПолное) + " (виробник: " + СокрЛП(СтрокаОС.Изготовитель) + ")";
			КонецЕсли;	
			
			// Присвоим имена с номерами строк областям таблицы.
			// Номера потребуются для включения/отключения видимости значений в ячейках.
			СтрокаТаблицы.Области.НаличиеФактическое.Имя     = "НаличиеФактическое" + СтрокаОС.НомерСтроки;
			СтрокаТаблицы.Области.СтоимостьФактическая.Имя   = "СтоимостьФактическая" + СтрокаОС.НомерСтроки;
			СтрокаТаблицы.Области.НаличиеПоДаннымУчета.Имя   = "НаличиеПоДаннымУчета" + СтрокаОС.НомерСтроки;
			СтрокаТаблицы.Области.СтоимостьПоДаннымУчета.Имя = "СтоимостьПоДаннымУчета" + СтрокаОС.НомерСтроки;
			
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(СтрокаТаблицы);
			СтрокаСПодвалом.Добавить(ИтогоПоСтранице);
			СтрокаСПодвалом.Добавить(Итоги);
			
			Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
				
				// Добавим значения итогов по странице в таблицу итогов.
				// Они потребуются при включении видимости значений ячеек.
				НоваяСтрока = ТаблицаИтогов.Добавить();
				НоваяСтрока.ПорядковыйНомерИтогов 		= ПорядковыйНомерИтогов;
				НоваяСтрока.ИтогНаличиеФактическое 		= НаличиеФактическоеПоСтранице;
				НоваяСтрока.ИтогСтоимостьФактическая 	= СтоимостьФактическаяПоСтранице;
				НоваяСтрока.ИтогНаличиеПоДаннымУчета 	= НаличиеПоДаннымУчетаПоСтранице;
				НоваяСтрока.ИтогСтоимостьПоДаннымУчета 	= СтоимостьПоДаннымУчетаПоСтранице;
				НоваяСтрока.ИтогНакопленнаяАмортизация 	= НакопленнаяАмортизацияПоСтранице;
				НоваяСтрока.ИтогБалансоваяСтоимость	  	= БалансоваяСтоимостьПоСтранице;
				
				ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				// Выведем заголовок таблицы	
				//ТабДокумент.Вывести(ЗаголовокТаблицы);
				ТабДокумент.Вывести(НумерацияКолонокТаблицы);
				
				НаличиеФактическоеПоСтранице     = 0;
				СтоимостьФактическаяПоСтранице   = 0;
				НаличиеПоДаннымУчетаПоСтранице   = 0;
				СтоимостьПоДаннымУчетаПоСтранице = 0;
				
				НакопленнаяАмортизацияПоСтранице = 0;
				БалансоваяСтоимостьПоСтранице    = 0;
				
				
			КонецЕсли;
			
			ТабДокумент.Вывести(СтрокаТаблицы);
			
			НаличиеФактическоеПоСтранице     = НаличиеФактическоеПоСтранице + СтрокаОС.НаличиеФактическое;
			СтоимостьФактическаяПоСтранице   = СтоимостьФактическаяПоСтранице + СтрокаОС.СтоимостьФактическая;
			НаличиеПоДаннымУчетаПоСтранице   = НаличиеПоДаннымУчетаПоСтранице + СтрокаОС.НаличиеПоДаннымУчета;
			СтоимостьПоДаннымУчетаПоСтранице = СтоимостьПоДаннымУчетаПоСтранице + СтрокаОС.СтоимостьПоДаннымУчета;
			
			НакопленнаяАмортизацияПоСтранице = НакопленнаяАмортизацияПоСтранице + СтрокаОС.НакопленнаяАмортизация;
			БалансоваяСтоимостьПоСтранице    = БалансоваяСтоимостьПоСтранице + СтрокаОС.БалансоваяСтоимость;
			
		КонецЦикла;		
		
		ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		
		// Присвоим имена с порядковыми номерами итогов областям таблицы.
		// Номера потребуются для включения/отключения видимости значений в ячейках.
		ИтогоПоСтранице.Области.ИтогНаличиеФактическое.Имя     = "ИтогНаличиеФактическое" + ПорядковыйНомерИтогов;
		ИтогоПоСтранице.Области.ИтогСтоимостьФактическая.Имя   = "ИтогСтоимостьФактическая" + ПорядковыйНомерИтогов;
		ИтогоПоСтранице.Области.ИтогНаличиеПоДаннымУчета.Имя   = "ИтогНаличиеПоДаннымУчета" + ПорядковыйНомерИтогов;
		ИтогоПоСтранице.Области.ИтогСтоимостьПоДаннымУчета.Имя = "ИтогСтоимостьПоДаннымУчета" + ПорядковыйНомерИтогов;
		
		// Добавим значения итогов по странице в таблицу итогов.
		// Они потребуются при включении видимости значений ячеек.
		НоваяСтрока = ТаблицаИтогов.Добавить();
		НоваяСтрока.ПорядковыйНомерИтогов 		= ПорядковыйНомерИтогов;
		НоваяСтрока.ИтогНаличиеФактическое 		= НаличиеФактическоеПоСтранице;
		НоваяСтрока.ИтогСтоимостьФактическая 	= СтоимостьФактическаяПоСтранице;
		НоваяСтрока.ИтогНаличиеПоДаннымУчета 	= НаличиеПоДаннымУчетаПоСтранице;
		НоваяСтрока.ИтогСтоимостьПоДаннымУчета 	= СтоимостьПоДаннымУчетаПоСтранице;
		НоваяСтрока.ИтогНакопленнаяАмортизация 	= НакопленнаяАмортизацияПоСтранице;
		НоваяСтрока.ИтогБалансоваяСтоимость	  	= БалансоваяСтоимостьПоСтранице;

		ИтогСтоимостьФактическая   = ТаблицаИтогов.Итог("ИтогСтоимостьФактическая");
		ИтогНаличиеФактическое     = ТаблицаИтогов.Итог("ИтогНаличиеФактическое");
		ИтогСтоимостьПоДаннымУчета = ТаблицаИтогов.Итог("ИтогСтоимостьПоДаннымУчета");
		ИтогНаличиеПоДаннымУчета   = ТаблицаИтогов.Итог("ИтогНаличиеПоДаннымУчета");
		ИтогНакопленнаяАмортизация = ТаблицаИтогов.Итог("ИтогНакопленнаяАмортизация");
		ИтогБалансоваяСтоимость    = ТаблицаИтогов.Итог("ИтогБалансоваяСтоимость");
		
		// Выведем заголовок итогов по странице
		ИтогоПоСтранице.Параметры.ИтогСтоимостьФактическая   = ИтогСтоимостьФактическая;
		ИтогоПоСтранице.Параметры.ИтогНаличиеФактическое     = ИтогНаличиеФактическое;
		ИтогоПоСтранице.Параметры.ИтогСтоимостьПоДаннымУчета = ИтогСтоимостьПоДаннымУчета;
		ИтогоПоСтранице.Параметры.ИтогНаличиеПоДаннымУчета   = ИтогНаличиеПоДаннымУчета;
		ИтогоПоСтранице.Параметры.ИтогНакопленнаяАмортизация = ИтогНакопленнаяАмортизация;
		ИтогоПоСтранице.Параметры.ИтогБалансоваяСтоимость 	 = ИтогБалансоваяСтоимость;
		
		//ТабДокумент.Вывести(СтрокаСтраница);
		ТабДокумент.Вывести(ИтогоПоСтранице);
		
		Итоги = Макет.ПолучитьОбласть("Итоги");	
		
		// Присвоим имена с порядковыми номерами итогов областям таблицы.
		// Номера потребуются для включения/отключения видимости значений в ячейках.
		Итоги.Области.КоличествоФактическоеПрописью.Имя   = "КоличествоФактическоеПрописью" + ПорядковыйНомерИтогов;
		Итоги.Области.СтоимостьФактическаяПрописью.Имя    = "СтоимостьФактическаяПрописью" + ПорядковыйНомерИтогов;
		
		КоличествоФактическоеПрописью = ЧислоПрописью(ИтогНаличиеФактическое,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать), ",,,ж,,,,,0");
		СтоимостьФактическаяПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогСтоимостьФактическая, Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать);
		
		КоличествоПрописью 	= ЧислоПрописью(ИтогНаличиеПоДаннымУчета,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать), ",,,ж,,,,,0");
		СуммаПрописью  		= ОбщегоНазначения.СформироватьСуммуПрописью(ИтогСтоимостьПоДаннымУчета, Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать);
		
		// Выведем итоговые строки
		Итоги.Параметры.КоличествоПорядковыхНомеровПрописью = ЧислоПрописью(ПорядковыйНомерСтроки,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать), ",,,м,,,,,0");
		Итоги.Параметры.КоличествоФактическоеПрописью       = КоличествоФактическоеПрописью;
		Итоги.Параметры.СтоимостьФактическаяПрописью        = СтоимостьФактическаяПрописью;
		Итоги.Параметры.КоличествоПрописью       			= КоличествоПрописью;
		Итоги.Параметры.СуммаПрописью        				= СуммаПрописью;
		
		ТабДокумент.Вывести(Итоги);
		
		ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
		
		// Выведем разрыв страницы
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		////////////////////////////////////////////////////////////////////////
		//// 3-я страница формы
		
		// Выведем подпись председателя инвентаризационной комиссии
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = ВыборкаПоКомиссии.ПредседательКомиссииДолжность;
		Подпись.Параметры.РасшифровкаПодписи       = ВыборкаПоКомиссии.ПредседательКомиссииФИО;
			
		ТабДокумент.Вывести(Подпись);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		НаименованиеЧленовКомиссии = Новый Массив;
		НаименованиеЧленовКомиссии.Добавить("ПервыйЧленКомиссии");
		НаименованиеЧленовКомиссии.Добавить("ВторойЧленКомиссии");
		НаименованиеЧленовКомиссии.Добавить("ТретийЧленКомиссии");
		
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из НаименованиеЧленовКомиссии Цикл
			
			Если НЕ ТабДокумент.ПроверитьВывод(Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
			КонецЕсли;
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
														   "");
			Подпись.Параметры.Должность                = ВыборкаПоКомиссии[ЧленКомиссии + "Должность"];
			Подпись.Параметры.РасшифровкаПодписи       = ВыборкаПоКомиссии[ЧленКомиссии + "ФИО"];
			
			ТабДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		Дно.Параметры.ПорядковыйНомер = ПорядковыйНомерСтроки;
		
		Дно.Параметры.Должность 		 	= ДанныеМОЛ.Должность;
		Дно.Параметры.РасшифровкаПодписи 	= ДанныеМОЛ.Представление;
		
		ТабДокумент.Вывести(Дно);
	
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьИнвентаризационнаяОпись()

// Функция формирует табличный документ с печатной формой сличительной ведомости
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма сличительной ведомости.
//
Функция ПечатьСличительнаяВедомость() Экспорт

	// Всегда на украинском языке
	КодЯзыкаПечать = "uk";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ИнвентаризацияОС.Номер КАК Номер,
	|	ИнвентаризацияОС.Организация КАК Организация,
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК ПодразделениеПредставление,
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Код КАК ПодразделениеКод,
	|	ИнвентаризацияОС.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияОС.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер
	|ИЗ
	|	Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
	|ГДЕ
	|	ИнвентаризацияОС.Ссылка = &Ссылка";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	СписокОС = ЭтотОбъект.ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	Запрос.УстановитьПараметр("Организация", Док.Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", СписокОС);
	Запрос.УстановитьПараметр("Дата",        Док.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОСОС.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК ОсновноеСредствоНаименованиеПолное,
	|	ИнвентаризацияОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	|	ИнвентаризацияОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	МестонахождениеОСБухгалтерскийУчет.МОЛ КАК МОЛ,
	|	ИнвентаризацияОСОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчетаБУ КАК СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическаяБУ КАК СтоимостьФактическая,
	|	ИнвентаризацияОСОС.КоличествоБУ КАК НаличиеПоДаннымУчета,
	|	ИнвентаризацияОСОС.КоличествоПоФактуБУ КАК НаличиеФактическое
	|ИЗ
	|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|		&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|		&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчет
	|		ПО ИнвентаризацияОСОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	|ГДЕ
	|	ИнвентаризацияОСОС.Ссылка = &Ссылка
	|	И (ИнвентаризацияОСОС.СтоимостьПоДаннымУчетаБУ <> ИнвентаризацияОСОС.СтоимостьФактическаяБУ
	|		ИЛИ ИнвентаризацияОСОС.КоличествоБУ <> ИнвентаризацияОСОС.КоличествоПоФактуБУ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ТаблицаОС = Запрос.Выполнить().Выгрузить();
	
	ВыборкаПоКомиссии = РаботаСДиалогами.ПолучитьСведенияОКомиссии(ЭтотОбъект);
	
	Макет = ПолучитьМакет("СличительнаяВедомость");
	
	// Получаем области макета для вывода в табличный документ
	Шапка                     = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы          = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы             = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ПодвалТаблицы             = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");
	Подпись                   = Макет.ПолучитьОбласть("Подпись");
	НумерацияКолонокТаблицы 	= Макет.ПолучитьОбласть("НумерацияКолонокТаблицы");	
	Дно                   		= Макет.ПолучитьОбласть("Дно");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", НСтр("ru='Председатель инвентаризационной комиссии';uk='Голова інвентаризаційної комісії'",КодЯзыкаПечать));
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        НСтр("ru='Члены инвентаризационной комиссии';uk='Члени інвентаризаційної комісії'",КодЯзыкаПечать));
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.АвтоМасштаб             = Истина;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_СличительнаяВедомость";

	// Выведем шапку документа
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
	
	Шапка.Параметры.Заполнить(Док);
	Шапка.Параметры.Организация          = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации,,,КодЯзыкаПечать);
	Шапка.Параметры.ОрганизацияКодПоОКПО = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	
	//Шапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Док);
	Шапка.Параметры.ДатаДокумента  = Док.Дата;
	
	ТабДокумент.Вывести(Шапка);
	
	// Выведем заголовок таблицы	
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	ТабДокумент.Вывести(НумерацияКолонокТаблицы);
	
	// Создадим переменные для накопления итогов по каждой странице
	ИтогИзлишекКоличество   = 0;
	ИтогИзлишекСтоимость    = 0;
	ИтогНедостачаКоличество = 0;
	ИтогНедостачаСтоимость  = 0;
	
	ПорядковыйНомерСтроки = 0; // счетчик количества строк в таблице
	
	// Выведем строки таблицы
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		ПорядковыйНомерСтроки = ПорядковыйНомерСтроки + 1;
		
		СтрокаТаблицы.Параметры.Заполнить(СтрокаОС);
		
		СтрокаТаблицы.Параметры.НомерСтроки = ПорядковыйНомерСтроки;
		
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(СтрокаТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалТаблицы);
		Если (ТаблицаОС.Индекс(СтрокаОС) + 1) = ТаблицаОС.Количество() Тогда // если последняя строка, должна
			СтрокаСПодвалом.Добавить(ПодписьГлавногоБухгалтера);             // помещаться и подпись гл.бухгалтера
		КонецЕсли;
		
		Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Выведем заголовок таблицы	
			ТабДокумент.Вывести(НумерацияКолонокТаблицы);
			
		КонецЕсли;
		
		РазницаПоНаличию   = СтрокаОС.НаличиеФактическое - СтрокаОС.НаличиеПоДаннымУчета;
		РазницаПоСтоимости = СтрокаОС.СтоимостьФактическая - СтрокаОС.СтоимостьПоДаннымУчета;
		
		ИзлишекКоличество   = ?(РазницаПоНаличию > 0, РазницаПоНаличию, 0);
		ИзлишекСтоимость    = ?(РазницаПоСтоимости > 0, РазницаПоСтоимости, 0);
		НедостачаКоличество = ?(РазницаПоНаличию < 0, -РазницаПоНаличию, 0);
		НедостачаСтоимость  = ?(РазницаПоСтоимости < 0, -РазницаПоСтоимости, 0);
		
		ИтогИзлишекКоличество   = ИтогИзлишекКоличество + ИзлишекКоличество;
		ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость + ИзлишекСтоимость;
		ИтогНедостачаКоличество = ИтогНедостачаКоличество + НедостачаКоличество;
		ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость + НедостачаСтоимость;
		
		СтрокаТаблицы.Параметры.ИзлишекКоличество   = ИзлишекКоличество;
		СтрокаТаблицы.Параметры.ИзлишекСтоимость    = ИзлишекСтоимость;
		СтрокаТаблицы.Параметры.НедостачаКоличество = НедостачаКоличество;
		СтрокаТаблицы.Параметры.НедостачаСтоимость  = НедостачаСтоимость;
		
		ДанныеМОЛ = ОбщегоНазначения.ДанныеФизЛица(Организация, СтрокаОС.МОЛ, Док.Дата);
		СтрокаТаблицы.Параметры.ФИО = ДанныеМОЛ.Представление;

		ТабДокумент.Вывести(СтрокаТаблицы);
		
	КонецЦикла;
	
	// Выведем подвал таблицы
	ПодвалТаблицы.Параметры.ИтогИзлишекКоличество   = ИтогИзлишекКоличество;
	ПодвалТаблицы.Параметры.ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость;
	ПодвалТаблицы.Параметры.ИтогНедостачаКоличество = ИтогНедостачаКоличество;
	ПодвалТаблицы.Параметры.ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость;
	
	ТабДокумент.Вывести(ПодвалТаблицы);
	
	// Выведем подпись бухгалтера
	Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(Док.Организация, Док.Дата);
	
	ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписи = Руководители.ГлавныйБухгалтерПредставление;
	
	ТабДокумент.Вывести(ПодписьГлавногоБухгалтера);
	
	// Проверим, помещаются ли шапка подписей и одна подпись
	Подписи = Новый Массив;
	Подписи.Добавить(Подпись);
	
	Если НЕ ТабДокумент.ПроверитьВывод(Подписи) Тогда
			
		// Выведем разрыв страницы
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	КонецЕсли;

	// Выведем подпись председателя инвентаризационной комиссии
	Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
	Подпись.Параметры.РасшифровкаПодписи       = ВыборкаПоКомиссии.ПредседательКомиссииФИО;
		
	ТабДокумент.Вывести(Подпись);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	НаименованиеЧленовКомиссии = Новый Массив;
	НаименованиеЧленовКомиссии.Добавить("ПервыйЧленКомиссии");
	НаименованиеЧленовКомиссии.Добавить("ВторойЧленКомиссии");
	НаименованиеЧленовКомиссии.Добавить("ТретийЧленКомиссии");
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из НаименованиеЧленовКомиссии Цикл
		
		Если НЕ ТабДокумент.ПроверитьВывод(Подпись) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
		                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
													   "");
		Подпись.Параметры.РасшифровкаПодписи       = ВыборкаПоКомиссии[ЧленКомиссии + "ФИО"];
		
		ТабДокумент.Вывести(Подпись);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	ТабДокумент.Вывести(Дно);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьИНВ18()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Управленческий" тогда
		
		ТабДокумент = ПечатьУправленческий();
		
	ИначеЕсли  ИмяМакета = "УправленческийЧерновик" Тогда
		
		ТабДокумент = ПечатьУправленческий(Истина);
		
	ИначеЕсли ИмяМакета = "Бухгалтерский" Тогда
		
		ТабДокумент = ПечатьБухгалтерский();
		
	ИначеЕсли ИмяМакета = "БухгалтерскийЧерновик" Тогда
		
		ТабДокумент = ПечатьБухгалтерский(Истина);
		
	ИначеЕсли ИмяМакета = "Управленческий" Тогда
		
		ТабДокумент = ПечатьБухгалтерский(Истина);
		
	ИначеЕсли ИмяМакета = "ОЗ9бух" Тогда
		
		ТабДокумент = ПечатьОЗ9();
		
	ИначеЕсли ИмяМакета = "ОЗ9упр" Тогда
		
		ТабДокумент = ПечатьОЗ9(Истина);
		
	ИначеЕсли ИмяМакета = "ИнвентаризационнаяОпись" тогда
		
		ТабДокумент = ПечатьИнвентаризационнаяОпись();
		
	ИначеЕсли ИмяМакета = "СличительнаяВедомость" тогда
		
		ТабДокумент = ПечатьСличительнаяВедомость();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	Если ОтражатьВУправленческомУчете Тогда
		
		СтруктураМакетов.Вставить("Управленческий",			"Управленческий учет");
		СтруктураМакетов.Вставить("УправленческийЧерновик",	"Управленческий учет (Черновик)");
		СтруктураМакетов.Вставить("ОЗ9упр",					"Форма ОЗ-9(упр. учет)");
		
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураМакетов.Вставить("ИнвентаризационнаяОпись", 	"Инвентаризационная опись");
		СтруктураМакетов.Вставить("СличительнаяВедомость", 		"Сличительная ведомость");
		
		СтруктураМакетов.Вставить("Бухгалтерский",			"Бухгалтерский учет");
		СтруктураМакетов.Вставить("БухгалтерскийЧерновик",	"Бухгалтерский учет (Черновик)");
		СтруктураМакетов.Вставить("ОЗ9бух",					"Форма ОЗ-9(бух. учет)");
		
	КонецЕсли;
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()


// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(СтруктураШапкиДокумента, Отказ, Заголовок)

    СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ОсновноеСредство");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	
КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	
КонецПроцедуры // ПроверитьЗаполнениеТЧ


// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента), Отказ, Заголовок);
	
	ПроверитьЗаполнениеТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для управленческого учета
Процедура ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Подразделение");
	СтруктураПолей.Вставить("МОЛ");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для бухгалтерского и налогового (в общем регламентного) учета
Процедура ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ) Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("ПодразделениеОрганизации");
	СтруктураПолей.Вставить("МОЛОрганизации");


	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
         
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры
