Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , Ложь);
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015" , Ложь);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , Ложь);
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	мУчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	
	Если НЕ Отказ Тогда
		
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаНУ.ЕстьНалогНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", мУчетнаяПолитикаНУ.ЕстьНалогНаПрибыльДо2015);
		СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаНУ.ЕстьНДС);
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРАМ

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	ДатаДок 					  = Дата;
	ТекОрганизация                = СтруктураШапкиДокумента.Организация;
	ПроводкиБУ                    = Движения.Хозрасчетный;
	НазваниеДокумента             = Метаданные().Представление();

	//Получение данных о видах налоговой деятельности, к которым принадлежат ОС
	УправлениеВнеоборотнымиАктивами.ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл(МоментВремени(), ТекОрганизация, ТаблицаПоОС,
	                                                  СтруктураШапкиДокумента, Отказ, Заголовок);
													  
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;
	
	ПараметрыАмортизацииБУ 	= Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	ПереоценкаОСБУ 			= Движения.ПереоценкаОСБухгалтерскийУчет;
	ПроводкиБУ 				= Движения.Хозрасчетный;
	ОперацииОС 				= Движения.СобытияОСОрганизаций;
	СтоимостьОСБУ 			= Движения.СтоимостьОСБухгалтерскийУчет;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОС = СтрокаТЧ.ОсновноеСредство;
		
		// ПараметрыАмортизацииОСБухгалтерскийУчет
		СтрокаДвижений = ПараметрыАмортизацииБУ.Добавить();
		
		СтрокаДвижений.Период           = ДатаДок;
		СтрокаДвижений.ОсновноеСредство = ТекОС;
		СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
		
		СтрокаДвижений.СрокПолезногоИспользования                  = СтрокаТЧ.СрокПолезногоИспользованияБУ;
		СтрокаДвижений.ОбъемПродукцииРабот                         = СтрокаТЧ.ОбъемПродукцииРаботБУ;
		СтрокаДвижений.СрокИспользованияДляВычисленияАмортизации   = СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииБУ;
		СтрокаДвижений.СтоимостьДляВычисленияАмортизации           = СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ;
		СтрокаДвижений.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
		СтрокаДвижений.ЛиквидационнаяСтоимость                     = СтрокаТЧ.ЛиквидационнаяСтоимостьБУ;
		
		// ПереоценкаОСБухгалтерскийУчет
		Если СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ > 0 Тогда // Дооценка
			
			СтрокаДвижений = ПереоценкаОСБУ.ДобавитьПриход();
			
			СтрокаДвижений.Период           = ДатаДок;
			СтрокаДвижений.ОсновноеСредство = ТекОС;
			СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
			
			СтрокаДвижений.СуммаПереоценки 	= СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ;
			
		ИначеЕсли СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ < 0 Тогда // Уценка	
			
			СтрокаДвижений = ПереоценкаОСБУ.ДобавитьРасход();
			
			СтрокаДвижений.Период           = ДатаДок;
			СтрокаДвижений.ОсновноеСредство = ТекОС;
			СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
			
			СтрокаДвижений.СуммаПереоценки 	= - СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ;
			
		КонецЕсли;	
		
		// СтоимостьОСБухгалтерскийУчет
		Если СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ > 0 Тогда // Дооценка
			
			СтрокаДвижений = СтоимостьОСБУ.ДобавитьПриход();
			
			СтрокаДвижений.Период           = ДатаДок;
			СтрокаДвижений.ОсновноеСредство = ТекОС;
			СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
			
			СтрокаДвижений.Стоимость 	= СтрокаТЧ.СуммаПереоценкиНакопленнойАмортизацииБУ + СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ;
			СтрокаДвижений.Амортизация 	= СтрокаТЧ.СуммаПереоценкиНакопленнойАмортизацииБУ;
			
		ИначеЕсли СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ < 0 Тогда // Уценка	
			
			СтрокаДвижений = СтоимостьОСБУ.ДобавитьРасход();
			
			СтрокаДвижений.Период           = ДатаДок;
			СтрокаДвижений.ОсновноеСредство = ТекОС;
			СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
			
			СтрокаДвижений.Стоимость 	= -(СтрокаТЧ.СуммаПереоценкиНакопленнойАмортизацииБУ + СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ);
			СтрокаДвижений.Амортизация 	= -СтрокаТЧ.СуммаПереоценкиНакопленнойАмортизацииБУ;
			
		КонецЕсли;	
		
		
		// СобытияОСОрганизаций
		СтрокаДвижений = ОперацииОС.Добавить();

		СтрокаДвижений.Период            = ДатаДок;
		СтрокаДвижений.ОсновноеСредство  = ТекОС;
		СтрокаДвижений.Организация       = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.Событие           = СтруктураШапкиДокумента.СобытиеРегл;
		СтрокаДвижений.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		СтрокаДвижений.НомерДокумента    = Номер;
		
		// Хозрасчетный
		Если СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ > 0 Тогда 
			// Дооценка 
			
			Если СтрокаТЧ.СуммаПереоценкиНакопленнойАмортизацииБУ > 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДок;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
				Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = СтрокаТЧ.СуммаПереоценкиНакопленнойАмортизацииБУ;
				
				Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				
				Проводка.СчетКт       = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
				
				Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
				Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
				
			КонецЕсли;	
			
			ПревышениеСуммДооценокНадСуммамиУценокБУ = -СтрокаТЧ.ПревышениеСуммДооценокНадСуммамиУценокБУ;
			
			Если ПревышениеСуммДооценокНадСуммамиУценокБУ > 0 Тогда
				
				СуммаПроводкиДоходов = Мин(ПревышениеСуммДооценокНадСуммамиУценокБУ, СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ);
				
				Если СуммаПроводкиДоходов > 0 Тогда
					
					// Дт СчетУчетаОС Кт СчетДоходов
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период       = ДатаДок;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
					Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
					Проводка.Сумма        = СуммаПроводкиДоходов;
					
					Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
					
					Проводка.СчетКт       = СтруктураШапкиДокумента.СчетДоходов;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ДоходыСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ДоходыСубконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ДоходыСубконто3);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
					КонецЕсли;	
					
				КонецЕсли;	
				
				Если СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ - СуммаПроводкиДоходов > 0 Тогда
				
					// Дт СчетУчетаОС Кт СчетУчетаДооценокОС (423)
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период       = ДатаДок;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
					Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
					Проводка.Сумма        = СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ - СуммаПроводкиДоходов;
					
					Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
					
					//Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ДооценкаОсновныхСредств;
					Проводка.СчетКт       = СтрокаТЧ.СчетУчетаДооценокОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
				КонецЕсли;	
				
			Иначе	
				
				// Дт СчетУчетаОС Кт СчетУчетаДооценокОС (423)
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДок;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
				Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ;
				
				Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				
				Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
				
				//Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ДооценкаОсновныхСредств;
				Проводка.СчетКт       = СтрокаТЧ.СчетУчетаДооценокОС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
				
			КонецЕсли;	
			
			
		ИначеЕсли СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ < 0 Тогда 
			// Уценка	
			
			Если СтрокаТЧ.СуммаПереоценкиНакопленнойАмортизацииБУ < 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДок;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
				Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = - СтрокаТЧ.СуммаПереоценкиНакопленнойАмортизацииБУ;
				
				Проводка.СчетДт       = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				
				Проводка.СчетКт       = СтрокаТЧ.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
				
				Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
				Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
				
			КонецЕсли;	
			
			ПревышениеСуммДооценокНадСуммамиУценокБУ = СтрокаТЧ.ПревышениеСуммДооценокНадСуммамиУценокБУ;
			
			Если ПревышениеСуммДооценокНадСуммамиУценокБУ > 0 Тогда
				
				СуммаПроводкиДооценкаОС = Мин(ПревышениеСуммДооценокНадСуммамиУценокБУ, - СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ);
				
				Если СуммаПроводкиДооценкаОС > 0 Тогда
					
					// Дт СчетУчетаДооценокОС (423) Кт СчетУчетаОС
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период       = ДатаДок;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
					Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
					Проводка.Сумма        = СуммаПроводкиДооценкаОС;
					
					//Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.ДооценкаОсновныхСредств;
					Проводка.СчетДт       = СтрокаТЧ.СчетУчетаДооценокОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Проводка.СчетКт       = СтрокаТЧ.СчетУчетаБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
					Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
					
				КонецЕсли;	
				
				Если -СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ - СуммаПроводкиДооценкаОС > 0 Тогда
				
					// Дт СчетЗатрат Кт СчетУчетаОС
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период       = ДатаДок;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
					Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
					Проводка.Сумма        = -СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ - СуммаПроводкиДооценкаОС;
					
					Проводка.СчетДт       = СтруктураШапкиДокумента.СчетЗатрат;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЗатратыСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ЗатратыСубконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ЗатратыСубконто3);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
					КонецЕсли;	
					
					Проводка.СчетКт       = СтрокаТЧ.СчетУчетаБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
					Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
					
				КонецЕсли;	
				
			Иначе	
				
				// Дт СчетЗатрат Кт СчетУчетаОС
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДок;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
				Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = - СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ;
				
				Проводка.СчетДт       = СтруктураШапкиДокумента.СчетЗатрат;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЗатратыСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ЗатратыСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ЗатратыСубконто3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
				КонецЕсли;	
				
				Проводка.СчетКт       = СтрокаТЧ.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
				
				Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, СобытиеРегл, СчетДоходов, СчетЗатрат");
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "ОС";
	
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		Если СтрокаТЧ.ОстаточнаяСтоимостьБУ = 0 И СтрокаТЧ.ЛиквидационнаяСтоимостьБУ = 0 Тогда
			
			СтрокаСообщения = НСтр("ru='Остаточная стоимость ОС равна нулю, необходимо указать его ликвидационную стоимость';uk=''");

			НачалоСообщения = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
										""" табличной части """ + "ОС" + """: ";
			
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;	

	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство"    							, "ОсновноеСредство");
	СтруктураПолей.Вставить("СрокПолезногоИспользованияБУ"                 	, "СрокПолезногоИспользованияБУ");
	СтруктураПолей.Вставить("СрокИспользованияДляВычисленияАмортизацииБУ"  	, "СрокИспользованияДляВычисленияАмортизацииБУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботБУ"                        	, "ОбъемПродукцииРаботБУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииБУ" , "ОбъемПродукцииРаботДляВычисленияАмортизацииБУ");
	СтруктураПолей.Вставить("СтоимостьДляВычисленияАмортизацииБУ"          	, "СтоимостьДляВычисленияАмортизацииБУ");
	СтруктураПолей.Вставить("ЛиквидационнаяСтоимостьБУ"                    	, "ЛиквидационнаяСтоимостьБУ");
	СтруктураПолей.Вставить("ОстаточнаяСтоимостьБУ"                    		, "ОстаточнаяСтоимостьБУ");
	
	СтруктураПолей.Вставить("СуммаПереоценкиОстаточнойСтоимостиБУ" 			, "СуммаПереоценкиОстаточнойСтоимостиБУ");
	СтруктураПолей.Вставить("СуммаПереоценкиНакопленнойАмортизацииБУ" 		, "СуммаПереоценкиНакопленнойАмортизацииБУ");
	
	СтруктураПолей.Вставить("ПревышениеСуммДооценокНадСуммамиУценокБУ" 		, "ПревышениеСуммДооценокНадСуммамиУценокБУ");

	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	
	ТаблицаПоОС = РезультатЗапросаПоОС.Выгрузить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоОС;

	Если мУдалятьДвижения Тогда
    	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
		
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

    ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//проверка, нет ли списанных ОС в табличной части
	УправлениеВнеоборотнымиАктивами.ПроверитьНаСписанность(Дата, Организация, ТаблицаПоОС, Ложь, Истина, Отказ, Заголовок);
	
    УправлениеВнеоборотнымиАктивами.ПроверитьДублированиеОСиНМАвТабличнойЧасти(ОС, "ОсновноеСредство", "Основное средство", Отказ, Заголовок);

	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
КонецПроцедуры

