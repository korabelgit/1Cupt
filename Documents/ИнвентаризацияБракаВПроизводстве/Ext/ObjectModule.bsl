// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)

Перем мВалютаУправленческогоУчета Экспорт;
Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(
		ТабДокумент,
		КоличествоЭкземпляров,
		НаПринтер,
		ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект),
		Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	// Упр. учет
	мСтрокаРеквизитыУпрУчета = "ЗатратыПоБракуВПроизводстве.Сумма";
	
	// Регл. учет
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
							   |ЗатратыПоБракуВПроизводстве.СчетЗатрат, ЗатратыПоБракуВПроизводстве.НалоговоеНазначениеДоходовИЗатрат,
							   |ЗатратыПоБракуВПроизводстве.СуммаРегл,
							   |ЗатратыПоБракуВПроизводстве.СуммаНал,
							   |ЗатратыПоБракуВПроизводстве.СуммаНДС,
							   |ЗатратыПоБракуВПроизводстве.СуммаНДСКредит
							   |";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()


// Процедура проверяет правильность заполнения реквизитов документа
Процедура ПроверкаРеквизитов(Отказ, Заголовок) Экспорт
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	РеквизитыШапки = "Организация, Подразделение, ПодразделениеОрганизации";
	РеквизитыТЧБрак = "СтатьяЗатрат, СчетЗатрат, НалоговоеНазначениеДоходовИЗатрат, Продукция";
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета);
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТЧБрак, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "ЗатратыПоБракуВПроизводстве");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ЗатратыПоБракуВПроизводстве", Новый Структура(РеквизитыТЧБрак), Отказ, Заголовок);
	
	Для Каждого СтрокаТЧ Из ЗатратыПоБракуВПроизводстве Цикл
		
		Если ОтражатьВУправленческомУчете И СтрокаТЧ.Сумма = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Укажите сумму по УУ в строке № " + СтрокаТЧ.НомерСтроки + " (таб. часть ""Затраты по браку в производстве"")", Отказ, Заголовок);
		КонецЕсли;	
		Если ОтражатьВБухгалтерскомУчете И СтрокаТЧ.СуммаРегл = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Укажите сумму по БУ в строке № " + СтрокаТЧ.НомерСтроки + " (таб. часть ""Затраты по браку в производстве"")", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;

	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ЗатратыПоБракуВПроизводстве.Выгрузить(), 
		"Затраты по браку в производстве",
		Отказ, 
		Заголовок, 
		"Инвентаризация", // ВидОперации
		Ложь              // ЭтоЗатраты
	);

	
КонецПроцедуры // ПроверкаРеквизитов()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка ИЛИ ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроверкаРеквизитов(Отказ, Заголовок);
	
КонецПроцедуры // ПередЗаписью

мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
