Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , Ложь);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , Ложь);
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	мУчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	
	Если НЕ Отказ Тогда
		
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаНУ.СхемаНалогообложения.НалогНаПрибыль = Истина);
		СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаНУ.СхемаНалогообложения.НДС            = Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента,Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, СобытиеОС");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

	ДатаДок = СтруктураШапкиДокумента.Дата;
//	ДатаПроводок = КонецГода(ДобавитьМесяц(ДатаДок, -12)); // конец прошлого года
	ДатаПроводок = '20141231235959';

	//Получение данных о видах налоговой деятельности, к которым принадлежат ОС
	УправлениеВнеоборотнымиАктивами.ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл(ДатаПроводок, СтруктураШапкиДокумента.Организация, ТаблицаПоОС,
	                                                  СтруктураШапкиДокумента, Отказ, Заголовок);
													  
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;								
													  
	ПараметрыАмортизацииНУ 	= Движения.ПараметрыАмортизацииОСНалоговыйУчет;
	ПроводкиБУ 				= Движения.Хозрасчетный;
	ОперацииОС 				= Движения.СобытияОСОрганизаций;
	СтоимостьОСБУ 			= Движения.СтоимостьОСБухгалтерскийУчет;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОС = СтрокаТЧ.ОсновноеСредство;
		
		// ПараметрыАмортизацииОСНалоговыйУчет
		СтрокаДвижений = ПараметрыАмортизацииНУ.Добавить();
		
		СтрокаДвижений.Период           = ДатаПроводок;
		СтрокаДвижений.ОсновноеСредство = ТекОС;
		СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
		
		СтрокаДвижений.СрокПолезногоИспользования                  = СтрокаТЧ.СрокПолезногоИспользованияНУ;
		СтрокаДвижений.СрокИспользованияДляВычисленияАмортизации   = СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииНУ;
		СтрокаДвижений.СтоимостьДляВычисленияАмортизации           = СтрокаТЧ.НоваяСтоимостьДляВычисленияАмортизацииНУ;
		
		// СтоимостьОСБухгалтерскийУчет
		Если СтрокаТЧ.ИндексацияБалансовойСтоимости > 0 ИЛИ СтрокаТЧ.ИндексацияНакопленнойАмортизации > 0 Тогда 
			СтрокаДвижений = СтоимостьОСБУ.ДобавитьПриход();
			
			СтрокаДвижений.Период           = ДатаПроводок;
			СтрокаДвижений.ОсновноеСредство = ТекОС;
			СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
			
			СтрокаДвижений.СтоимостьНУ 	= СтрокаТЧ.ИндексацияБалансовойСтоимости;
			СтрокаДвижений.АмортизацияНУ 	= СтрокаТЧ.ИндексацияНакопленнойАмортизации;
		КонецЕсли;	
		
		// СобытияОСОрганизаций
		СтрокаДвижений = ОперацииОС.Добавить();

		СтрокаДвижений.Период            = ДатаПроводок;
		СтрокаДвижений.ОсновноеСредство  = ТекОС;
		СтрокаДвижений.Организация       = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.Событие           = СтруктураШапкиДокумента.СобытиеОС;
		СтрокаДвижений.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		СтрокаДвижений.НомерДокумента    = Номер;
		
		// Хозрасчетный
		Если СтрокаТЧ.ИндексацияБалансовойСтоимости > 0 ИЛИ СтрокаТЧ.ИндексацияНакопленнойАмортизации > 0 Тогда 
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаПроводок;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = НСтр("ru='Индексация стоимости ОС ""';uk='Індексація вартості ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
			Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.СуммаНУДт    = СтрокаТЧ.ИндексацияБалансовойСтоимости;
			Проводка.СуммаНУКт    = СтрокаТЧ.ИндексацияНакопленнойАмортизации;
			
			Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
			
			Проводка.СчетКт       = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
			
			Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
			Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
			
		КонецЕсли;	
		
	КонецЦикла;

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДополнитьСтруктуруПолейТабличнойЧастиОСРегл(СтруктураШапкиДокумента, СтруктураПолей)
	
	СтруктураПолей.Вставить("СрокПолезногоИспользованияНУ"                 	, "СрокПолезногоИспользованияНУ");
	СтруктураПолей.Вставить("СрокИспользованияДляВычисленияАмортизацииНУ"  	, "СрокИспользованияДляВычисленияАмортизацииНУ");
	СтруктураПолей.Вставить("СтоимостьДляВычисленияАмортизацииНУ"          	, "СтоимостьДляВычисленияАмортизацииНУ");
	СтруктураПолей.Вставить("НакопленнаяАмортизацияНУ"                    	, "НакопленнаяАмортизацияНУ");
	СтруктураПолей.Вставить("БалансоваяСтоимостьНУ"                    		, "БалансоваяСтоимостьНУ");
	СтруктураПолей.Вставить("НоваяСтоимостьДляВычисленияАмортизацииНУ"      , "НоваяСтоимостьДляВычисленияАмортизацииНУ");
	СтруктураПолей.Вставить("НоваяБалансоваяСтоимостьНУ"                    , "НоваяБалансоваяСтоимостьНУ");
	СтруктураПолей.Вставить("НоваяНакопленнаяАмортизацияНУ"                 , "НоваяНакопленнаяАмортизацияНУ");
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	// Сформируем структуру табличной части
	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ОсновноеСредство" , "ОсновноеСредство");

	ДополнитьСтруктуруПолейТабличнойЧастиОСРегл(СтруктураШапкиДокумента,СтруктураПолей);

	СтруктураСложныхПолей.Вставить("ИндексацияБалансовойСтоимости"    	, "НоваяБалансоваяСтоимостьНУ - БалансоваяСтоимостьНУ");
	СтруктураСложныхПолей.Вставить("ИндексацияНакопленнойАмортизации"   , "НоваяНакопленнаяАмортизацияНУ - НакопленнаяАмортизацияНУ");
	
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей,,СтруктураСложныхПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоОС;
	
	Если мУдалятьДвижения Тогда
    	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, Отказ, Заголовок);
 	
	//проверка, нет ли списанных ОС в табличной части
	УправлениеВнеоборотнымиАктивами.ПроверитьНаСписанность(Дата, Организация, ТаблицаПоОС, Ложь, Истина, Отказ, Заголовок);
	
    УправлениеВнеоборотнымиАктивами.ПроверитьДублированиеОСиНМАвТабличнойЧасти(ОС, "ОсновноеСредство", "Основное средство", Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
КонецПроцедуры

