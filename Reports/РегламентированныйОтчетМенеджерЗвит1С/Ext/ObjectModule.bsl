////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

#Если Клиент Тогда
	
// Общие переменные регламентированных отчетов
Перем мПолноеИмяФайлаВнешнейОбработки Экспорт; // Заполняется только для зарегистрированных внешних отчетов
Перем мЗаписьЗапрещена Экспорт;                // Запрещает сохранение данных для не зарегистрированных внешних отчетов

// Служебные переменные менеджера 1С:Звіт
Перем мСоответствиеОтчетов;                    // Таблица соответствия рег.отчетов и поддерживаемых схем 1С:Звіт
                                               // Только ДЛЯ УСТАРЕВШИХ конфигураций без поддержки кеша в табличной 
											   // КешСхемЗвит1С справочника РегламентированныеОтчеты 
											   
Перем мПараметрыРаботыЗвит1С;                  // Кеш параметров 1С:Звіт

Перем мМинимальнаяВерсия1СЗвит;                // Минимальная версия 1С:Звіт обеспечивающая корректный вызов методов компоненты

Перем мОбновлениеСправочникаРеглОтчетовВыполнено; // флажок для исключения повторного принудительного обновления справочника в случае
												 // когда была попытка заполнить неподдерживаемую схему отчета 
												 // (обычно при необновлении спр. регл. отчетов после обновления метаданных)

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция возвращает регламентированный отчет по переданой ссылке на справочник
// РегламентированныеОтчеты. Используется для получения связанного внешнего отчета.
//      Ссылка - Ссылка на элемент справочника РегламентированныеОтчеты
//
// Возвращаемое значение:
// 		Отчет/Внешний отчет Отчет связанный с переданным элементом справочника РегламентированныеОтчеты
//
Функция ПолучитьРегламентированныйОтчетПоСсылке(Ссылка) Экспорт
	
	ИсточникОтчета = Ссылка.ИсточникОтчета;
	Если Не ЗначениеЗаполнено(ИсточникОтчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Ссылка = РегламентированнаяОтчетность.ПолучитьРеглОтчетПоУмолчанию(ИсточникОтчета) Тогда
		// Используем существующий кэш
		Возврат РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	КонецЕсли;
	
	Если Не Ссылка.ВнешнийОтчетИспользовать Тогда
		Если Метаданные.Отчеты.Найти(ИсточникОтчета) <> Неопределено Тогда
			Возврат Отчеты[ИсточникОтчета];
		Иначе
			Сообщить(НСтр("ru='Не найден отчет ';uk='Не знайдений звіт '") + СокрП(ИсточникОтчета) + ".", СтатусСообщения.ОченьВажное);
			Возврат Неопределено;
		КонецЕсли; 
	Иначе
		Попытка
			ВременныйФайл = ПолучитьИмяВременногоФайла();
			Ссылка.ВнешнийОтчетХранилище.Получить().Записать(ВременныйФайл);
			ВнешнийОтчет = ВнешниеОтчеты.Создать(ВременныйФайл);
			Попытка
				ВнешнийОтчет.мПолноеИмяФайлаВнешнейОбработки = ВременныйФайл;
			Исключение
			КонецПопытки;
			Возврат ВнешнийОтчет;
		Исключение
			Сообщить(НСтр("ru='Не удалось запустить внешний отчет ';uk='Не вдалося запустити зовнішній звіт '") + СокрП(ИсточникОтчета) + ".", СтатусСообщения.ОченьВажное);
			Возврат Неопределено;
		Конецпопытки;
	
	КонецЕсли;
	
КонецФункции

// Функция получает список поддерживаемых схем из ТекОтчет,
// дополняет им переденную кеш таблицу и возвращает массив добавленных строк
Функция ДополнитьКешТаблицу(ТекущийОтчет, КешТаблица)
	
	ДобавленныеСтроки = Новый Массив;
		
	ТекОтчетМетаданные = Метаданные.НайтиПоТипу(ТипЗнч(ТекущийОтчет));
	Если ТекОтчетМетаданные = Неопределено Тогда
		// Если отчет внешний, то возвращается объект типа "Внешний отчет объект"
		Попытка
			ТекОтчетМетаданные = ТекущийОтчет.Метаданные();
		Исключение 
		КонецПопытки;
	КонецЕсли;
	
	Если ТекОтчетМетаданные = Неопределено Тогда
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
			Сообщить("1С:Звіт. Заполнение соответствия отчетов <-> поддерживаемых схем Звит. Ошибка получения метаданных отчета """+ТекущийОтчет+"""!", СтатусСообщения.Внимание);
		КонецЕсли;
		Возврат ДобавленныеСтроки;
	КонецЕсли;
	
	Если ТекОтчетМетаданные.Макеты.Найти("ПоказателиЗвит1С") = Неопределено Тогда
		Возврат ДобавленныеСтроки;
	КонецЕсли;
	
	МакетПоказателиЗвит1С = ТекущийОтчет.ПолучитьМакет("ПоказателиЗвит1С");
	МакетПоказателиЗвит1С.КодЯзыкаМакета = "ru";
	
	Если МакетПоказателиЗвит1С.Области.Найти("Структура") = Неопределено Тогда
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
			Сообщить("1С:Звіт. Заполнение соответствия отчетов <-> поддерживаемых схем Звит. В отчете """+ТекущийОтчет+""" в макете ПоказателиЗвит1С отсутствует служебная область ""Структура""!", СтатусСообщения.Внимание);
		КонецЕсли;
		Возврат ДобавленныеСтроки;
	КонецЕсли;
	
	ОбластьСтруктура = МакетПоказателиЗвит1С.ПолучитьОбласть("Структура");
	
	Для сч = 1 По ОбластьСтруктура.ВысотаТаблицы Цикл
		ИмяСхемыЗвит1С = СокрЛП(ОбластьСтруктура.Область(сч, 1, сч, 1).Текст);
		ИмяОбласти     = СокрЛП(ОбластьСтруктура.Область(сч, 2, сч, 2).Текст);
		ИмяФормы       = СокрЛП(ОбластьСтруктура.Область(сч, 3, сч, 3).Текст);
		
		Если ПустаяСтрока(ИмяСхемыЗвит1С) ИЛИ Лев(ИмяСхемыЗвит1С, 2)= "//" 
		 ИЛИ ПустаяСтрока(ИмяФормы) Тогда
			Продолжить; 
		КонецЕсли;
		
		// Для наглядности не заполняем параметр "ИмяОбласти" если он совпадает с "ИмяСхемы"
		Если ПустаяСтрока(ИмяОбласти) Тогда
			ИмяОбласти = ИмяСхемыЗвит1С;
		КонецЕсли;
		
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
							
			Если МакетПоказателиЗвит1С.Области.Найти(ИмяОбласти) = Неопределено Тогда
				Сообщить("1С:Звіт. Заполнение соответствия отчетов <-> поддерживаемых схем Звит. В макете ""ПоказателиЗвит1С"" отчета """+ТекущийОтчет+""" отсутствует область """+ИмяОбласти+""", которая описывает заполнение схемы " + ИмяСхемыЗвит1С+ "!", СтатусСообщения.Внимание);
			КонецЕсли;
			
			Если ТекОтчетМетаданные.Формы.Найти(ИмяФормы) = Неопределено Тогда
				Сообщить("1С:Звіт. Заполнение соответствия отчетов <-> поддерживаемых схем Звит. В отчете """+ТекущийОтчет+""" ссылка на несуществующую форму отчета  """+ИмяФормы+""", которая заполненяет схему " + ИмяСхемыЗвит1С + "!", СтатусСообщения.Внимание);
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = КешТаблица.Добавить();
		
		НоваяСтрока.ИмяСхемыЗвит1С = ИмяСхемыЗвит1С;
		НоваяСтрока.ИмяФормы       = ИмяФормы;
		НоваяСтрока.ИмяОбласти     = ИмяОбласти;
		
		ДобавленныеСтроки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции

// Функция заполняет кеш поддерживаемых схем в 1С
//
Процедура ЗаполнитьСоответствиеОтчетов(ИсточникОтчета = Неопределено, ПерезаполнитьПринудительно = Ложь) Экспорт
	
	ХранитьКешВСправочникеРегОтчетов = мПараметрыРаботыЗвит1С.ХранитьКешВСправочникеРегОтчетов;
	
	Если ХранитьКешВСправочникеРегОтчетов Тогда		
		
		Состояние(НСтр("ru = 'Проверка актуальности кеша поддерживаемых схем для 1С:Звіт'; uk = 'Перевірка актуальності кеша підтримуваних схем для 1С:Звіт'"));
	
		НачатьТранзакцию();
		
		Попытка
			// Получаем все отчеты
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РегламентированныеОтчеты.Ссылка КАК Ссылка,
			|	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
			|ИЗ
			|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
			|ГДЕ
			|	РегламентированныеОтчеты.ЭтоГруппа = ЛОЖЬ
			|	И РегламентированныеОтчеты.ИсточникОтчета <> """"
			|	И РегламентированныеОтчеты.ИсточникОтчета <> ""РегламентированныйОтчетМенеджерЗвит1С""
			|	И РегламентированныеОтчеты.ИсточникОтчета <> ""РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности""
			|	И (РегламентированныеОтчеты.КешСхемЗвит1САктуален = ЛОЖЬ ИЛИ &ПерезаполнитьПринудительно)
			|	И РегламентированныеОтчеты.ПометкаУдаления = ЛОЖЬ
			|//ОтборПоИсточникуОтчета И РегламентированныеОтчеты.ИсточникОтчета = &ИсточникОтчета
			|
			|ДЛЯ ИЗМЕНЕНИЯ
			|	Справочник.РегламентированныеОтчеты";
			
			Запрос.УстановитьПараметр("ПерезаполнитьПринудительно", ПерезаполнитьПринудительно); 
			
			Если ЗначениеЗаполнено(ИсточникОтчета) Тогда		
				// Параметр процедуры ИсточникОтчета оставлен для совместимости
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоИсточникуОтчета", "");
				Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
			КонецЕсли;	

			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				// Кеш актуален
				ОтменитьТранзакцию();
				Возврат;
				
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Кеширование поддерживаемых схем для 1С:Звіт'; uk = 'Кешування підтримуваних схем для 1С:Звіт'"));
	
			Если ФлагОтладки Тогда
				Если Не ЗначениеЗаполнено(ИсточникОтчета) Тогда		
					Сообщить("1С:Звіт. Обновление доступных схем для всех отчетов (кеш в справочнике рег.отчетов)");
				Иначе		
					Сообщить("1С:Звіт. Обновление доступных схем для отчета """+ИсточникОтчета+""" (кеш в справочнике рег.отчетов)");
				КонецЕсли;	
			КонецЕсли;			
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ТекущийИсточникОтчета = Выборка.ИсточникОтчета;
				
				ПравоДоступаКОтчету = РегламентированнаяОтчетность.ПравоДоступаКРегламентированномуОтчету(ТекущийИсточникОтчета);
				Если ПравоДоступаКОтчету = Ложь ИЛИ ПравоДоступаКОтчету = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекущийОтчет = ПолучитьРегламентированныйОтчетПоСсылке(Выборка.Ссылка);
				Если ТекущийОтчет = Неопределено Тогда
					Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
						Сообщить("1С:Звіт. Заполнение соответствия. Не удалось получить отчет """+ТекущийИсточникОтчета+"""!", СтатусСообщения.Внимание);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СправочникОбъект.КешСхемЗвит1САктуален = Истина;
				СправочникОбъект.КешСхемЗвит1С.Очистить();
	
				ДополнитьКешТаблицу(ТекущийОтчет, СправочникОбъект.КешСхемЗвит1С);
			
				СправочникОбъект.ОбменДанными.Загрузка = Истина;
				СправочникОбъект.Записать();
					
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			Сообщить(НСтр("ru = 'Ошибка обновления кеша поддерживаемых схем ""1С:Звіт""'; uk = 'Помилка оновлення кеша підтримуваних схем ""1С:Звіт""'"), СтатусСообщения.Важное);
			Сообщить(ОписаниеОшибки(), СтатусСообщения.БезСтатуса);
			
		КонецПопытки;
		
	Иначе
		// Устаревший механизм хранения кеша в памяти. Требует перестроения при каждом старте системы для каждого пользователя
		
		// Требутся перезаполнить определенный отчет, но 1С:Звіт не использовался. Отложим до первого запроса от 1С:Звіт
		Если мСоответствиеОтчетов = Неопределено И ЗначениеЗаполнено(ИсточникОтчета) Тогда
			Возврат;
		КонецЕсли;
		
		Состояние(НСтр("ru = 'Кеширование поддерживаемых схем для 1С:Звіт'; uk = 'Кешування підтримуваних схем для 1С:Звіт'"));
	
		Если ФлагОтладки Тогда
			Если Не ЗначениеЗаполнено(ИсточникОтчета) Тогда		
				Сообщить("1С:Звіт. Обновление доступных схем для всех отчетов (кеш в памяти)");
			Иначе		
				Сообщить("1С:Звіт. Обновление доступных схем для отчета """+ИсточникОтчета+""" (кеш в памяти)");
			КонецЕсли;	
		КонецЕсли;			

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РегламентированныеОтчеты.ИсточникОтчета
		|ИЗ
		|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		|ГДЕ
		|	РегламентированныеОтчеты.ЭтоГруппа = ЛОЖЬ
		|	И РегламентированныеОтчеты.ИсточникОтчета <> """"
		|	И РегламентированныеОтчеты.ИсточникОтчета <> ""РегламентированныйОтчетМенеджерЗвит1С""
		|	И РегламентированныеОтчеты.ИсточникОтчета <> ""РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности""
		|//ОтборПоИсточникуОтчета И РегламентированныеОтчеты.ИсточникОтчета = &ИсточникОтчета
		|";
		Если Не ЗначениеЗаполнено(ИсточникОтчета) Тогда		
			// Перезаполнение всего кеша
			мСоответствиеОтчетов = Новый ТаблицаЗначений;
			мСоответствиеОтчетов.Колонки.Добавить("ИмяСхемыЗвит1С");
			мСоответствиеОтчетов.Колонки.Добавить("ИмяОтчета");
			мСоответствиеОтчетов.Колонки.Добавить("ИмяФормы");
			мСоответствиеОтчетов.Колонки.Добавить("ИмяОбласти");
			
			мСоответствиеОтчетов.Индексы.Добавить("ИмяСхемыЗвит1С");
			
		Иначе		
			// Удалим не актуальную информацию
			МассивСтрок = мСоответствиеОтчетов.НайтиСтроки(Новый Структура("ИмяОтчета", ИсточникОтчета));
			Для каждого Строка Из МассивСтрок Цикл
				мСоответствиеОтчетов.Удалить(Строка);
			КонецЦикла;
					
			Если ЗначениеЗаполнено(ИсточникОтчета) Тогда		
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоИсточникуОтчета", "");
				Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
			КонецЕсли;	
		КонецЕсли;
		
		ВыборкаПоИсточникамОтчета = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПоИсточникамОтчета.Следующий() Цикл
			
			ТекущийИсточникОтчета = ВыборкаПоИсточникамОтчета.ИсточникОтчета;
						
			ПравоДоступаКОтчету = РегламентированнаяОтчетность.ПравоДоступаКРегламентированномуОтчету(ТекущийИсточникОтчета);
			Если ПравоДоступаКОтчету = Ложь ИЛИ ПравоДоступаКОтчету = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийОтчет = РегламентированнаяОтчетность.РеглОтчеты(ТекущийИсточникОтчета); // Используем существующий КЭШ регл.отчетов
			Если ТекущийОтчет = Неопределено Тогда
				Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
					Сообщить("1С:Звіт. Заполнение соответствия. Не удалось получить отчет """+ТекущийИсточникОтчета+"""!", СтатусСообщения.Внимание);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			ДобавленыеСтроки = ДополнитьКешТаблицу(ТекущийОтчет, мСоответствиеОтчетов);
			
			Для каждого ДобавленнаяСтрока Из ДобавленыеСтроки Цикл
				ДобавленнаяСтрока.ИмяОтчета = ТекущийИсточникОтчета;
			КонецЦикла;
			
		КонецЦикла;
		
		// В случае, если какой либо отчет был скопирован, то в таблице мСоответствиеОтчетов будут дубли
		// которых быть не должно
		мСоответствиеОтчетов.Свернуть("ИмяСхемыЗвит1С, ИмяОтчета, ИмяФормы, ИмяОбласти");
		
	КонецЕсли;
		
КонецПроцедуры

// Функция возвращает копию соответствия отчетов для использования извне
//
Функция ПолучитьСоответствиеОтчетов(ИмяСхемыЗвит1С = Неопределено) Экспорт
	
	ХранитьКешВСправочникеРегОтчетов = мПараметрыРаботыЗвит1С.ХранитьКешВСправочникеРегОтчетов;
	
	Если ХранитьКешВСправочникеРегОтчетов Тогда
		
		// Актуализируем кеш
		Если Не ФлагОтладкиПакетноеТестирование Тогда
			ЗаполнитьСоответствиеОтчетов();
		КонецЕсли;
				
		// Получим требуемые данные. Для каждого ИсточникОтчета анализируются схемы только по отчету по умолчанию
		// Дополнительно накладывается фильтр на получение только актуальной части кеша (на случай если были ошибки при актуализации)
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(РегламентированныеОтчеты.Ссылка) КАК Ссылка
		|ПОМЕСТИТЬ РеглОтчетыПоУмолчанию
		|ИЗ
		|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		|ГДЕ
		|	РегламентированныеОтчеты.ЭтоГруппа = ЛОЖЬ
		|	И РегламентированныеОтчеты.ИсточникОтчета <> """"
		|	И РегламентированныеОтчеты.ИсточникОтчета <> ""РегламентированныйОтчетМенеджерЗвит1С""
		|	И РегламентированныеОтчеты.ИсточникОтчета <> ""РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности""
		|	И РегламентированныеОтчеты.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	РегламентированныеОтчеты.ИсточникОтчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегламентированныеОтчетыКешСхемЗвит1С.Ссылка КАК Ссылка,
		|	РегламентированныеОтчетыКешСхемЗвит1С.Ссылка.ИсточникОтчета КАК ИмяОтчета,
		|	РегламентированныеОтчетыКешСхемЗвит1С.ИмяСхемыЗвит1С КАК ИмяСхемыЗвит1С,
		|	РегламентированныеОтчетыКешСхемЗвит1С.ИмяФормы КАК ИмяФормы,
		|	РегламентированныеОтчетыКешСхемЗвит1С.ИмяОбласти КАК ИмяОбласти
		|ИЗ
		|	Справочник.РегламентированныеОтчеты.КешСхемЗвит1С КАК РегламентированныеОтчетыКешСхемЗвит1С
		|ГДЕ
		|	РегламентированныеОтчетыКешСхемЗвит1С.Ссылка В
		|				(ВЫБРАТЬ
		|					РеглОтчетыПоУмолчанию.Ссылка
		|				ИЗ
		|					РеглОтчетыПоУмолчанию КАК РеглОтчетыПоУмолчанию
		|				ГДЕ
		|					РеглОтчетыПоУмолчанию.Ссылка.КешСхемЗвит1САктуален = ИСТИНА)
		|//ОтборПоИмениСхемы	И РегламентированныеОтчетыКешСхемЗвит1С.ИмяСхемыЗвит1С = &ИмяСхемыЗвит1С";
		
		Если ЗначениеЗаполнено(ИмяСхемыЗвит1С) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоИмениСхемы", "");
			Запрос.УстановитьПараметр("ИмяСхемыЗвит1С", ИмяСхемыЗвит1С);
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если ЗначениеЗаполнено(ИмяСхемыЗвит1С) Тогда
			Если Не РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				СоответствиеОтчетов = Новый Структура("ИмяСхемыЗвит1С, ИмяОтчета, ИмяФормы, ИмяОбласти");
				ЗаполнитьЗначенияСвойств(СоответствиеОтчетов, Выборка);
				Возврат СоответствиеОтчетов;
			Иначе
				Возврат Неопределено;							
			КонецЕсли;
		Иначе
			ПолнаяТаблицаСоответствияОтчетов = РезультатЗапроса.Выгрузить();
			ПолнаяТаблицаСоответствияОтчетов.Индексы.Добавить("ИмяСхемыЗвит1С");
			Возврат ПолнаяТаблицаСоответствияОтчетов;
		КонецЕсли;
	Иначе
		// Устаревший механизм хранения кеша в памяти. Требует перестроения при каждом старте системы для каждого пользователя
		
		// Актуализация кеша не требуется, т.к. до хранения кеша схем звита в справочике рег.отчетов второй
		// кеш, хранимый в параметре сеанса ХранилищеПараметровВнешнихРегламентированныхОтчетов, актуализировался только перезапуском.
		// Т.е. использовались закешированные внешние-отчеты, и мСоответствиеОтчетов не было смысла менять
		
		Если мСоответствиеОтчетов = Неопределено Тогда
			ЗаполнитьСоответствиеОтчетов();
		КонецЕсли;

		Если ЗначениеЗаполнено(ИмяСхемыЗвит1С) Тогда
			Возврат мСоответствиеОтчетов.Найти(ИмяСхемыЗвит1С, "ИмяСхемыЗвит1С");
        Иначе
			Возврат мСоответствиеОтчетов.Скопировать();
		КонецЕсли;

	КонецЕсли;

КонецФункции 

// Функция переводит период построения отчета из формата 1С:Звіт в 1С
//
Функция ОпределитьТипПериодаЗвит1С(Знач ДатаПериода, Знач ТипПериода, Периодичность = Неопределено, 
	                                                                  ДатаНачалаПериодаОтчета = Неопределено, 
	                                                                  ДатаКонцаПериодаОтчета = Неопределено)
	ПредставлениеПериода = "";
	
	Если ТипПериода = 0 Тогда
		// Месяц
		ДатаНачалаПериодаОтчета = НачалоМесяца(ДатаПериода);
		ДатаКонцаПериодаОтчета  = КонецМесяца(ДатаПериода);
		Периодичность = Перечисления.Периодичность.Месяц;
		
	ИначеЕсли ТипПериода = 10 Тогда	
		// Квартал
		ДатаНачалаПериодаОтчета = НачалоКвартала(ДатаПериода);
		ДатаКонцаПериодаОтчета  = КонецКвартала(ДатаПериода);
		Периодичность = Перечисления.Периодичность.Квартал;
		
	ИначеЕсли ТипПериода = 20 Тогда	
		// Полугодие
		ГодПериода = Год(ДатаПериода);
		МесяцПериода = Месяц(ДатаПериода);		
		Если МесяцПериода <= 6 Тогда
			ДатаНачалаПериодаОтчета = Дата(ГодПериода, 1, 1);
			ПредставлениеПериода = "1";
		Иначе
			ДатаНачалаПериодаОтчета = Дата(ГодПериода, 7, 1);
			ПредставлениеПериода = "2";
		КонецЕсли;		
		ДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(ДатаНачалаПериодаОтчета, 5));
		Периодичность = Перечисления.Периодичность.Квартал;
		
		ПредставлениеПериода = ПредставлениеПериода+" півриччя "+ПредставлениеПериода(НачалоГода(ДатаПериода), КонецГода(ДатаПериода), "Л=uk_UA");
		
	ИначеЕсли ТипПериода = 25 Тогда	
		// 9 месяцев
		ДатаНачалаПериодаОтчета = НачалоГода(ДатаПериода);
		ДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(ДатаНачалаПериодаОтчета, 8));
		Периодичность = Перечисления.Периодичность.Квартал;
		
	ИначеЕсли ТипПериода = 30 Тогда	
		// Год
		ДатаНачалаПериодаОтчета = НачалоГода(ДатаПериода);
		ДатаКонцаПериодаОтчета  = КонецГода(ДатаПериода);
		Периодичность = Перечисления.Периодичность.Год;
		
	КонецЕсли;

	Если ПустаяСтрока(ПредставлениеПериода) Тогда
		ПредставлениеПериода = ПредставлениеПериода(ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Л=uk_UA; ФП=Истина");
	КонецЕсли;
	
	Возврат ПредставлениеПериода;
	
КонецФункции

// Функция возвращает ссылку на текущую организацию для которой строится 
// отчет в 1С:Звіт
//
Функция ОпределитьТекущуюОрганизациюЗвит1С(ЕДРПОУ, ДатаОтчета = Неопределено)

	Организации = Новый Массив;
	
	Запрос = Новый Запрос();
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТ" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.КодПоЕДРПОУ КАК ЕДРПОУ
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.КодПоЕДРПОУ ПОДОБНО &ЕДРПОУ";
		
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КодыОрганизацииСрезПоследних.Организация КАК Ссылка,
		|	КодыОрганизацииСрезПоследних.КодПоЕДРПОУ КАК ЕДРПОУ
		|ИЗ
		|	РегистрСведений.КодыОрганизации.СрезПоследних(&ДатаОтчета, КодПоЕДРПОУ ПОДОБНО &ЕДРПОУ) КАК КодыОрганизацииСрезПоследних";
		Запрос.УстановитьПараметр("ДатаОтчета", ДатаОтчета);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЕДРПОУ", "%"+СокрЛП(ЕДРПОУ)+"%");

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СокрЛП(Выборка.ЕДРПОУ) = СокрЛП(ЕДРПОУ) Тогда
			Организации.Добавить(Выборка.Ссылка)
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Организации;
	
КонецФункции

// Функция проверяет версию 1С:Звіт на актуальность
//
Функция ВерсияЗвит1САктуальна(ВыводитьПредупреждение = Истина)
	
	// Проверка версии может осуществляться только при запущенном звите	
	Если Компонента.IsZvitActive() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		// Метод getZvitVersion появился версии в 1.00.025
		ВерсияЗвит1С = СокрЛП(Компонента.getZvitVersion());		
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
			Если СтрДлина(ВерсияЗвит1С)<> СтрДлина(мМинимальнаяВерсия1СЗвит) Тогда
				Сообщить("1С:Звіт. Метод getZvitVersion() возвратил некорректный номер версии: """+ВерсияЗвит1С+"""", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЕсли;
	Исключение 
		// Старые версии 1С:Звіт не поддерживают данный метод
		ВерсияЗвит1С = Неопределено;
	КонецПопытки;
	Если (ВерсияЗвит1С = Неопределено) ИЛИ (ВерсияЗвит1С < мМинимальнаяВерсия1СЗвит) Тогда
		Если ВыводитьПредупреждение Тогда
			Компонента.Bring1CToFront();
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Внимание, используется устаревшая версия 1С:Звіт!
	                                                          |
	                                                          |Необходмо обновить программу до версии не ниже %1. Для этого необходмо в окне 1С:Звіт
	                                                          |выбрать пункт меню ""Сервіс - Оновити программу"" и следовать подсказкам мастера обновления'; uk = 'Увага, використовується застаріла версія 1С:Звіт!
	                                                          |
	                                                          |Необходмо оновити програму до версії не нижче %1. Для цього необхідно у вікні 1С:Звіт
	                                                          |обрати пункт меню ""Сервіс - Оновити програму"" і слідувати підказкам майстра оновлення'"), мМинимальнаяВерсия1СЗвит);
			Предупреждение(ТекстПредупреждения);                                                                                                                                                                                                                                        
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Функция заполняет структуру параметров необходимую для работы 1С:Звіт
//
Функция ЗаполнитьПараметрыРаботыЗвит1С()
	
	мПараметрыРаботыЗвит1С = Новый Структура;
	
	мПараметрыРаботыЗвит1С.Вставить("ХранитьКешВСправочникеРегОтчетов", (Метаданные.Справочники.РегламентированныеОтчеты.Реквизиты.Найти("КешСхемЗвит1САктуален") <> Неопределено));
	
	мПараметрыРаботыЗвит1С.Вставить("УчетПоОбособленнымПодразделениям", (Метаданные.Документы.Найти("НалоговаяНакладная") <> Неопределено И Метаданные.Документы.НалоговаяНакладная.Реквизиты.Найти("ОбособленноеПодразделение") <> Неопределено));
	мПараметрыРаботыЗвит1С.Вставить("ИмяДокументаЗКП",                 ?(Метаданные.Документы.Найти("ЗаписьКнигиПриобретения") <> Неопределено, "ЗаписьКнигиПриобретения", "РегистрацияВходящегоНалоговогоДокумента"));
			
	// Ошибки генерируемые в 1С:Звіт при проверке статусов налоговых документов (исходящих)
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов = Новый Соответствие;
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить(-3, НСтр("ru = '<В запросе не заполнены обязательные параметры>'; uk = '<У запиті не заповнені обов''язкові параметри'") + " DOC_TYPE и DOC_MOVE>");
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить(-2, НСтр("ru = 'В ""1С:Звіт"" обнаружено более одного документа соответствующего документу ""1С""'; uk = 'В ""1С:Звіт"" виявлено більше одного документа що відповідає документу ""1С""'"));
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить(-1, НСтр("ru = 'Не выгружен в ""1С:Звіт""'; uk = 'Не вивантажен в ""1С:Звіт""'"));
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить( 0, НСтр("ru = 'Выгружен в ""1С:Звіт""'; uk = 'Вивантажен в ""1С:Звіт""'"));
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить( 1, НСтр("ru = 'Отправлен в ГНС'; uk = 'Вивантажен в ДПА'"));
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить( 2, НСтр("ru = 'Доставлен в ГНС'; uk = 'Доставлен в ДПА'"));
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить( 3, НСтр("ru = 'Отклонен в ГНС'; uk = 'Відхилен в ДПА'"));
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить( 4, НСтр("ru = 'Зарегистрирован в ГНС'; uk = 'Зареестрован в ДПА'"));		
	мПараметрыРаботыЗвит1С.Вставить("ПредставлениеСостоянийДляИсходящихНалоговыхДокументов", ПредставлениеСостоянийДляИсходящихНалоговыхДокументов);
	
	// Ошибки генерируемые в 1С:Звіт при проверке статусов налоговых документов (входящих)
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов = Новый Соответствие;
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить(-3, ПредставлениеСостоянийДляИсходящихНалоговыхДокументов[-3]);                                     // Аналогично исходящим
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить(-2, НСтр("ru = 'В ""1С:Звіт"" обнаружено более одного вытяга соответствующего документу ""1С""'; uk = 'В ""1С:Звіт"" виявлено більше одного витягу що відповідає документу ""1С""'")); // Несуществующее состояние для входящих 
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить(-1, НСтр("ru = 'Не сформирован запрос в ""1С:Звіт""'; uk = 'Не сформирован запит в ""1С:Звіт""'")); // -1 Еще не реализовано со стороны 1С:Звіт, пока используется +2
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить( 1, НСтр("ru = 'Запрос сформирован в ""1С:Звіт""'; uk = 'Запит сформирован в ""1С:Звіт""'"));       //  0 Еще не реализовано со стороны 1С:Звіт, пока используется +2
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить( 0, НСтр("ru = 'Запрос отправлен в ГНС'; uk = 'Запит вивантажен в ДПА'"));
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить( 2, НСтр("ru = 'Не получен вытяг из ЕРНН'; uk = 'Не отримано витяг з ЄРПН'"));                      // +2 Временно, до реализаци статусов -1 и 0
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить( 3, НСтр("ru = 'Не зарегистрирован в ГНС'; uk = 'Не зареестрован в ДПА'"));
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить( 4, НСтр("ru = 'Зарегистрирован в ГНС'; uk = 'Зареестрован в ДПА'"));
	
	мПараметрыРаботыЗвит1С.Вставить("ПредставлениеСостоянийДляВходящихНалоговыхДокументов", ПредставлениеСостоянийДляВходящихНалоговыхДокументов);
	
	мПараметрыРаботыЗвит1С.Вставить("ОшибкаВзаимодейсвияСЗвит1ССтр", НСтр("ru = '<Ошибка взаимодействия с ""1С:Звіт"">'; uk = '<Помилка взаємодії з ""1С:Звіт"">'"));
		
КонецФункции 

// Функция возвращает структуру параметров необходимую для работы 1С:Звіт
//
Функция ПолучитьПараметрыРаботыЗвит1С() Экспорт
	Возврат мПараметрыРаботыЗвит1С;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧИВАЮЩИЕ ЗАПОЛНЕНИЕ ПОКАЗАТЕЛЕЙ ОТЧЕТА

// Процедура выполняет заполнение отчета 1С:Звіт по подготовленным данным из 1С
//
Процедура ЗаполнениеПоказателейОтчетаЗвит1С(Отчет, СоответствиеПоказателей, ДанныеОтчета, РасшифровкаОтчета, РасшифровкаОтчетаЗвит1С)

	ФормироватьРасшифровку = Ложь;
	Если ЗначениеЗаполнено(РасшифровкаОтчета) Тогда
		РасшифровкаОтчетаЗвит1С = РасшифровкаОтчета.СкопироватьКолонки();	
	    ФормироватьРасшифровку = Истина;
	КонецЕсли;
	
	ВсегоСтрокСоответствия = СоответствиеПоказателей.Количество();
	ТекНомерСтроки = 0;
	Пока ТекНомерСтроки < ВсегоСтрокСоответствия Цикл
		
		СтрокаСоответствия = СоответствиеПоказателей[ТекНомерСтроки];
		
		Если НЕ ЗначениеЗаполнено(СтрокаСоответствия.ТаблицаЗвит) Тогда
			
			// простой показатель
			ЗначПоказателя1С = ПолучитьЗначениеПоказателя1С(ДанныеОтчета, СтрокаСоответствия.Таблица1С, СтрокаСоответствия.Имя1С);
			
			// преобразуем показатель
			Если ЗначениеЗаполнено(СтрокаСоответствия.Формат) Тогда
				Выполнить(СтрокаСоответствия.Формат);
			КонецЕсли;
			
			// Создадим расшифровку
			Если ФормироватьРасшифровку Тогда
				
				ИмяЯчейкиДляРасшифровки = ?(ЗначениеЗаполнено(СтрокаСоответствия.Имя1СРасшифровки), СтрокаСоответствия.Имя1СРасшифровки, СтрокаСоответствия.Имя1С);
				
				СтрокиРасшифровки = РасшифровкаОтчета.НайтиСтроки(Новый Структура("ИмяЯчейки", ИмяЯчейкиДляРасшифровки));
				
				Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
					
					СтрокаРасшифровкиЗвит1С = РасшифровкаОтчетаЗвит1С.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРасшифровкиЗвит1С, СтрокаРасшифровки);
					
					СтрокаРасшифровкиЗвит1С.ИмяЯчейки = СтрокаСоответствия.ИмяЗвит; 
				
				КонецЦикла;
				
			КонецЕсли;
			
			// запишем показатель в ЗВИТ
			ЗаписатьВОтчетЗвит1С(Отчет, "", СтрокаСоответствия.ИмяЗвит, ЗначПоказателя1С);
			
			ТекНомерСтроки = ТекНомерСтроки + 1;
			
		Иначе
			
			// определим границу таблицы
			ПерваяСтрокаТаблицы    = ТекНомерСтроки;
			ПоследняяСтрокаТаблицы = ТекНомерСтроки;
			
			ИмяТаблицы = СтрокаСоответствия.ТаблицаЗвит;
			
			СтрокаТаблицыДляИдентификации = Неопределено;
			
			// Проверим первую строку соответсвия показателей на наличие итератора
			Если Найти(СоответствиеПоказателей[ПоследняяСтрокаТаблицы].Имя1С, "*") > 0 Тогда
				СтрокаТаблицыДляИдентификации = ПоследняяСтрокаТаблицы;					
			КонецЕсли;
			
			Пока ПоследняяСтрокаТаблицы + 1 < ВсегоСтрокСоответствия
			   И СоответствиеПоказателей[ПоследняяСтрокаТаблицы + 1].ТаблицаЗвит = ИмяТаблицы Цикл
			
				ПоследняяСтрокаТаблицы = ПоследняяСтрокаТаблицы + 1;
				
				// Проверим все остальные строки соответсвия показателей на наличие итератора
				Если Найти(СоответствиеПоказателей[ПоследняяСтрокаТаблицы].Имя1С, "*") > 0 Тогда
					СтрокаТаблицыДляИдентификации = ПоследняяСтрокаТаблицы;					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрокаТаблицыДляИдентификации = Неопределено Тогда
				СтрокаТаблицыДляИдентификации = ПоследняяСтрокаТаблицы;
				
				Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
					Сообщить("1С:Звіт. Заполнение табличного поля """+ИмяТаблицы+""". Итератор не задан!", СтатусСообщения.Внимание);					
				КонецЕсли;
				
			КонецЕсли;
			
			// будем формировать строки таблицы пока будем находить данные 
			ШаблонИмениПоказателяДляИдентификации = СоответствиеПоказателей[СтрокаТаблицыДляИдентификации].Имя1С;
			ДлинаНомераДляИдентификации           = СоответствиеПоказателей[СтрокаТаблицыДляИдентификации].ДлинаНомера;
			
			// Определим количество строк
			ТекНомерСтрокиТаблицы = 1;
			ИмяТестовогоПоказателяТекСтрокиТаблицы = ПолучитьИмяПоказателяВТаблице(ШаблонИмениПоказателяДляИдентификации, ДлинаНомераДляИдентификации, ТекНомерСтрокиТаблицы);
			// Есть показатель с очередным номером в списке показателей - значит есть и вся строка с таким номером ТекНомерСтрокиТаблицы
			Пока ИмяТестовогоПоказателяТекСтрокиТаблицы <> "" 
			   И ДанныеОтчета[СоответствиеПоказателей[СтрокаТаблицыДляИдентификации].Таблица1С].Свойство(ИмяТестовогоПоказателяТекСтрокиТаблицы) Цикл						
				ТекНомерСтрокиТаблицы = ТекНомерСтрокиТаблицы + 1;
				ИмяТестовогоПоказателяТекСтрокиТаблицы = ПолучитьИмяПоказателяВТаблице(ШаблонИмениПоказателяДляИдентификации, ДлинаНомераДляИдентификации, ТекНомерСтрокиТаблицы);
			КонецЦикла;
			КоличествоСтрокТаблицы = ТекНомерСтрокиТаблицы-1;
			
			Для ТекНомерСтрокиТаблицы = 1 По КоличествоСтрокТаблицы Цикл
				Отчет.NewRow(ИмяТаблицы); 
				
				Для Инд1 = ПерваяСтрокаТаблицы По ПоследняяСтрокаТаблицы Цикл
					
					СтрокаСоответствия = СоответствиеПоказателей[Инд1];
					 					
					ИмяПоказателяТекСтрокиТаблицы = ПолучитьИмяПоказателяВТаблице(СтрокаСоответствия.Имя1С, СтрокаСоответствия.ДлинаНомера, ТекНомерСтрокиТаблицы);
					
					Если ИмяПоказателяТекСтрокиТаблицы = "" Тогда
						// этот параметр мы можем только вычислить
						ЗначПоказателя1С = Неопределено;						
                    ИначеЕсли ИмяПоказателяТекСтрокиТаблицы = "#" Тогда
						// это номер строки таблицы
						ЗначПоказателя1С = ТекНомерСтрокиТаблицы;						
					Иначе
						ЗначПоказателя1С = ПолучитьЗначениеПоказателя1С(ДанныеОтчета, СтрокаСоответствия.Таблица1С, ИмяПоказателяТекСтрокиТаблицы);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаСоответствия.Формат) Тогда
						Выполнить(СтрокаСоответствия.Формат);
					КонецЕсли;
					
					Если ФормироватьРасшифровку Тогда
						
						ИмяЯчейкиДляРасшифровки	= ПолучитьИмяПоказателяВТаблице(СтрокаСоответствия.Имя1СРасшифровки, СтрокаСоответствия.ДлинаНомера, ТекНомерСтрокиТаблицы);
						
						СтрокиРасшифровки = РасшифровкаОтчета.НайтиСтроки(Новый Структура("ИмяЯчейки", ИмяЯчейкиДляРасшифровки));
						
						Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
							
							СтрокаРасшифровкиЗвит1С = РасшифровкаОтчетаЗвит1С.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаРасшифровкиЗвит1С, СтрокаРасшифровки);
							
							СтрокаРасшифровкиЗвит1С.ИмяЯчейки = СтрокаСоответствия.ИмяЗвит + "_" + Формат(ТекНомерСтрокиТаблицы, "ЧГ=0"); 
						
						КонецЦикла;
						
					КонецЕсли;
					
				    ЗаписатьВОтчетЗвит1С(Отчет, ИмяТаблицы, СтрокаСоответствия.ИмяЗвит, ЗначПоказателя1С);
					
				КонецЦикла;
				
			КонецЦикла;
			
			// продолжим обход таблицы соответствия для следующей таблицы или показателя
		    ТекНомерСтроки = ПоследняяСтрокаТаблицы + 1;
			
		КонецЕсли;	
	  
	КонецЦикла;

	Если ФормироватьРасшифровку 
	   И РасшифровкаОтчетаЗвит1С.Количество() = 0 Тогда
		// фактически расшифровки нет
		РасшифровкаОтчетаЗвит1С = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет установку значений параметров в отчетах 1С:Звіт
//
Процедура ЗаписатьВОтчетЗвит1С(Отчет, ИмяТаблицыЗвит1С, ИмяЗвит1С, Значение);
	
	Если (Значение = Неопределено) ИЛИ (Не ФлагОтладки И Не ФлагОтладкиПакетноеТестирование И Не ЗначениеЗаполнено(Значение)) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, Значение); 
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		Если ФлагОтладки Тогда
			Сообщить("1С:Звіт. Ошибка установки показателя (схема """+Отчет.CharCode+?(ПустаяСтрока(ИмяТаблицыЗвит1С),"",""", имя таблицы """+ИмяТаблицыЗвит1С)+""", поле """+ИмяЗвит1С+""", тип значения """+ТипЗнч(Значение)+""", значение """+ Значение+""")", СтатусСообщения.Внимание);
		ИначеЕсли ФлагОтладкиПакетноеТестирование Тогда
			// Проверим выгрузку разных типов данных
			Попытка
				Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, 0); 
				Возврат;
			Исключение
			КонецПопытки;
			
			Попытка
				Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, "0");
				Возврат;
			Исключение
			КонецПопытки;
			
			Попытка
				Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, '2000-01-01');
				Возврат;
			Исключение
			КонецПопытки;
			
			Попытка
				Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, Ложь);
				Возврат;
			Исключение
			КонецПопытки;
			
			Сообщить("1С:Звіт. Ошибка при установки показателя (имя схемы """+Отчет.CharCode+?(ПустаяСтрока(ИмяТаблицыЗвит1С),"",""", имя таблицы """+ИмяТаблицыЗвит1С)+""", имя в Звите """+ИмяЗвит1С+""", тип значения """+ТипЗнч(Значение)+""", значение """+ Значение+""")", СтатусСообщения.Внимание);
			
		КонецЕсли;
	КонецПопытки;
		
КонецПроцедуры

// Функция возвращает таблицу значений с соответствия показателей 1С и 1С:Звіт
// оформленную на основании служебного макета "ПоказателиЗвит1С"
//
Функция ПолучитьТаблицуСоответствияПоказателейЗвит1С(ТабличныйДокумент)

	ТаблицаСоответствия = Новый ТаблицаЗначений();
	ТаблицаСоответствия.Колонки.Добавить("ТаблицаЗвит");
	ТаблицаСоответствия.Колонки.Добавить("ИмяЗвит");
	ТаблицаСоответствия.Колонки.Добавить("Имя1С");
	ТаблицаСоответствия.Колонки.Добавить("Имя1СРасшифровки");
	ТаблицаСоответствия.Колонки.Добавить("ДлинаНомера");
	ТаблицаСоответствия.Колонки.Добавить("Таблица1С");
	ТаблицаСоответствия.Колонки.Добавить("Формат");
	
	КоличествоСтрок = ТабличныйДокумент.Область().Низ;
	
	Для Инд = 1 По КоличествоСтрок Цикл
	
		ИмяЗвит = СокрЛП(ТабличныйДокумент.Область(Инд, 2, Инд, 2).Текст);

		Если ПустаяСтрока(ИмяЗвит) ИЛИ Лев(ИмяЗвит,2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаб = ТаблицаСоответствия.Добавить();
		
		СтрокаТаб.ТаблицаЗвит 	   = СокрЛП(ТабличныйДокумент.Область(Инд, 1, Инд, 1).Текст);
		СтрокаТаб.ИмяЗвит 		   = ИмяЗвит;
		СтрокаТаб.Имя1С 		   = СокрЛП(ТабличныйДокумент.Область(Инд, 3, Инд, 3).Текст);
		СтрокаТаб.Имя1СРасшифровки = СокрЛП(ТабличныйДокумент.Область(Инд, 4, Инд, 4).Текст);
		СтрокаТаб.ДлинаНомера 	   = СокрЛП(ТабличныйДокумент.Область(Инд, 5, Инд, 5).Текст);
		СтрокаТаб.Таблица1С 	   = СокрЛП(ТабличныйДокумент.Область(Инд, 6, Инд, 6).Текст);
		СтрокаТаб.Формат 		   = СокрЛП(ТабличныйДокумент.Область(Инд, 7, Инд, 7).Текст);
		
		Если ПустаяСтрока(СтрокаТаб.Имя1СРасшифровки) Тогда
			СтрокаТаб.Имя1СРасшифровки = СтрокаТаб.Имя1С;
		КонецЕсли;
		
	КонецЦикла;
	
	// Для корректной работы функции заполнения данные связанные
	// с одной таблицей должны распологаться без пропусков
	ТаблицаСоответствия.Сортировать("ТаблицаЗвит, ИмяЗвит");
	
	Возврат	ТаблицаСоответствия;

КонецФункции

// Функция возвращает имя поля в таблицах 1С 
//
Функция ПолучитьИмяПоказателяВТаблице(ШаблонИмениПоля, ДлинаНомера, Номер)

	Если Не ЗначениеЗаполнено(ДлинаНомера) Тогда
		ДлинаНомера = "4";
	КонецЕсли;
	
	Возврат СтрЗаменить(ШаблонИмениПоля, "*", Формат(Номер, "ЧГ=0; ЧВН=; ЧЦ="+ДлинаНомера));
	
КонецФункции

// Функция возвращает необходимые данные из структуры 1С
// 
Функция ПолучитьЗначениеПоказателя1С(Данные, ИмяТаблицы,ИмяПоказателя)

	Значение = Неопределено;
	
	// Если показатель 1С не задан, он может быть только вычислен
	Если ПустаяСтрока(ИмяПоказателя) Тогда
		Возврат Значение;
	КонецЕсли;
	
	Попытка
		Значение = Данные[ИмяТаблицы][ИмяПоказателя]
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
			Сообщить("1С:Звіт. Ошибка получения показателя из 1С для передачи его в Звит (имя табличного поля с показателем """ + ИмяТаблицы + """, имя показателя 1С """ + ИмяПоказателя + """). Имя табличного поля или показателя указано не верно!", СтатусСообщения.Внимание);
		КонецЕсли;
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧИВАЮЩИЕ РАБОТУ С РАСШИФРОВКОЙ

// Функция возвращает параметры расшифровки для 1С:Звіт
//
Функция ПолучитьПараметрыРасшифровкиЗвит1С(Знач Запрос)

	ПараметрыРасшифровки = Новый Структура();
	
	НомПоз   = Найти(Запрос,",");
	ИдОтчета = Число(СокрЛП(Лев(Запрос,НомПоз -1))); 
	
	Запрос = СокрЛП(Сред(Запрос,НомПоз+1));
	НомПоз = Найти(Запрос,",");
	ИмяПок = СокрЛП(Лев(Запрос,НомПоз-1)); 
	
	Запрос = СокрЛП(Сред(Запрос,НомПоз+1));
	НомПоз = Найти(Запрос,",");
	Если НомПоз = 0 Тогда
	    НомСтрТаб = Число(СокрЛП(Запрос));   
	Иначе	
		НомСтрТаб = Число(СокрЛП(Лев(Запрос,НомПоз-1)));   
	КонецЕсли;
	Если НомСтрТаб = 0 Тогда
		Если ВРЕГ(ЛЕВ(ИмяПок, 3)) = "TAB" Тогда
		    // показатель в таблице - увеличим не единицу его номер
			ИмяПок = ИмяПок + "_1";
		КонецЕсли;
	Иначе
		ИмяПок = ИмяПок + "_" + Формат(НомСтрТаб + 1, "ЧГ=0");
	КонецЕсли;
	
	Если НомПоз > 0 Тогда
		НомерСтрокиРасшифровки = Число(Сред(Запрос,НомПоз+1)); 
	Иначе
		НомерСтрокиРасшифровки = 0;
	КонецЕсли;
	
	ПараметрыРасшифровки.Вставить("ИдОтчета",  ИдОтчета);
	ПараметрыРасшифровки.Вставить("ИмяЯчейки", ИмяПок);
	ПараметрыРасшифровки.Вставить("НомерСтрокиРасшифровки",  НомерСтрокиРасшифровки);
	
	Возврат ПараметрыРасшифровки;

КонецФункции 

// Функция возвращает расшифровку для 1С:Звіт
//
Функция ПолучитьРасшифровкуЗвит1С(ИдОтчета)

	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.Расшифровка,
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.ИмяСхемыЗвит1С,
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.ПредставлениеПериода,
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.Организация,
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.ПериодНач,
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.ПериодКон
	|ИЗ
	|	РегистрСведений.РасшифровкиРегламентированныхОтчетовЗвит1С КАК РасшифровкиРегламентированныхОтчетовЗвит1С
	|ГДЕ
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.ИдОтчета = &ИдОтчета";
	
	Запрос.УстановитьПараметр("ИдОтчета", ИдОтчета);
	Расшифровка = Запрос.Выполнить().Выгрузить();
	
	Если Расшифровка.Количество() = 0 Тогда
	
		Возврат Неопределено;
		
	Иначе
		
		// строка таблицы
		Возврат Расшифровка[0];
	
	КонецЕсли;	

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧИВАЮЩИЕ РАБОТУ РЕГ.ОТЧЕТОВ

// Процедура устанавливает значения служебных переменных в рег отчетах если они есть
//
Процедура НастройкаФормыРегламентированногоОтчета(ФормаОтчета)
	
	Если ФлагОтладки Тогда
		// При появлении модального окна рег.отчета данные не должны измениться
		// При закрытии ничего не должно сохраниться
		ФормаОтчета.УстановитьДействие("ПередОткрытием", Неопределено);
		ФормаОтчета.УстановитьДействие("ПриОткрытии",    Неопределено);
		ФормаОтчета.УстановитьДействие("ПередЗакрытием", Неопределено);
		ФормаОтчета.УстановитьДействие("ПриЗакрытии",    Неопределено);
	КонецЕсли;
	
	ФормаОтчета.мМенеджерЗвит1С = ЭтотОбъект;
	
КонецПроцедуры

// Функция заполняет и сохраняет отчет 1С:Звіт 
//
Функция ЗаполнитьИСохранитьОтчетЗвит1С(ОтчетЗвит1С, СоответствиеОтчета, НастройкаФормыОтчета, ДанныеДляСохраненияРасшифровкиОтчета = Неопределено, ОткрыватьОтчет = Неопределено)
	
	ИмяОтчета  = СоответствиеОтчета.ИмяОтчета;
	ИмяФормы   = СоответствиеОтчета.ИмяФормы;
	ИмяОбласти = СоответствиеОтчета.ИмяОбласти;
	
	// Получаем менеджер отчета
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИмяОтчета);
	Если ТекОтчет = Неопределено Тогда
		ТекстОшибки = "Не вдалося відкрити звіт """+ИмяОтчета+"""!
					  |Заповенення звіту "+ИмяСхемыЗвит1С+" неможливе";
		Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	// Получаем требуемую форму отчета
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИмяОтчета, ИмяФормы,,Новый УникальныйИдентификатор);
	Если ТекФорма = Неопределено Тогда
		ТекстОшибки = "Не вдалося відкрити форму """+ИмяОтчета+"."+ИмяФормы+"""!
					  |Заповенення звіту "+ИмяСхемыЗвит1С+" неможливе";
		Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
			Сообщить("1С:Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	// Получаем таблицу соответствия имен
	Попытка
		СоответствиеПоказателейЗвит1СМакет = ТекОтчет.ПолучитьМакет("ПоказателиЗвит1С");
	Исключение 
		ТекстОшибки = "Відсутній макет з відповідністю показників 1С:Звіт!
					  |Заповенення звіту "+ИмяСхемыЗвит1С+" неможливе";
		Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);
		
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
			Сообщить("1С:Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
		КонецЕсли;
		
		Возврат Ложь;
	КонецПопытки;
	СоответствиеПоказателейЗвит1СМакет.КодЯзыкаМакета = "ru";
			
	Если СоответствиеПоказателейЗвит1СМакет.Области.Найти(ИмяОбласти) = Неопределено Тогда
		ТекстОшибки = "Відсутній опис відповідностей показників 1C:Звіт!
					  |Заповенення звіту "+ИмяСхемыЗвит1С+" неможливе";
		Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);
		
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
			Сообщить("1С:Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
		КонецЕсли;
		
		Возврат Ложь;
	Иначе
		СоответствиеПоказателейЗвит1СОбласть = СоответствиеПоказателейЗвит1СМакет.ПолучитьОбласть(ИмяОбласти);	
	КонецЕсли;	
	
	СоответствиеПоказателейЗвит1С = ПолучитьТаблицуСоответствияПоказателейЗвит1С(СоответствиеПоказателейЗвит1СОбласть);
	
	// Заполняем отчет (получаем его данные и расшифровку)
	ДанныеОтчета      = Неопределено;
	РасшифровкаОтчета = Неопределено;
	
	ИспользоватьКеш = ДанныеОтчетов <> Неопределено И ДанныеОтчетов.Свойство(ИмяОтчета + "_" + ИмяФормы, ДанныеОтчета);	
	Если ИспользоватьКеш Тогда
		// при групповом заполнении этот отчет уже вызывался
		// и его данные имеются в памяти
		// заново заполнять не будем
		
		// Восстановим расшифровку показателей
		РасшифровкиОтчетов.Свойство(ИмяОтчета + "_" + ИмяФормы, РасшифровкаОтчета);
	Иначе	
		
		Для каждого КлючИЗанчение Из НастройкаФормыОтчета Цикл
			Попытка
			ТекФорма[КлючИЗанчение.Ключ] = КлючИЗанчение.Значение;
			Исключение КонецПопытки;
		КонецЦикла;
									
		НастройкаФормыРегламентированногоОтчета(ТекФорма);
		
		Если ФлагОтладки Тогда
			Компонента.Bring1CToFront();
		КонецЕсли;
		
		// вызываем процедуру формирования необходимых данных - имена показателей будут в формате 1С
		Попытка
			// попытаемся вызвать процедуру и передать ей параметр. Это для старых отчетов приводит к ошибке
			СтруктураДанных = ТекФорма.СформироватьДанныеДляЗвит1С(ОтчетЗвит1С);
		Исключение
			Попытка
				// старый вызов процедуры
				СтруктураДанных = ТекФорма.СформироватьДанныеДляЗвит1С();
			Исключение
				СтруктураДанных = Неопределено;		
				ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
		КонецПопытки;
		
		Если ФлагОтладки Тогда
			Компонента.BringZvitToFront();
		КонецЕсли;
		
		Если СтруктураДанных = Неопределено Тогда
			ТекстОшибки = "Помилка алгоритму заповнення звіту!
						  |Заповенення звіту "+ИмяСхемыЗвит1С+" неможливе
						  |
						  |"+ОписаниеОшибки;
			Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);
			
			Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
				Сообщить("1С:Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
			КонецЕсли;
			
			Возврат Ложь;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда			
			СтруктураДанных.Свойство("РасшифровкаОтчета", РасшифровкаОтчета);
			СтруктураДанных.Свойство("ДанныеОтчета", ДанныеОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	// Сохраняем данные отчета для использования в других отчетах из заполняемой группы отчетов
	Если ДанныеОтчетов <> Неопределено И ДанныеОтчета <> Неопределено Тогда
		ДанныеОтчетов.Вставить(ИмяОтчета + "_" + ИмяФормы, ДанныеОтчета);
	КонецЕсли;

	// Заполняем показатели отчета и передаем отчет в Звит1С
	// Одновременно преобразовываем расшифровку и оставляем в ней только строки,
	// относящиеся к данному отчету
	// После сохранения сможем получить  ИД отчета из ЗВит1С и под этим номером сохранить расшифровку
	РасшифровкаОтчетаЗвит1С = Неопределено;
	
	ЗаполнениеПоказателейОтчетаЗвит1С(ОтчетЗвит1С, СоответствиеПоказателейЗвит1С, ДанныеОтчета, РасшифровкаОтчета, РасшифровкаОтчетаЗвит1С);
	Если ОткрыватьОтчет = Неопределено Тогда
		ИДотчета = Компонента.SaveReport(ОтчетЗвит1С); 
	Иначе
		ИДотчета = Компонента.SaveReportEx(ОтчетЗвит1С, Число(ОткрыватьОтчет)); 
		
	КонецЕсли;	
	Если ФлагОтладки Тогда
		Сообщить("1С:Звіт. Сохранен  отчет 1С:Звіт (ID " + ИДотчета+")");	
	КонецЕсли;
	
	// Сохраняем расшифровку в регистре сведений после 
	// получения ИД отчета - как ключ для хранения в базе
	Если РасшифровкиОтчетов <> Неопределено И РасшифровкаОтчетаЗвит1С <> Неопределено Тогда
		
		// сохраняем в памяти расшифровку с именами показателей в формате 1С
		РасшифровкиОтчетов.Вставить(ИмяОтчета + "_" + ИмяФормы, РасшифровкаОтчета);		
		
		// сохраняем расшифровку в регистре сведений для последующего ее открытия вызовом из Звит1С
		Если РасшифровкаОтчетаЗвит1С <> Неопределено Тогда
			
			
			РСРасшифрокаЗвит1С = РегистрыСведений.РасшифровкиРегламентированныхОтчетовЗвит1С.СоздатьНаборЗаписей();
			РСРасшифрокаЗвит1С.Отбор.ИдОтчета.Значение = ИДотчета;
			РСРасшифрокаЗвит1С.Отбор.ИдОтчета.Использование = Истина;
			
			ЗаписьРСРасшифрокаЗвит1С = РСРасшифрокаЗвит1С.Добавить();
			
			ЗаписьРСРасшифрокаЗвит1С.Расшифровка 	= Новый ХранилищеЗначения(РасшифровкаОтчетаЗвит1С,  Новый СжатиеДанных(9));
			
			ЗаписьРСРасшифрокаЗвит1С.ИдОтчета 		= ИдОтчета;
			ЗаписьРСРасшифрокаЗвит1С.ИмяСхемыЗвит1С = ИмяСхемыЗвит1С;
			
			ЗаписьРСРасшифрокаЗвит1С.Организация 	= ДанныеДляСохраненияРасшифровкиОтчета.Организация;
			ЗаписьРСРасшифрокаЗвит1С.ПредставлениеПериода = ПредставлениеПериода(ДанныеДляСохраненияРасшифровкиОтчета.ДатаНачалаПериодаОтчета, ДанныеДляСохраненияРасшифровкиОтчета.ДатаКонцаПериодаОтчета, "Л=uk_UA; ФП=Истина");
			ЗаписьРСРасшифрокаЗвит1С.ПериодНач 		= ДанныеДляСохраненияРасшифровкиОтчета.ДатаНачалаПериодаОтчета;
			ЗаписьРСРасшифрокаЗвит1С.ПериодКон 		= ДанныеДляСохраненияРасшифровкиОтчета.ДатаКонцаПериодаОтчета;
			ЗаписьРСРасшифрокаЗвит1С.Периодичность 	= ДанныеДляСохраненияРасшифровкиОтчета.Периодичность;
			ЗаписьРСРасшифрокаЗвит1С.ТипПериода 	= ДанныеДляСохраненияРасшифровкиОтчета.ТипПериода;
			ЗаписьРСРасшифрокаЗвит1С.ДатаФормирования = ТекущаяДата();
			
			Попытка
				РСРасшифрокаЗвит1С.Записать();
				Если ФлагОтладки = Истина Тогда
					Сообщить("1С:Звіт. Расшифровка записана (строк "+РасшифровкаОтчетаЗвит1С.Количество()+")");	
				КонецЕсли;
			Исключение
				ТекстОшибки = "Не вдалося зберегти розшифровку звіту!
				              |
							  |"+ОписаниеОшибки();
				ПредупреждениеЗвит1С(ТекстОшибки, "Помилка");
				Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
					Сообщить("1С:Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
				КонецЕсли;

			КонецПопытки;
		
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
			

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИНТЕРАКТИВНОЙ РАБОТЫ С 1С:Звіт

// Функция определяет, возможен ли запуск 1С:Звіт на данном компьютере
//
Функция ВозможенЗапускЗвит1С(ВыводитьСообщенияОбОшибках)

	// Определим, установлен ли 1С:Звіт
	Если Компонента <> Неопределено Тогда
		// При инициализации менеджера компонента еще не определена
		Если Компонента.IsZvitInstalled() = 0 Тогда
			Если ВыводитьСообщенияОбОшибках Тогда
				Предупреждение(НСтр("ru = 'Ошибка подключения к системе ""1С:Звіт""
									 |Приложение ""1С:Звіт"" не установлено'; uk = 'Помилка підключення до системи ""1С:Звіт""
									 |Програму ""1С:Звіт"" не встановлено'"));	
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим есть ли организации
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ПометкаУдаления = ЛОЖЬ
	|	И Организации.ДатаНачалаИспользованияЗвит1С <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("ДатаНачалаИспользованияЗвит1С", РабочаяДата);
    РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Если ВыводитьСообщенияОбОшибках Тогда
			ТекстВопроса = "На "+Формат(РабочаяДата, "ДФ=dd.MM.yyyy")+
			               НСтр("ru = ' нет организаций использующих ""1С:Звіт"".
	                            |Необходимо указать дату начала использования ""1С:Звіт"" в карточке организации.
	                            |
	                            |Открыть справочник организаций?'; uk = ' нема організації що використовують ""1С:Звіт""
	                            |Необхідно вказати дату початку використання ""1С:Звіт"" в картці організації.
	                            |
	                            |Відкрити довідник організацій?'");
			ЗаголовокВопроса = НСтр("ru = 'Операция отменена'; uk = 'Операція скасована'");
			
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,,ЗаголовокВопроса) = КодВозвратаДиалога.ОК Тогда
				Справочники.Организации.ПолучитьФормуСписка().Открыть();
			КонецЕсли;
		КонецЕсли;
		
	    Возврат Ложь;
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Функция выполняющая подключение dll
//
Функция Инициализация(ВыводитьСообщенияОбОшибках) Экспорт
	
	Если Не ВозможенЗапускЗвит1С(ВыводитьСообщенияОбОшибках) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Компонента = Неопределено;
		
	Попытка
		
			DLL = ПолучитьМакет("ZvitAPI_dll");
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dll");
		Попытка
			DLL.Записать(ИмяВременногоФайла);
		Исключение
			ВызватьИсключение "Не удалось сохранить ""ZvitAPI.dll"" ("+ИмяВременногоФайла+")";
		КонецПопытки;
		
		Если НайтиФайлы(ИмяВременногоФайла).Количество() = 0 Тогда
			ВызватьИсключение "Не удалось найти сохраненный ""ZvitAPI.dll"" ("+ИмяВременногоФайла+")";
		КонецЕсли;
		
		ПодключениеУспешно = ПодключитьВнешнююКомпоненту(ИмяВременногоФайла, "Zvit1С", ТипВнешнейКомпоненты.COM);
		
		Если Не ПодключениеУспешно Тогда
			Попытка
				ЗагрузитьВнешнююКомпоненту(ИмяВременногоФайла);
			Исключение
				ВызватьИсключение "Не удалось загрузить внешнюю компоненту ""ZvitAPI.dll"" ("+ИмяВременногоФайла+")";				
			КонецПопытки;
		КонецЕсли;
			
		Компонента = Новый("AddIn.Zvit1С.ZvitAPI");	

	Исключение
		
		Если ВыводитьСообщенияОбОшибках Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина
			КонецЕсли;
			Сообщить(НСтр("ru='Ошибка при загрузке компоненты ""ZvitAPI.dll""!';uk='Помилка при завантаженні компоненти ""ZvitAPI.dll""!'"), СтатусСообщения.Важное);
			Сообщить(ИнформацияОбОшибке.Описание, СтатусСообщения.БезСтатуса);
		КонецЕсли;
		
	КонецПопытки;
	
	Если Компонента = Неопределено Тогда
				
		Возврат Ложь;
		
	КонецЕсли;
	
	// Установим представление 1С для 1С:Звіт
	Компонента.SetConnectionInfo(ПолучитьЗаголовокСистемы()+" ("+СтрокаСоединенияИнформационнойБазы()+")");		
		
	// Восстановим состояние отладки
	ФлагОтладки = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ФлагОтладки");
	
	Возврат Истина;
	
КонецФункции

// Функция выполняющая переподключение менеджера 1С:Звіт, без обновления компоненты ZviAPI.dll
//
Функция Переинициализация(ВыводитьСообщенияОбОшибках, СтарыйМенеджерЗвит1С) Экспорт
		
	СписокКопируемыхСвойств = "";
	Для каждого МетаданныеРеквизит Из Метаданные().Реквизиты Цикл
		СписокКопируемыхСвойств = СписокКопируемыхСвойств + МетаданныеРеквизит.Имя + ", ";
	КонецЦикла;
	СписокКопируемыхСвойств = Лев(СписокКопируемыхСвойств, СтрДлина(СписокКопируемыхСвойств) - СтрДлина(", "));
	
	Попытка
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтарыйМенеджерЗвит1С, СписокКопируемыхСвойств);
	Исключение
		Если ВыводитьСообщенияОбОшибках Тогда
			Сообщить(НСтр("ru = 'Ошибка переинициализации менеджера ""1С:Звіт""!'; uk = 'Помилка переініціалізаціі менеджера ""1С:Звіт""!'"), СтатусСообщения.Важное);
			Сообщить(ОписаниеОшибки(), СтатусСообщения.БезСтатуса);
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	Если ФлагОтладки Тогда
		Сообщить("1С:Звіт. Произведена переинициализация менеджера 1С:Звіт");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция выполняет запуск 1С:Звіт. Возвращает Истина в случае успеха
//
Функция ЗапуситьЗвит1С(НаПереднийПлан = Неопределено, Организация = Неопределено) Экспорт
	
	// Внимание! Вызов инициируется из конфигурации
	
	// Возможно 1С:Звіт уже запущен
	Если Компонента.IsZvitActive() = 1 Тогда
		Если Не ВерсияЗвит1САктуальна() = Истина Тогда
			// Сессия 1С:Звіт запущена для обновления
			Возврат Ложь;
		КонецЕсли;
		Если НаПереднийПлан = Истина Тогда
			Компонента.BringZvitToFront();
		ИначеЕсли НаПереднийПлан = Ложь Тогда
			Компонента.Bring1CToFront();
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;

	Если Не ВозможенЗапускЗвит1С(Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если запустили в первый раз нужно проверить настройки отчетов
	Если ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_НастройкаПрозводилась") <> Истина Тогда
		ТекстВопроса = НСтр("ru = 'Перед использованием ""1С:Звіт"" необходимо выполнить настройку параметров 
							 |Открыть форму настройки?'; uk = 'Перед використанням ""1С:Звіт"" необхідно виконати настройку параметрів
							 |Відкрити форму настройки?'");
		Если Вопрос(ТекстВопроса,  РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.Отмена Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ОткрытьФормуНастроекЗвит1С();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Запуск 1С:Звіт'; uk = 'Запуск 1С:Звіт'"));	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		// Выполним запуск выбрав сразу определенную организацию
		ПользовательЗвит1С = СокрП(Лев(СокрЛП(ИмяПользователя()), 50));
		
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("","КодПоЕДРПОУ");	
        КодПоЕДРПОУ        = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, СписокПоказателей).КодПоЕДРПОУ;
		
		НаименованиеПолное = Организация.НаименованиеПолное;
		
		РезультатЗапуска = Компонента.LaunchZvitDirect(ПользовательЗвит1С, КодПоЕДРПОУ, НаименованиеПолное);
	Иначе		
		Попытка
			РезультатЗапуска = Компонента.LaunchZvit(ПользовательЗвит1С);
		Исключение
			РезультатЗапуска = Компонента.LaunchZvit();	
		КонецПопытки;
	КонецЕсли;
	
	// Установлено несколько копий 1С:Звіт. При выборе 
	// рабочего каталога с 1С:Звіт пользователь нажал "Відмінити"
	Если РезультатЗапуска = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Запуск ""1С:Звіт"" отменен. Возможные причины:
                             |
                             | 1. Нажата кнопка ""Відмінити"" в форме выбора рабочего каталога ""1С:Звіт""
                             | 2. В каталоге с ""1С:Звіт"" остался файл ""zvit1c.ini"" (для запуска ""1С:Звіт"" достаточно удалить данный файл)'; uk = 'Запуск ""1С:Звіт"" скасовано. Можливі причини:
                             |
                             | 1. Натиснута кнопка ""Відмініті"" у формі вибору робочого каталогу ""1С:Звіт""
                             | 2. У каталозі з ""1С:Звіт"" залишився файл ""zvit1c.ini"" (для запуску ""1С:Звіт"" достатньо видалити даний файл)'"));	
		Возврат Ложь;
		
	ИначеЕсли РезультатЗапуска = 0 Тогда
		Предупреждение(НСтр("ru = 'Ошибка подключения к системе ""1С:Звіт"". Возможные причины:
                             |
                             | 1. Нажата кнопка ""Відмінити"" в форме выбора рабочего каталога ""1С:Звіт""
                             | 2. В каталоге с ""1С:Звіт"" остался файл ""zvit1c.ini"" (для запуска ""1С:Звіт"" достаточно удалить данный файл)'; uk = 'Помилка підключення до системи ""1С:Звіт"". Можливі причини:
                             |
                             | 1. Натиснута кнопка ""Відмініті"" у формі вибору робочого каталогу ""1С:Звіт""
                             | 2. У каталозі з ""1С:Звіт"" залишився файл ""zvit1c.ini"" (для запуску ""1С:Звіт"" достатньо видалити даний файл)'"));	
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ВерсияЗвит1САктуальна() = Истина Тогда
		// Сессия 1С:Звіт запущена для обновления
		Возврат Ложь;
	КонецЕсли;
	
	Если НаПереднийПлан = Истина Тогда
		Компонента.BringZvitToFront();
	ИначеЕсли НаПереднийПлан = Ложь Тогда
		Компонента.Bring1CToFront();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура выполняет закрывает 1С:Звіт. Возвращает Истина в случае успеха
//
Процедура ЗавершитьЗвит1С(Отказ) Экспорт
	
	// Внимание! Вызов инициируется из конфигурации
	Если Компонента = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	Если ФлагОтладки Тогда
		Возврат;
	КонецЕсли;
	
	Если Компонента.IsZvitActive() = 1 Тогда
		Если Компонента.ExitZvit() = 0 Тогда
			Предупреждение(НСтр("ru='Необходимо в начале закрыть окно программы ""1С:Звіт""!';uk='Необхідно попередньо закрити вікно програми ""1С:Звіт""!'"));			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выводит сообщение в окне 1С:Звіт. 
// Сообщения должны быть оформлены только на украинском языке, т.к. 1С:Звіт
// не поддерживает мультиязычность
//
Процедура ПредупреждениеЗвит1С(ТекстПредупреждения, Заголовок) Экспорт

	Если ФлагОтладкиПакетноеТестирование Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если ФлагОтладки Тогда
			Компонента.BringZvitToFront();
		КонецЕсли;
		
	    Компонента.Show1CMessage(ТекстПредупреждения, 3);
		
		Если ФлагОтладки Тогда
			Компонента.Bring1CToFront();
		КонецЕсли;
		
	Исключение
	    Предупреждение(ТекстПредупреждения, , Заголовок);
	КонецПопытки;	

КонецПроцедуры

// Процедура обработчик внешнего события
//
Процедура ОбработкаВнешнегоСобытияЗвит1С(Источник, Событие, Данные) Экспорт

	// Внимание! Вызов инициируется из конфигурации
	Команда = Врег(Событие);
	ИДВызова = Данные;
	
	Если ФлагОтладки Тогда
		Сообщить("1С:Звіт. Внешнее событие (событие """+Событие+""", данные """ + Данные+""")");
	КонецЕсли;
	
	Если Команда = "USER" Тогда    
		
		ПользовательЗвит1С = СокрП(Лев(СокрЛП(ИмяПользователя()), 50));
		Компонента.SaveUser(ПользовательЗвит1С);                 
		
	ИначеЕсли Команда = "REQUESTDBINFO" Тогда
		
		базаИнфо = Компонента.GETDBINFO( ИДВызова );
		
		базаИнфо.Name = СтрокаСоединенияИнформационнойБазы();
			
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("","КодПоЕДРПОУ");	
		
		// В случае использования RLS мы обязаны использовать параметр выборки записей "РАЗРЕШЕННЫЕ"
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка,
		|	Организации.НаименованиеПолное
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ПометкаУдаления = ЛОЖЬ
		|	И Организации.ДатаНачалаИспользованияЗвит1С <> ДАТАВРЕМЯ(1, 1, 1)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл			
			базаИнфо.AddFirm(РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Выборка.Ссылка, РабочаяДата, СписокПоказателей).КодПоЕДРПОУ, Выборка.НаименованиеПолное);
		КонецЦикла;
		
		Компонента.SaveDBInfo(базаИнфо);
		
		Попытка
			СисИнфо = Новый СистемнаяИнформация;
			ВерсияПриложения = СисИнфо.ВерсияПриложения;
			// временно закрываем возможность заполнения карточки предприяти из Звит-1С - строка ниже разблокирует эту возможность
			//Компонента.Set1CVersion(ВерсияПриложения);
		Исключение КонецПопытки
		
	ИначеЕсли Команда = "BEGINREPGROUP" Тогда    
		// начало заполнение группы отчетов
		
		// инициализация структуры
		// структура - код отчета + данные
		ДанныеОтчетов 	   = Новый Структура();
		РасшифровкиОтчетов = Новый Структура();
		
	ИначеЕсли Команда = "ENDREPGROUP" Тогда    
		// конец заполнения группы отчетов
		
		// очистка структуры
		ДанныеОтчетов 	   =  Неопределено;
		РасшифровкиОтчетов =  Неопределено;
				
	ИначеЕсли Команда = "REPORT" Тогда
	
		// Заполнение отчета из группы связанных отчетов
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			ОтчетЗвит1С    = Данные.ОтчетЗвит1С;                // режим тестирования
			ОткрыватьОтчет = Данные.ОткрыватьОтчет;
		Иначе
			ОтчетЗвит1С = Компонента.GetEmptyReport(ИДВызова);  // рабочий режим
			ОткрыватьОтчет = Ложь;
		КонецЕсли;
		
		// По-умолчанию используются единицы и точности которые устанавливаются при открытии отчета (по умолчанию)
		ИмяСхемы = ОтчетЗвит1С.CharCode;
				
		// Определяем используемый для заполнения имя отчета и имя формы		
 		СоответствиеОтчета = ПолучитьСоответствиеОтчетов(ИмяСхемы);
		
		Если СоответствиеОтчета = Неопределено Тогда 
			
			Если НЕ мОбновлениеСправочникаРеглОтчетовВыполнено = Истина Тогда
				
				// перезаполняем список отчетов
				ЗаполнитьСоответствиеОтчетов(Неопределено, Истина);
				мОбновлениеСправочникаРеглОтчетовВыполнено = Истина;
				
				// снова пытаемся получить нужный отчет
				СоответствиеОтчета = ПолучитьСоответствиеОтчетов(ИмяСхемы);
				
			КонецЕсли;
			
			Если СоответствиеОтчета = Неопределено Тогда 
				
				// Заполнение не предусмотрено в 1С
				ТекстОшибки = "Заповнення звіта """+ИмяСхемы+"""
							  |даними з 1С не передбачене!";
				Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);
				
				Если ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
					Сообщить("1С:Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
				КонецЕсли;
				
				Возврат;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если СоответствиеОтчета.ИмяОтчета = "РегламентированныйОтчетНалоговаяНакладная"
		 ИЛИ СоответствиеОтчета.ИмяОтчета = "РегламентированныйОтчетПриложение2КНалоговойНакладной" Тогда
			// Два исключения из общих правил
			ТекстОшибки = "Заповнення звіта """+ИмяСхемы+"""
						  |Виконується з форми відповідного документа ""1С""!";
			Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);
			
			Если ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании это сообщение не выводится, продублируем его
				Сообщить("1С:Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
			КонецЕсли;
			
			Возврат;
		КонецЕсли;		
		
		ДатаНачалаПериодаОтчета = '00010101';
		ДатаКонцаПериодаОтчета  = '00010101';
		Периодичность = Перечисления.Периодичность.ПустаяСсылка();
		
		ТипПериода     = ОтчетЗвит1С.PeriodType;
		ДатаПериода    = ОтчетЗвит1С.PeriodDate;
		
		ОпределитьТипПериодаЗвит1С(ДатаПериода, ТипПериода, Периодичность, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
		
		// Исключение из общих правил. Период отчета 5-ПН строится за 10 дней
		Если СоответствиеОтчета.ИмяОтчета = "РегламентированныйОтчет5ПН" Тогда
			Попытка                                                    
				ДатаКонцаПериодаОтчета = ОтчетЗвит1С.GetValue("MAIN", "1C_DATE");				
			Исключение 
			КонецПопытки;
			
			Если Не ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) Тогда
				ДатаКонцаПериодаОтчета = РабочаяДата;	
			КонецЕсли;
			ДатаКонцаПериодаОтчета  = КонецДня(ДатаКонцаПериодаОтчета);
			ДатаНачалаПериодаОтчета = НачалоДня(ДатаКонцаПериодаОтчета - 10*24*60*60);
			
		ИначеЕсли СоответствиеОтчета.ИмяОтчета = "РегламентированныйОтчетДекларацияОПрибыли" Тогда
			// Отчеты за II-III и II-IV кварталы 2011 года в 1С:Звіт хранятся
			// с периодом "III квартал" и "IV квартал" соответственно
			Если ДатаКонцаПериодаОтчета = КонецКвартала('20110701')
			 ИЛИ ДатаКонцаПериодаОтчета = КонецКвартала('20111001') Тогда
				ДатаНачалаПериодаОтчета = НачалоКвартала('20110401');			
			КонецЕсли;
			
		КонецЕсли;
		ОрганизацииЗвит1С = ОпределитьТекущуюОрганизациюЗвит1С(ОтчетЗвит1С.FIRM_EDRPOU, ДатаКонцаПериодаОтчета);
		Если ОрганизацииЗвит1С.Количество() = 0 Тогда                                                                                                             
			ТекстОшибки = "В 1С не знайдено фірму з ЄДРПОУ """+ОтчетЗвит1С.FIRM_EDRPOU+""""+?(РегламентированнаяОтчетность.ИДКонфигурации()<> "УТ", " на "+Формат(ДатаКонцаПериодаОтчета, "Л=uk_UA; ДФ=dd.MM.yyyy"), "")+"
			              |Заповенення звіту "+ИмяСхемы+" неможливе";
						  
			Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);	
			
			Если ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
				Сообщить("1С:Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ОрганизацииЗвит1С.Количество() > 1 Тогда                                                                                                                       
			ТекстОшибки = "В 1С знайдено декілька фірм з однаковим ЄДРПОУ """+ОтчетЗвит1С.FIRM_EDRPOU+""""+?(РегламентированнаяОтчетность.ИДКонфигурации()<> "УТ", " на "+Формат(ДатаКонцаПериодаОтчета, "Л=uk_UA; ДФ=dd.MM.yyyy"), "")+Символы.ПС;
			Для каждого ОрганизацияЗвит1С Из ОрганизацииЗвит1С Цикл
				ТекстОшибки = ТекстОшибки + Строка(ОрганизацияЗвит1С)+Символы.ПС;
			КонецЦикла;
			ТекстОшибки = ТекстОшибки + "Заповенення звіту "+ИмяСхемы+" неможливе";
						  
			Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);	
			
			Если ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
				Сообщить("1С:Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		ОрганизацияЗвит1С = ОрганизацииЗвит1С[0];
		
		Если ФлагОтладки Тогда
			Сообщить("1С:Звіт. Запрос заполнения отчета из 1С:Звіт (схема """+ИмяСхемы+""", тип периода """+ТипПериода+""", периодичность """+Периодичность+""")");
		КонецЕсли;

		ИмяСхемыЗвит1С = ИмяСхемы;
		
		НастройкаФормыОтчета = Новый Структура;
		НастройкаФормыОтчета.Вставить("Организация", ОрганизацияЗвит1С);
		НастройкаФормыОтчета.Вставить("мДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
		НастройкаФормыОтчета.Вставить("мДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
		НастройкаФормыОтчета.Вставить("мВыбраннаяФорма", СоответствиеОтчета.ИмяФормы);
		НастройкаФормыОтчета.Вставить("мПериодичность", Периодичность);
		НастройкаФормыОтчета.Вставить("Периодичность", Периодичность);
		НастройкаФормыОтчета.Вставить("ДатаПодписи", РабочаяДата);
		
		ДанныеДляСохраненияРасшифровкиОтчета = Новый Структура;
		ДанныеДляСохраненияРасшифровкиОтчета.Вставить("Организация", ОрганизацияЗвит1С);
		ДанныеДляСохраненияРасшифровкиОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
		ДанныеДляСохраненияРасшифровкиОтчета.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
		ДанныеДляСохраненияРасшифровкиОтчета.Вставить("Периодичность", Периодичность);
		ДанныеДляСохраненияРасшифровкиОтчета.Вставить("ТипПериода", ТипПериода);
		
		ЗаполнитьИСохранитьОтчетЗвит1С(ОтчетЗвит1С, СоответствиеОтчета, НастройкаФормыОтчета, ДанныеДляСохраненияРасшифровкиОтчета, ОткрыватьОтчет);
		
		ИмяСхемыЗвит1С = "";
		
	ИначеЕсли Команда = "SHOWREPCELLDETAILS" ИЛИ Команда = "SHOWDETAILSROW" Тогда 
		// Расшифровка		
		// Здесь нужно получить сохраненную расшифровку
		// Определим какую расшифровку "Заказал" Звит1С
		ПараметрыРасшифровки = ПолучитьПараметрыРасшифровкиЗвит1С(ИДВызова);
		
		Если Команда = "SHOWDETAILSROW"
		   И ПараметрыРасшифровки.НомерСтрокиРасшифровки = 0 Тогда
			// вызвали "не ту" строку
			Возврат;
		КонецЕсли;
		
		// Поищем сохраненную расшифровку
		РасшифровкаЗвит1С = ПолучитьРасшифровкуЗвит1С(ПараметрыРасшифровки.ИдОтчета);
		
		Если РасшифровкаЗвит1С = Неопределено 
		 ИЛИ ТипЗнч(РасшифровкаЗвит1С.Расшифровка.Получить()) <> Тип("ТаблицаЗначений") Тогда
			Возврат;
		КонецЕсли;
		
		// Здесь нужно открыть форму расшифровки или отказаться от этой затеи
		ТаблицаРасшифровки = РасшифровкаЗвит1С.Расшифровка.Получить();
		
		// Открываем расшифровку как из регл. отчета
		Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
		
		// Нужно создать муляж формы регл. отчета
		ЗаглушкаФормы = Новый Структура();
		ЗаглушкаФормы.Вставить("СпП", 						ТаблицаРасшифровки);
		ЗаглушкаФормы.Вставить("Организация", 				РасшифровкаЗвит1С.Организация);
		ЗаглушкаФормы.Вставить("мДатаНачалаПериодаОтчета", 	РасшифровкаЗвит1С.ПериодНач);
		ЗаглушкаФормы.Вставить("мДатаКонцаПериодаОтчета", 	РасшифровкаЗвит1С.ПериодКон);
		ЗаглушкаФормы.Вставить("мСтруктураВариантыЗаполнения", Новый Структура());
		ЗаглушкаФормы.Вставить("Заголовок", 				РасшифровкаЗвит1С.ИмяСхемыЗвит1С + " за " + РасшифровкаЗвит1С.ПредставлениеПериода);
		
		Обраб.Форма     = ЗаглушкаФормы;
		Обраб.ИмяЯчейки = ПараметрыРасшифровки.ИмяЯчейки;
		
		ФормаРасшифровки = Обраб.ПолучитьФорму();
		
		Если Команда = "SHOWREPCELLDETAILS" Тогда
			ФормаРасшифровки.ПередаватьДанныеВСистемуЗвит1С = Истина;
		Иначе	
			ФормаРасшифровки.ПередаватьДанныеВСистемуЗвит1С = Ложь;
		КонецЕсли;
		ФормаРасшифровки.мКомпонентаЗвит1С = Компонента;
		
		ФормаРасшифровки.Показать();
		
		Если Команда = "SHOWREPCELLDETAILS" Тогда
			// форма передала данные в Звит1С
			Компонента.SaveDetails();
		Иначе
			// Расшифровка конкретной строки из Звит1С,
		    // сделаем эмуляцию вызова подробной расшифровки конкретной строки
			Расшифровка = ФормаРасшифровки.ЭлементыФормы.ПолеРасшифровки.Область(ПараметрыРасшифровки.НомерСтрокиРасшифровки, 2, ПараметрыРасшифровки.НомерСтрокиРасшифровки, 2).Расшифровка;
			Если Расшифровка <> Неопределено Тогда
				ФормаРасшифровки.ПолеРасшифровкиОбработкаРасшифровки(Неопределено, Расшифровка, Неопределено);				
				Компонента.Bring1CToFront();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Команда = "REQUESTFIRMCARD" Тогда    
		
		// заполнение карточки предприятия данными из 1С
		
		КарточкаОрганизации = Компонента.GetEmptyReport(ИДВызова);		
		
		// определим к какой организации происходит запрос
		КодЕДРПОУОрганизации = КарточкаОрганизации.GetValue("ORG", "EDRPOU");
		
		ОрганизацииЗвит1С = ОпределитьТекущуюОрганизациюЗвит1С(КодЕДРПОУОрганизации, ТекущаяДата());
		Если ОрганизацииЗвит1С.Количество() <> 1 Тогда
			Компонента.Show1CMessage("Заповнення картки підприємства не можливе. В 1С не знайдена, або існує декілька організацій з кодом ЄДРПОУ: " + КодЕДРПОУОрганизации, 3);
		    Компонента.CancelReport(КарточкаОрганизации, "Заповнення картки підприємства не можливе!");
			Возврат;
		КонецЕсли;
		ОрганизацияЗвит1С = ОрганизацииЗвит1С[0];
		
		ТекущееЗначениеКода = "";
		ТекущаяДата = ТекущаяДата();
		
		// короткое наименование
		УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "SHORTNAME", ОрганизацияЗвит1С.Наименование);
		
		// полное наименование
		УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "NAME", ОрганизацияЗвит1С.НаименованиеПолное);
		
		// орган гос. управления
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "ОрганГУ", ТекущееЗначениеКода) Тогда
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "ADMIN_NAME", ТекущееЗначениеКода);	
		КонецЕсли;
		
		
		// НДС и налоговая
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "ИНН", ТекущееЗначениеКода) Тогда
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "INDTAXNUM", ТекущееЗначениеКода);	
		КонецЕсли;
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "НомерСвидетельства", ТекущееЗначениеКода) Тогда
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "CODENDS", ТекущееЗначениеКода);	
		КонецЕсли;
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "НалоговаяИнспекция", ТекущееЗначениеКода) Тогда
		    Если НЕ ТекущееЗначениеКода = Неопределено Тогда 
				УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "TAXINSPNUM", ТекущееЗначениеКода.Код);
			КонецЕсли;
		КонецЕсли;
		
		
		// параметры регистрации
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "ДатаРегистрации", ТекущееЗначениеКода) Тогда
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "GOVREGDATE", ТекущееЗначениеКода);	
		КонецЕсли;
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "НомерРегистрации", ТекущееЗначениеКода) Тогда
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "GOVREGNUM", ТекущееЗначениеКода);	
		КонецЕсли;
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "КемЗарегистрирована", ТекущееЗначениеКода) Тогда
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "GOVREG_NAME", ТекущееЗначениеКода);	
		КонецЕсли;
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "ФормаСобственности", ТекущееЗначениеКода) Тогда
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "PROPERTY_NAME", ТекущееЗначениеКода);	
		КонецЕсли;
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "КодОПФГ", ТекущееЗначениеКода) Тогда
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "ORGLEGAL_NUM", ТекущееЗначениеКода);	
		КонецЕсли;
		
		
		
		// пенсионный фонд
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "КодОрганаПФУ", ТекущееЗначениеКода) Тогда
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "PFUNUM", ТекущееЗначениеКода);	
		КонецЕсли;
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "НомерРегистрацииПФ", ТекущееЗначениеКода) Тогда
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "INSURNUM", ТекущееЗначениеКода);	
		КонецЕсли;
		// по-умолчанию не УТОГ-УТОС
		Если ОрганизацияЗвит1С.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		    УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "CATPLATNUM", 1);	
		иначе	
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "CATPLATNUM", 3);	
		КонецЕсли;
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "КлассПрофессиональногоРиска", ТекущееЗначениеКода) Тогда
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "PROF_RISK", ТекущееЗначениеКода);	
		КонецЕсли;
		
		
		// различные коды
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "КодКОАТУУ", ТекущееЗначениеКода) Тогда
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "KOATYY", ТекущееЗначениеКода);	
		КонецЕсли;
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "НомерФСС", ТекущееЗначениеКода) Тогда
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "INSURFNDNUM", ТекущееЗначениеКода);	
		КонецЕсли;
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "НомерФССНесчСлучай", ТекущееЗначениеКода) Тогда
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "INSURFNDACCNUM", ТекущееЗначениеКода);	
		КонецЕсли;
		Если ПолучитьКодОрганизации(ОрганизацияЗвит1С, ТекущаяДата, "КодКВЕД", ТекущееЗначениеКода) Тогда
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "KVED_NUM", ТекущееЗначениеКода);	
		КонецЕсли;
		
		
		// руководство
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("","ФИОРук");
		СписокПоказателей.Добавить("","ИННРук");
		СписокПоказателей.Добавить("","ФИОБух");
		СписокПоказателей.Добавить("","ИННБух");
		Сведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(ОрганизацияЗвит1С, ТекущаяДата(), СписокПоказателей);
		УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "LEADINDTAX", 		Сведения.ИННРук);
		УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "LEADFIO",    		Сведения.ФИОРук);
		УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "CHIEFACCINDTAX", 	Сведения.ИННБух);
		УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORG", "CHIEFACCFIO",    	Сведения.ФИОБух);
		
		// адрес (Юридический)
		КарточкаОрганизации.NewRow("ORGADR");
		УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "JUR", 1);
		УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "COUNTRY_CHARCODE", "Ukraine");
		Если    ОрганизацияЗвит1С.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо 
			ИЛИ РегламентированнаяОтчетность.ИдКонфигурации() = "ЗУП" Тогда
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			Объект    = ОрганизацияЗвит1С;
		Иначе
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица;
			Объект    = ОрганизацияЗвит1С.ИндивидуальныйПредприниматель;
		КонецЕсли;			
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
		Запрос.УстановитьПараметр("Объект", Объект);
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	*
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Вид = &Вид
		|";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			АдресРазвернуто = РезультатЗапроса.Выгрузить()[0];
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "ZIP", 			АдресРазвернуто.Поле1);
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "REGION_NAME", 	АдресРазвернуто.Поле2);
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "AREA_NAME", 		АдресРазвернуто.Поле3);
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "LOCALITY_NAME", 	АдресРазвернуто.Поле4);
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "STREET_NAME", 	АдресРазвернуто.Поле6);
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "BUILDNUM", 		АдресРазвернуто.Поле7);
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "CORPSNUM", 		АдресРазвернуто.Поле8);
			УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "APARTNUM", 		АдресРазвернуто.Поле9);
		КонецЕсли;
		УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "EMAIL",  НРег(УправлениеКонтактнойИнформацией.ПолучитьEmailИзКонтактнойИнформации(ОрганизацияЗвит1С)));
		
		УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "TELNUM",      УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(ОрганизацияЗвит1С));
		УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "FAX",         0);
		
		////УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "TELNUM",      УправлениеКонтактнойИнформацией.ПолучитьФаксИзКонтактнойИнформации(ОрганизацияЗвит1С));
		////УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "FAX",         1);
		
		НомерТелефона = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(ОрганизацияЗвит1С);
		СтруктураТелефона = УправлениеКонтактнойИнформацией.РазложитьТелефонПоПолям(НомерТелефона);
		УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGADR", "TRUNK", СтруктураТелефона.КодГорода);	
		
		// банковские счета
		Если НЕ Метаданные.Справочники.Найти("БанковскиеСчета") = Неопределено Тогда
			
			БанковскиеСчета = Справочники.БанковскиеСчета.Выбрать(,ОрганизацияЗвит1С);	
			Пока БанковскиеСчета.Следующий() Цикл
				
				Если БанковскиеСчета.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(БанковскиеСчета.ДатаЗакрытия)
					И БанковскиеСчета.ДатаЗакрытия < ТекущаяДата Тогда
					Продолжить;
				КонецЕсли;
				
				КарточкаОрганизации.NewRow("ORGBNK");
				
				Если НЕ Метаданные.Справочники.Организации.Реквизиты.найти("ОсновнойБанковскийСчет") = Неопределено 
					  И ОрганизацияЗвит1С.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка Тогда
					УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGBNK", "MAIN", "1");	
				Иначе
					УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGBNK", "MAIN", "0");	
				КонецЕсли;
				
				УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGBNK", "ACCNUM", 			БанковскиеСчета.НомерСчета);
				УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGBNK", "ACCTYPE_NAME",	БанковскиеСчета.ВидСчета);
				УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGBNK", "CURRENCY", 		БанковскиеСчета.ВалютаДенежныхСредств.Код);
				УстановитьЗначенияПоляКарточкиОрганизации(КарточкаОрганизации, "ORGBNK", "BANK", 			БанковскиеСчета.Банк.Код);
			
			КонецЦикла;
		
		КонецЕсли;		
		
		Компонента.SaveReport(КарточкаОрганизации);
		
	КонецЕсли;

КонецПроцедуры

// Функция открывает форму настройки 1С:Звіт
//
Функция ОткрытьФормуНастроекЗвит1С() Экспорт
	
	Форма = ПолучитьФорму("ФормаНастройки");
	Форма.Открыть();
	РегламентированнаяОтчетность.ДобавитьНадписьВнешнийОтчет(Форма);
	
	Возврат Форма;
	
КонецФункции

// Функция открывает форму для пакетной выгрузки налоговых документов в 1С:Звіт
//
Функция ОткрытьФормуВыгрузкиНалоговыхДокументов() Экспорт
	
	Форма = ПолучитьФорму("ФормаВыгрузкиИПроверкиНалоговыхДокументов", , 0);
	Форма.мЭтоИсходящиеНалоговыеДокументы = Истина;
	Форма.Открыть();
	РегламентированнаяОтчетность.ДобавитьНадписьВнешнийОтчет(Форма);

	Возврат Форма;
	
КонецФункции

// Функция открывает форму для пакетной проверки статуса регистрации входящих налоговых документов
//
Функция ОткрытьФормуПроверкиВходящихНалоговыхДокументов() Экспорт
	
	Форма = ПолучитьФорму("ФормаВыгрузкиИПроверкиНалоговыхДокументов", , 1);
	Форма.мЭтоИсходящиеНалоговыеДокументы = Ложь;
	Форма.Открыть();
	РегламентированнаяОтчетность.ДобавитьНадписьВнешнийОтчет(Форма);
	
	Возврат Форма;
		
КонецФункции

// Функция открывает форму для пакетной проверки статуса регистрации входящих налоговых документов
//
Функция ОткрытьФормуЗагрузкиВходящихНалоговыхДокументов() Экспорт
	
	Форма = ПолучитьФорму("ФормаЗагрузкиВходящихНалоговыхДокументов", , 1);
	Форма.Открыть();
	РегламентированнаяОтчетность.ДобавитьНадписьВнешнийОтчет(Форма);
	
	Возврат Форма;
		
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С НАЛОГОВЫМИ ДОКУМЕНТАМИ

// Функция добавляет переданный налоговый документ в форму пакетной выгрузки и проверки 1С:Звіт
//
Функция ВыгрузитьДокумент(ДокументСсылка, ФормаДокумента = Неопределено) Экспорт
	
	// Внимание! Вызов инициируется из конфигурации	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НалоговаяНакладная")
	 ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
		ЭтоИсходящиеНалоговыеДокументы = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка."+мПараметрыРаботыЗвит1С.ИмяДокументаЗКП) Тогда
		ЭтоИсходящиеНалоговыеДокументы = Ложь;
	Иначе
		ТекстОшибки = НСтр("ru = 'Выгрузка документов данного типа не поддерживается'; uk = 'Вывантаження документів даного типу не підтримуеться'");
		Предупреждение(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Организация = ДокументСсылка.Организация;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстОшибки = НСтр("ru = 'В документе не указана организация'; uk = 'У документі не вказана організація'");
		Предупреждение(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Форма = ?(ЭтоИсходящиеНалоговыеДокументы, ОткрытьФормуВыгрузкиНалоговыхДокументов(), ОткрытьФормуПроверкиВходящихНалоговыхДокументов());	
	
	Форма.ДобавитьНалоговыйДокумент(ДокументСсылка, ФормаДокумента);
	
КонецФункции

// Функция добавляет переданный налоговый документ в форму пакетной выгрузки и проверки 1С:Звіт
//
Функция ВыгрузитьПервичныйДокумент(ДокументСсылка, ФормаДокумента = Неопределено) Экспорт
	
	Если    ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") 
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	Иначе
		ТекстОшибки = НСтр("ru = 'Выгрузка документов данного типа не поддерживается'; uk = 'Вывантаження документів даного типу не підтримуеться'");
		Предупреждение(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Организация = ДокументСсылка.Организация;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстОшибки = НСтр("ru = 'В документе не указана организация'; uk = 'У документі не вказана організація'");
		Предупреждение(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Форма = ОткрытьФормуВыгрузкиПервичныхДокументов(ОпределитьТипДокументаПоСсылке(ДокументСсылка));	
	
	Форма.ДобавитьПервичныйДокумент(ДокументСсылка, ФормаДокумента);
	
КонецФункции


// Функция возвращяает уникальный идентификатор для 1С:Звіт
//
Функция ПолучитьУникальныйИдентификаторДокумента(ДокументСсылка) 
	Возврат СтрЗаменить(Строка(ДокументСсылка.УникальныйИдентификатор()), "-", "");
КонецФункции

// Функция проверяет неизменнойсть ключевых параметров перед повторной выгрузкуой отчета
//
Функция ПроверитьКлючевыеПараметрыПередПовторнойВыгрузкой(ОтчетЗвит1С, ТекстОшибки, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, КодПоЕДРПОУ);
	
	ТекстОшибки = "";

	Если ТипПериода = 0 Тогда
		ДатаПериода = Дата(Год, НомерВПериоде, 1);
	Иначе
		ТекстОшибки = НСтр("ru = 'Ошибка проверки периода выгружаемого документа'; uk = 'Помилка перевірки періоду вивантажуваного документа'");
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
			Сообщить("1С:Звіт. В функцию ПроверитьКлючевыеПараметрыПередПовторнойВыгрузкой() передан некорректный тип периода: "+ТипПериода);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипПериода <> ОтчетЗвит1С.PeriodType
	 ИЛИ ДатаПериода <> ОтчетЗвит1С.PeriodDate Тогда
		ТекстОшибки = ТекстОшибки+Символы.ПС 
		               + НСтр("ru = 'Период: ожидается'; uk = 'Період: очікується'")+" """+ОпределитьТипПериодаЗвит1С(ДатаПериода, ТипПериода)+""" "
					   + НСтр("ru = 'обнаружено'; uk = 'виявлено'")+" """+ОпределитьТипПериодаЗвит1С(ОтчетЗвит1С.PeriodDate, ОтчетЗвит1С.PeriodType)+"""";
	КонецЕсли;				
	//Если СокрЛП(КодПоЕДРПОУ) <> СокрЛП(ОтчетЗвит1С.FIRM_EDRPOU) Тогда
	//	ТекстОшибки = ТекстОшибки+Символы.ПС
	//				   + НСтр("ru = 'Код ЕДРПОУ: ожидается'; uk = 'Код ЄДРПОУ: очікується'")+" """+КодПоЕДРПОУ+""" "
	//				   + НСтр("ru = 'обнаружено'; uk = 'виявлено'")+" """+ОтчетЗвит1С.FIRM_EDRPOU+"""";
	//КонецЕсли;				
		
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = НСтр("ru = 'Обнаружен отчет ""1С:Звіт"" соответсвующий выгружаемому из ""1С"" документу.
                           |Изменены ключевые параметры, выгрузка отменена.'; uk = 'Виявлено звіт ""1С:Звіт"" відповідний вивантаженому з ""1С"" документу.
                           |Змінено ключові параметри, вивантаження скасовано.'")+ТекстОшибки;
						  
	    Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция формирует результат работы функции ВыгрузитьДокумент
//
Функция СформироватьРезультатВыгрузкиДокумента(Описание = Неопределено, Ошибка = Ложь, ЭтоФатальнаяОшибка = Ложь)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ВыгрузкаПрошлаУспешно",    (Не Ошибка));
	ВозвращаемоеЗначение.Вставить("Описание",                 Описание);           // Текст ошибки или информация о выполненных действиях
	ВозвращаемоеЗначение.Вставить("ПроизошлаФатальнаяОшибка", ЭтоФатальнаяОшибка); // Прерывает пакетную выгрузку
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция выгружает переданный налоговый документ в 1С:Звіт
//
Функция ВыгрузитьДокументВЗвит1С(ДокументСсылка, ПараметрыПакетнойВыгрузки = Неопределено) Экспорт
	
	Состояние(НСтр("ru = 'Выгрузка документа '; uk = 'Вивантаження документа '")+Строка(ДокументСсылка));
	
	ОткрыватьОтчет = Ложь;
	Если ТипЗнч(ПараметрыПакетнойВыгрузки) = Тип("Структура") Тогда
		// Режим тестирования может потребовать открытие отчета
		ОткрыватьОтчет = ?(ПараметрыПакетнойВыгрузки.Свойство("ОткрыватьОтчет"), ПараметрыПакетнойВыгрузки.ОткрыватьОтчет, ОткрыватьОтчет);
	КонецЕсли;
	
	// Поддерживаем выгрузку только двух документов
    Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НалоговаяНакладная") Тогда
		ИмяОтчета = "РегламентированныйОтчетНалоговаяНакладная";
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
		ИмяОтчета = "РегламентированныйОтчетПриложение2КНалоговойНакладной";
	Иначе
		ТекстОшибки = НСтр("ru = 'Выгрузка документов данного типа не поддерживается'; uk = 'Вывантаження документів даного типу не підтримуеться'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
	КонецЕсли;
				
	// Проверим документ
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") = Неопределено
	 ИЛИ Не ЗначениеЗаполнено(ДокументСсылка.Организация) Тогда		
		ТекстОшибки = НСтр("ru = 'Организация не определена'; uk = 'Організація не визначена'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
	КонецЕсли;
	
	Организация = ДокументСсылка.Организация;
	
	Если Не ЗначениеЗаполнено(Организация.ДатаНачалаИспользованияЗвит1С) Тогда
		ТекстОшибки = НСтр("ru = '""1С:Звіт"" не используется для организации ""'; uk = '""1С:Звіт"" не використовується для організації ""'")+Строка(Организация)+"""."+Символы.ПС+
		              НСтр("ru = 'В карточке организации не указана дата начала использования ""1С:Звіт""'; uk = 'В картці організації не вказана дата початку використання ""1С:Звіт""'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
	КонецЕсли;

	// Определим рабочую строку из полной таблицы соответствий отчетов 1С и 1С:Звіт	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИмяОтчета);
	Если ТекОтчет = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось открыть отчет ""'; uk = 'Не вдалося відкрити звіт ""'")+ИмяОтчета+"""";
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
	КонецЕсли;
	
	// Определим форму которая будет выполнять заполнение
	ОсновнаяФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИмяОтчета, "ОсновнаяФорма",,Новый УникальныйИдентификатор);
	Если ОсновнаяФорма = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось открыть основную форму отчета ""'; uk = 'Не вдалося відкрити основну форму звіту ""'")+ИмяОтчета+"""";
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
	КонецЕсли;
	ОсновнаяФорма.Организация 	  		   = Организация;
	ОсновнаяФорма.Периодичность 	  	   = Перечисления.Периодичность.Месяц;
	ОсновнаяФорма.мДатаКонцаПериодаОтчета  = КонецМесяца(ДокументСсылка.Дата);
	ОсновнаяФорма.мДатаНачалаПериодаОтчета = НачалоМесяца(ДокументСсылка.Дата);
	ОсновнаяФорма.НалоговыйДокумент 	   = ДокументСсылка;
	

	ДатаВыбораФормыВыгрузки = ДокументСсылка.Дата;
	Если РабочаяДата >= '2016-04-01' Тогда
		
		// начиная с 04.2016 выгрузка в ЕРНН должна осуществляется по форме НА ДАТУ РЕГИСТРАЦИИ??!!
		// проверим соответствующую настройку (возможно данное положение со временем будет отменено)
		ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = Ложь;
		УчетнаяПолитикаНеЗадана = Ложь;
		УчетнаяПолитика	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(РабочаяДата, УчетнаяПолитикаНеЗадана, Организация, "Нал");
		Если НЕ УчетнаяПолитикаНеЗадана Тогда
			ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = УчетнаяПолитика.ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента;
		КонецЕсли;
		
		Если ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = Ложь Тогда
			ДатаВыбораФормыВыгрузки = РабочаяДата;
		КонецЕсли;
		
	КонецЕсли;	
	//ОсновнаяФорма.ВыборФормыПоУмолчанию(ДокументСсылка.Дата, ПоследняяАктуальная);
	ОсновнаяФорма.ВыборФормыПоУмолчанию(ДатаВыбораФормыВыгрузки);

	ИмяФормы = ОсновнаяФорма.мВыбраннаяФорма;
	Если Не ЗначениеЗаполнено(ИмяФормы) Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось определить форму по умолчанию для выгрузки документа'; uk = 'Не вдалося визначити форму за умовчанням для вивантаження документа'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
	КонецЕсли;
	
	// Получаем требуемую форму отчета
	РабочаяФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИмяОтчета, ИмяФормы,,Новый УникальныйИдентификатор);
	Если РабочаяФорма = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось открыть форму ""'; uk = 'Не вдалося відкрити форму ""'")+ИмяОтчета+"."+ИмяФормы+"""";
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
	КонецЕсли;

	// Определим таблицу схем для заполнения
	Попытка
		РабочаяФорма.мМенеджерЗвит1С          = ЭтотОбъект;
		
		РабочаяФорма.Организация 	  		  = Организация;
		РабочаяФорма.Периодичность 	  	      = Перечисления.Периодичность.Месяц;
		РабочаяФорма.мДатаКонцаПериодаОтчета  = КонецМесяца(ДокументСсылка.Дата);
		РабочаяФорма.мДатаНачалаПериодаОтчета = НачалоМесяца(ДокументСсылка.Дата);
		РабочаяФорма.НалоговыйДокумент 	      = ДокументСсылка;
		
		Результат = РабочаяФорма.СформироватьТаблицуСоСхемамиВыгрузкиВЗвит1С();
		
		тзСхемы  = Результат.Схемы;
		Если ТипЗнч(тзСхемы) <> Тип("ТаблицаЗначений")
		 ИЛИ тзСхемы.Количество() = 0 Тогда
			тзСхемы = Неопределено;
		КонецЕсли;
	Исключение
		// Старые формы не поддерживают выгрузку в 1С:Звіт
	    тзСхемы = Неопределено;
	КонецПопытки;
	Если тзСхемы = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Отсутствует поддержка устаревшей схемы для выгрузки текущего документа в ""1С:Звіт""'; uk = 'Відсутня підтримка застарілої схеми для вивантаження поточного документа в ""1С:Звіт""'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
	КонецЕсли;
	
	// На текущий момент поддерживается только выгрузка одной схемы (налоговая накладная, приложение 2 к налоговой накладной)
	ИмяСхемы = тзСхемы[0].ИмяСхемы;
	
	СоответствиеОтчета = ПолучитьСоответствиеОтчетов(ИмяСхемы);
	
	// Последний контроль, технический
	Если СоответствиеОтчета = Неопределено 
	 ИЛИ СоответствиеОтчета.ИмяОтчета <> ИмяОтчета 
	 ИЛИ СоответствиеОтчета.ИмяФормы <> ИмяФормы Тогда
		ТекстОшибки = НСтр("ru = 'Не найдено соответствие для схемы """+ИмяСхемы+""" регламентированного отчета """+ИмяОтчета+"."+ИмяФормы+"""'; uk = 'Не знайдено відповідність для схеми """+ИмяСхемы+"""регламентованого звіта """+ИмяОтчета+"."+ИмяФормы+"""'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
	КонецЕсли;
			
	// Попробуем запустить 1С:Звіт или выведем причины отказа (не установлен, не используется в этой ИБ)
	Если Не ЗапуситьЗвит1С(Ложь, Организация) Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось запустить ""1С:Звіт""'; uk = 'Не вдалося запустити ""1С:Звіт""'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
	КонецЕсли;			
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");	
	
	КодПоЕДРПОУ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, СписокПоказателей).КодПоЕДРПОУ;
	ИДДокумента = ПолучитьУникальныйИдентификаторДокумента(ДокументСсылка);

	ИмяСхемыЗвит1С = СоответствиеОтчета.ИмяСхемыЗвит1С;
	ТипПериода     = 0; // периодичность "Месяц";
	НомерВПериоде  = Месяц(ДокументСсылка.Дата);
	Год            = Год(ДокументСсылка.Дата);

	Если ФлагОтладки Тогда
		Сообщить("1С:Звіт. Создание отчета из 1С (ЕДРПОУ """+КодПоЕДРПОУ+""", схема """+ИмяСхемыЗвит1С+""", тип периода """+ТипПериода+
		                                           """, номер в периоде """+НомерВПериоде+""", год """+Год+""", внутренний ИД """+ИДДокумента+""")");
	КонецЕсли;
	
	Попытка
		Результат = Компонента.OpenCreateReport(КодПоЕДРПОУ, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, ИДДокумента);
		РезультатаСоздания = Результат.CreateResult;
	Исключение
	    РезультатаСоздания = ИнформацияОбОшибке();		
	КонецПопытки;
	
	// Переберем все возможные варианты 
	Если РезультатаСоздания = 0 Тогда
		ОтчетЗвит1С = Результат;
	 	Если ФлагОтладки Тогда
			Сообщить("1С:Звіт. Создан новый отчет");
		КонецЕсли;
		
	ИначеЕсли РезультатаСоздания = 1 Тогда
		ОтчетЗвит1С = Результат;
		Если ФлагОтладки Тогда
			Сообщить("1С:Звіт. Открыт существующий отчет");
		КонецЕсли;
		
		ТекстОшибки = "";
		ДокументКорректен = ПроверитьКлючевыеПараметрыПередПовторнойВыгрузкой(ОтчетЗвит1С, ТекстОшибки, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, КодПоЕДРПОУ);
		Если Не ДокументКорректен Тогда
			ОтчетЗвит1С = Неопределено; // Освобождаем объект
			Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
			
		КонецЕсли; 
				
	ИначеЕсли РезультатаСоздания = 2 Тогда
		ТекстОшибки = НСтр("ru = 'Отчет уже отправлен в контролирующий орган (квитанция не получена)'; uk = 'Звіт вже відправлений у контролюючий орган (квитанція не отримана)'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
 	ИначеЕсли РезультатаСоздания = 3 Тогда
		ТекстОшибки = НСтр("ru = 'Отчет уже принят контролирующим органом'; uk = 'Звіт вже прийнятий контролюючим органом'");		
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли РезультатаСоздания = 4 Тогда
		// Позволяем повторную выгрузку отклоненных отчетов
		ОтчетЗвит1С = Результат;
		Если ФлагОтладки Тогда
			Сообщить("1С:Звіт. Открыт существующий отчет (отклоненный)");
		КонецЕсли;
		
		ТекстОшибки = "";
		ДокументКорректен = ПроверитьКлючевыеПараметрыПередПовторнойВыгрузкой(ОтчетЗвит1С, ТекстОшибки, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, КодПоЕДРПОУ);
		Если Не ДокументКорректен Тогда
			ОтчетЗвит1С = Неопределено; // Освобождаем объект
			Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
			
		КонецЕсли; 

	ИначеЕсли РезультатаСоздания = -1 Тогда
		ТекстОшибки = НСтр("ru = 'Общая ошибка ""1С:Звіт""'; uk = 'Загальна помилка ""1С:Звіт""'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
				
	ИначеЕсли РезультатаСоздания = -2 Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка указания периода отчета'; uk = 'Помилка вказівки періоду звіту'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли РезультатаСоздания = -3 Тогда
		ТекстОшибки = НСтр("ru = 'ЕДРПОУ организации указанной в документе не совпадает с текущем ЕДРПОУ в ""1С:Звіт""
                            |Переключите текущую организацию в ""1С:Звіт"" и повторите выгрузку еще раз'; uk = 'ЄДРПОУ організації зазначеної в документі не збігається з поточному ЄДРПОУ в ""1С:Звіт""
                            |Переключіть поточну організацію в ""1С:Звіт"" і повторіть вивантаження ще раз'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
		
	ИначеЕсли РезультатаСоздания = -4 Тогда
		ТекстОшибки = НСтр("ru = 'Имя схемы "+ИмяСхемыЗвит1С+" задано не верно или схема отсутсвует'; uk = 'Ім''я схеми "+ИмяСхемыЗвит1С+" задано не вірно або схема відсутня'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли РезультатаСоздания = -5 Тогда
		// Заменен на статусы 2, 3, 4. Обработка данного варианта оставлена для совместимости
		ТекстОшибки = НСтр("ru = 'Документ уже подан в контролирующий орган'; uk = 'Документ вже подано в контролюючий орган'");		
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли ТипЗнч(РезультатаСоздания) = Тип("ИнформацияОбОшибке") Тогда
		// Исключение возникшее в 1С
		ИнформацияОбОшибке = РезультатаСоздания;
		Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке.Причина ;
		КонецЕсли;
		
		Возврат СформироватьРезультатВыгрузкиДокумента(ИнформацияОбОшибке.Описание, Истина);
	КонецЕсли;
	
	НастройкаФормыОтчета = Новый Структура;
	НастройкаФормыОтчета.Вставить("Организация", Организация);
	НастройкаФормыОтчета.Вставить("мДатаНачалаПериодаОтчета", НачалоМесяца(ДокументСсылка.Дата));
	НастройкаФормыОтчета.Вставить("мДатаКонцаПериодаОтчета", КонецМесяца(ДокументСсылка.Дата));
	НастройкаФормыОтчета.Вставить("мВыбраннаяФорма", СоответствиеОтчета.ИмяФормы);
	НастройкаФормыОтчета.Вставить("Периодичность", Перечисления.Периодичность.Месяц);
	НастройкаФормыОтчета.Вставить("ДатаПодписи", РабочаяДата);
	НастройкаФормыОтчета.Вставить("НалоговыйДокумент", ДокументСсылка);
	Если ТипЗнч(ПараметрыПакетнойВыгрузки) = Тип("Структура") Тогда
		Если ПараметрыПакетнойВыгрузки.Свойство("РасчетЦеныТочный") Тогда
			НастройкаФормыОтчета.Вставить("РасчетЦеныТочный", ПараметрыПакетнойВыгрузки.РасчетЦеныТочный);
		КонецЕсли;
	КонецЕсли;	
		
	ФлагУспешногоСохранения = ЗаполнитьИСохранитьОтчетЗвит1С(ОтчетЗвит1С, СоответствиеОтчета, НастройкаФормыОтчета,,ОткрыватьОтчет);
	
	// допишем в отчет служебные поля, их нет в XML, но они нужны для отправки налоговых документов контрагентам
	ДопПоказатели = Новый Структура;
	Попытка
		ДопПоказатели.Вставить("EDR_POK", ДокументСсылка.Контрагент.КодПоЕДРПОУ);
		//ДопПоказатели.Вставить("DEPT_POK", ДокументСсылка.Контрагент.КодФилиала);
		//Если Не ЗначениеЗаполнено(ДопПоказатели.DEPT_POK) Тогда
		//	ДопПоказатели.Удалить("DEPT_POK");
		//КонецЕсли;
		КодФилиалаИЕДРПОУ = ДокументСсылка.Контрагент.КодФилиала;
		Если ЗначениеЗаполнено(КодФилиалаИЕДРПОУ) Тогда
			
			ПозицияРазделителя = Найти(КодФилиалаИЕДРПОУ, "@");
			
			Если ПозицияРазделителя > 0 Тогда
				
				// Указан код по ЕДРПОУ
				КодФилиала	= СокрЛП(Лев(КодФилиалаИЕДРПОУ, ПозицияРазделителя - 1));
				КодЕДРПОУ	= СокрЛП(Сред(КодФилиалаИЕДРПОУ, ПозицияРазделителя + 1));
				////Если ЗначениеЗаполнено(КодФилиала) Тогда
				////	ДопПоказатели.Вставить("DEPT_POK", КодФилиала);
				////КонецЕсли;
				Если ЗначениеЗаполнено(КодЕДРПОУ) Тогда
					ДопПоказатели.Вставить("EDR_POK", КодЕДРПОУ);
				КонецЕсли;
				
			Иначе 
				
				 // просто код филиала
				 ////ДопПоказатели.Вставить("DEPT_POK", СокрЛП(КодФилиалаИЕДРПОУ));
				
			КонецЕсли;
			
		
		КонецЕсли;
		
	Исключение КонецПопытки;
	Для каждого ДопПоказатель Из ДопПоказатели Цикл
		ЗаписатьВОтчетЗвит1С(ОтчетЗвит1С, "", ДопПоказатель.Ключ, ДопПоказатель.Значение);
	КонецЦикла;
	Если ДопПоказатели.Количество() > 0 Тогда
		Компонента.SaveReportEx(ОтчетЗвит1С, Число(ОткрыватьОтчет));	
	КонецЕсли;
	
	ИмяСхемыЗвит1С = ""; // Очищаем реквизит менеджера 1С:Звіт т.к. работа с документом завершена 
	
	Если Не ФлагУспешногоСохранения Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка передачи данных в 1С:Звіт'; uk = 'Помилка передачі даних в 1С:Звіт'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
	КонецЕсли;
	
	Возврат СформироватьРезультатВыгрузкиДокумента(Неопределено, Ложь);
	
КонецФункции

Функция ОпределитьТипДокументаПоСсылке(Документ) Экспорт

	Результат  = Неопределено;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		Результат = "Рахунок";
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		Результат = "Рахунок";
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Результат  = "Накладна";
		
		// если есть только услуги - то акт, иначе - накладная
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	""Товары"" КАК ВидНоменклатуры
		                      |ИЗ
		                      |	Документ.РеализацияТоваровУслуг.Товары КАК Док
		                      |ГДЕ
		                      |	Док.Ссылка = &Документ
		                      |
		                      |ОБЪЕДИНИТЬ
		                      |
		                      |ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	""Услуги""
		                      |ИЗ
		                      |	Документ.РеализацияТоваровУслуг.Услуги КАК Док
		                      |ГДЕ
		                      |	Док.Ссылка = &Документ");
		Запрос.УстановитьПараметр("Документ", Документ);
		Выборка = Запрос.Выполнить().Выбрать();
		Если  Выборка.Следующий()
			И Выборка.ВидНоменклатуры = "Услуги" Тогда
			Результат  = "Акт";	
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Результат  = "Накладна";
		
		// если есть только услуги - то акт, иначе - накладная
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		                      |	""Товары"" КАК ВидНоменклатуры
		                      |ИЗ
		                      |	Документ.ПоступлениеТоваровУслуг.Товары КАК Док
		                      |ГДЕ
		                      |	Док.Ссылка = &Документ
							  |");
		Если НЕ РегламентированнаяОтчетность.ИДКонфигурации() = "УТ" Тогда
			Запрос.Текст = 	Запрос.Текст +"
							  |ОБЪЕДИНИТЬ
							  |ВЫБРАТЬ ПЕРВЫЕ 1
							  |	""Оборудование"" КАК ВидНоменклатуры
							  |ИЗ
							  |	Документ.ПоступлениеТоваровУслуг.Оборудование КАК Док
							  |ГДЕ
							  |	Док.Ссылка = &Документ
							  |
							  
							  |ОБЪЕДИНИТЬ
							  |ВЫБРАТЬ ПЕРВЫЕ 1
							  |	""ОбъектыСтроительства"" КАК ВидНоменклатуры
							  |ИЗ
							  |	Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК Док
							  |ГДЕ
							  |	Док.Ссылка = &Документ
							  
							  |ОБЪЕДИНИТЬ
							  |ВЫБРАТЬ ПЕРВЫЕ 1
							  |	""БланкиСтрогогоУчета"" КАК ВидНоменклатуры
							  |ИЗ
							  |	Документ.ПоступлениеТоваровУслуг.БланкиСтрогогоУчета КАК Док
							  |ГДЕ
							  |	Док.Ссылка = &Документ";
		
		КонецЕсли; 
		Запрос.Текст = Запрос.Текст +"
							  |ОБЪЕДИНИТЬ
							  |ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	""Услуги""
		                      |ИЗ
		                      |	Документ.ПоступлениеТоваровУслуг.Услуги КАК Док
		                      |ГДЕ
		                      |	Док.Ссылка = &Документ";

		 
		Запрос.УстановитьПараметр("Документ", Документ);
		Выборка = Запрос.Выполнить().Выбрать();
		Если  Выборка.Следующий()
			И Выборка.ВидНоменклатуры = "Услуги" Тогда
			Результат  = "Акт";	
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ()

Функция ВыгрузитьПервичныйДокументВЗвит1С(ДокументСсылка, ПараметрыПакетнойВыгрузки = Неопределено) Экспорт
	
	Состояние(НСтр("ru = 'Выгрузка документа '; uk = 'Вивантаження документа '")+Строка(ДокументСсылка));
	
	ОткрыватьОтчет = Ложь;
	Если ТипЗнч(ПараметрыПакетнойВыгрузки) = Тип("Структура") Тогда
		// Режим тестирования может потребовать открытие отчета
		ОткрыватьОтчет = ?(ПараметрыПакетнойВыгрузки.Свойство("ОткрыватьОтчет"), ПараметрыПакетнойВыгрузки.ОткрыватьОтчет, ОткрыватьОтчет);
	КонецЕсли;

	// Проверим документ
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") = Неопределено
	 ИЛИ Не ЗначениеЗаполнено(ДокументСсылка.Организация) Тогда		
		ТекстОшибки = НСтр("ru = 'Организация не определена'; uk = 'Організація не визначена'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
	КонецЕсли;
	
	ИмяОтчета = "РегламентированныйОтчетПервичныеДокументыЗвит1С";
	ТипДокумента = ОпределитьТипДокументаПоСсылке(ДокументСсылка);
	
	Если Врег(ТипДокумента) = Врег("Рахунок") Тогда
		ИмяСхемы = "1CPAX";
		ИмяФормы = "Счет";
	ИначеЕсли Врег(ТипДокумента) = Врег("Акт") Тогда
		ИмяСхемы = "AKT1C";
		ИмяФормы = "Акт";
	ИначеЕсли Врег(ТипДокумента) = Врег("Накладна") Тогда
		ИмяСхемы = "1CBH";
		ИмяФормы = "Накладная";
	КонецЕсли;
	
	Если ДокументСсылка.УчитыватьНДС Тогда
	   Если  ДокументСсылка.СуммаВключаетНДС Тогда
			ИмяФормы = ИмяФормы + "СНДС";
		Иначе
	        ИмяСхемы = ИмяСхемы + "0";
			ИмяФормы = ИмяФормы + "БезНДС";
	   КонецЕсли;
	Иначе	
        ИмяСхемы = ИмяСхемы + "B";
	КонецЕсли;
	СоответствиеОтчета = ПолучитьСоответствиеОтчетов(ИмяСхемы);
	
	Организация = ДокументСсылка.Организация;
	Если Не ЗначениеЗаполнено(Организация.ДатаНачалаИспользованияЗвит1С) Тогда
		ТекстОшибки = НСтр("ru = '""1С:Звіт"" не используется для организации ""'; uk = '""1С:Звіт"" не використовується для організації ""'")+Строка(Организация)+"""."+Символы.ПС+
		              НСтр("ru = 'В карточке организации не указана дата начала использования ""1С:Звіт""'; uk = 'В картці організації не вказана дата початку використання ""1С:Звіт""'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
	КонецЕсли;

	// Определим рабочую строку из полной таблицы соответствий отчетов 1С и 1С:Звіт	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИмяОтчета);
	Если ТекОтчет = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось открыть отчет ""'; uk = 'Не вдалося відкрити звіт ""'")+ИмяОтчета+"""";
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФормы) Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось определить форму по умолчанию для выгрузки документа'; uk = 'Не вдалося визначити форму за умовчанням для вивантаження документа'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
	КонецЕсли;
	
	// Получаем требуемую форму отчета
	РабочаяФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИмяОтчета, ИмяФормы,,Новый УникальныйИдентификатор);
	Если РабочаяФорма = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось открыть форму ""'; uk = 'Не вдалося відкрити форму ""'")+ИмяОтчета+"."+ИмяФормы+"""";
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
	КонецЕсли;
	
	// Последний контроль, технический
	Если СоответствиеОтчета = Неопределено 
	 ИЛИ СоответствиеОтчета.ИмяФормы <> ИмяФормы Тогда
		ТекстОшибки = НСтр("ru = 'Не найдено соответствие для схемы """+ИмяСхемы+""" первичного документа """+ИмяФормы+"""'; uk = 'Не знайдено відповідність для схеми """+ИмяСхемы+"""первинного документа """+ИмяФормы+"""'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
	КонецЕсли;
			
	// Попробуем запустить 1С:Звіт или выведем причины отказа (не установлен, не используется в этой ИБ)
	Если Не ЗапуситьЗвит1С(Ложь, Организация) Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось запустить ""1С:Звіт""'; uk = 'Не вдалося запустити ""1С:Звіт""'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
	КонецЕсли;			
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");	
	
	КодПоЕДРПОУ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, СписокПоказателей).КодПоЕДРПОУ;
	ИДДокумента = ПолучитьУникальныйИдентификаторДокумента(ДокументСсылка);

	ИмяСхемыЗвит1С = СоответствиеОтчета.ИмяСхемыЗвит1С;
	ТипПериода     = 0; // периодичность "Месяц";
	НомерВПериоде  = Месяц(ДокументСсылка.Дата);
	Год            = Год(ДокументСсылка.Дата);

	Если ФлагОтладки Тогда
		Сообщить("1С:Звіт. Создание отчета из 1С (ЕДРПОУ """+КодПоЕДРПОУ+""", схема """+ИмяСхемыЗвит1С+""", тип периода """+ТипПериода+
		                                           """, номер в периоде """+НомерВПериоде+""", год """+Год+""", внутренний ИД """+ИДДокумента+""")");
	КонецЕсли;
	
	Попытка
		Результат = Компонента.OpenCreateRTFReport(КодПоЕДРПОУ, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, ИДДокумента);
		РезультатаСоздания = Результат.CreateResult;
	Исключение
	    РезультатаСоздания = ИнформацияОбОшибке();		
	КонецПопытки;
	
	// Переберем все возможные варианты 
	Если РезультатаСоздания = 0 Тогда
		ОтчетЗвит1С = Результат;
	 	Если ФлагОтладки Тогда
			Сообщить("1С:Звіт. Создан новый отчет");
		КонецЕсли;
		
	ИначеЕсли РезультатаСоздания = 1 Тогда
		ОтчетЗвит1С = Результат;
		Если ФлагОтладки Тогда
			Сообщить("1С:Звіт. Открыт существующий отчет");
		КонецЕсли;
		
		ТекстОшибки = "";
				
	ИначеЕсли РезультатаСоздания = 2 Тогда
		ТекстОшибки = НСтр("ru = 'Отчет уже отправлен контрагенту'; uk = 'Звіт вже відправлений контрагенту'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
 	ИначеЕсли РезультатаСоздания = 3 Тогда
		ТекстОшибки = НСтр("ru = 'Отчет уже принят контрагентом'; uk = 'Звіт вже прийнятий контрагентом'");		
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли РезультатаСоздания = 4 Тогда
		// Позволяем повторную выгрузку отклоненных отчетов
		ОтчетЗвит1С = Результат;
		Если ФлагОтладки Тогда
			Сообщить("1С:Звіт. Открыт существующий документ");
		КонецЕсли;
		
		ТекстОшибки = "";
		ДокументКорректен = ПроверитьКлючевыеПараметрыПередПовторнойВыгрузкой(ОтчетЗвит1С, ТекстОшибки, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, КодПоЕДРПОУ);
		Если Не ДокументКорректен Тогда
			ОтчетЗвит1С = Неопределено; // Освобождаем объект
			Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
			
		КонецЕсли; 

	ИначеЕсли РезультатаСоздания = -1 Тогда
		ТекстОшибки = НСтр("ru = 'Общая ошибка ""1С:Звіт""'; uk = 'Загальна помилка ""1С:Звіт""'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
				
	ИначеЕсли РезультатаСоздания = -2 Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка указания периода отчета'; uk = 'Помилка вказівки періоду звіту'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли РезультатаСоздания = -3 Тогда
		ТекстОшибки = НСтр("ru = 'ЕДРПОУ организации указанной в документе не совпадает с текущем ЕДРПОУ в ""1С:Звіт""
                            |Переключите текущую организацию в ""1С:Звіт"" и повторите выгрузку еще раз'; uk = 'ЄДРПОУ організації зазначеної в документі не збігається з поточному ЄДРПОУ в ""1С:Звіт""
                            |Переключіть поточну організацію в ""1С:Звіт"" і повторіть вивантаження ще раз'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
		
	ИначеЕсли РезультатаСоздания = -4 Тогда
		ТекстОшибки = НСтр("ru = 'Имя схемы "+ИмяСхемыЗвит1С+" задано не верно или схема отсутсвует'; uk = 'Ім''я схеми "+ИмяСхемыЗвит1С+" задано не вірно або схема відсутня'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли РезультатаСоздания = -5 Тогда
		// Заменен на статусы 2, 3, 4. Обработка данного варианта оставлена для совместимости
		ТекстОшибки = НСтр("ru = 'Документ вже відправлено контрагенту'; uk = 'Документ вже передано контрагенту'");		
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли РезультатаСоздания = -6 Тогда
		ТекстОшибки = НСтр("ru = 'Отсутствует лицензия 1С:Звіт для работы с ЭДО'; uk = 'Відсутня ліцензія в 1С:Звіт для роботи з ЕДО'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли ТипЗнч(РезультатаСоздания) = Тип("ИнформацияОбОшибке") Тогда
		// Исключение возникшее в 1С
		ИнформацияОбОшибке = РезультатаСоздания;
		Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке.Причина ;
		КонецЕсли;
		
		Возврат СформироватьРезультатВыгрузкиДокумента(ИнформацияОбОшибке.Описание, Истина);
	КонецЕсли;
	
	НастройкаФормыОтчета = Новый Структура;
	НастройкаФормыОтчета.Вставить("ПервичныйДокумент", ДокументСсылка);
	
	ДанныеДляСохраненияРасшифровкиОтчета = Новый Структура;
		
	ФлагУспешногоСохранения = ЗаполнитьИСохранитьОтчетЗвит1С(ОтчетЗвит1С, СоответствиеОтчета, НастройкаФормыОтчета,,ОткрыватьОтчет);
	
	ИмяСхемыЗвит1С = ""; // Очищаем реквизит менеджера 1С:Звіт т.к. работа с документом завершена 
	
	Если Не ФлагУспешногоСохранения Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка передачи данных в 1С:Звіт'; uk = 'Помилка передачі даних в 1С:Звіт'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
	КонецЕсли;
	
	Возврат СформироватьРезультатВыгрузкиДокумента(Неопределено, Ложь);
	
КонецФункции

// Функция проверяет список переданных документов на возможность выгрузки в объект NNStatusQuery/NNRequest  1С:Звіт
// Формирует данный объект и параллельно формирует вспомогательную таблицу значений ТаблицаРезультат
//
Функция СформироватьТаблицыДляЗапросаСостоянияРегистрации(МассивДокументов, ДляПолученияСостоянияРегистрации)
	РезультатФомирования = Новый Структура("ОшибкаПодключенияКЗвит1С, ТаблицаРезультат");
	Если ДляПолученияСостоянияРегистрации Тогда
		РезультатФомирования.Вставить("NNStatusQuery");
	Иначе
		РезультатФомирования.Вставить("NNRequest");
		// Прочие фатальные ошибки, за исключением ошибки подключения к 1С:Звіт
		РезультатФомирования.Вставить("ОшибкаФормированияТаблицы", Ложь);
		РезультатФомирования.Вставить("ТекстОшибки", "");	
	КонецЕсли;
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("Документ");
	ТаблицаРезультат.Колонки.Добавить("ДокументКорректен");             // Истина - запрос состояния отправлен в 1С:Звіт, иначе Ложь
	ТаблицаРезультат.Колонки.Добавить("СостояниеСтр");                  // Строковое представление состояния
 	ТаблицаРезультат.Колонки.Добавить("ЭтоИсходящийДокумент");          // Булево
 	ТаблицаРезультат.Колонки.Добавить("ЭтоНалоговаНакладная");          // Булево
	
	// Дополнительно закешируем реквизиты документов для дальнейшей проверки
	// Имеет смысл только для документов с флагом ДокументКорректен с точки знения 1С
	Если ДляПолученияСостоянияРегистрации Тогда		
	 	ТаблицаРезультат.Колонки.Добавить("_1С_Документ_Контрагент_ИНН");
		ТаблицаРезультат.Колонки.Добавить("_1С_ПолнаяПроверка");
		ТаблицаРезультат.Колонки.Добавить("_1С_Документ_Организация_ЕДРПОУ");
	 	ТаблицаРезультат.Колонки.Добавить("_1С_Документ_Номер");
	 	ТаблицаРезультат.Колонки.Добавить("_1С_Документ_СпецРежим");
	 	ТаблицаРезультат.Колонки.Добавить("_1С_Документ_Филиал");
	 	ТаблицаРезультат.Колонки.Добавить("_1С_Документ_Дата");
	 	ТаблицаРезультат.Колонки.Добавить("_1С_СуммаНДС");
		ТаблицаРезультат.Колонки.Добавить("_1С_ТипПричиныНевыдачиПокупателю");
		
	КонецЕсли;

	РезультатФомирования.ТаблицаРезультат = ТаблицаРезультат;
	
	Если МассивДокументов.Количество() = 0 Тогда
		РезультатФомирования.ОшибкаПодключенияКЗвит1С = Ложь; // Подключение не нужно
		Возврат РезультатФомирования;
	КонецЕсли;
		
	ЕстьПодключениеКЗвит1С = Неопределено;	
	РеквизитыОрганизаций  = Новый Соответствие;
	РеквизитыКонтрагентов = Новый Соответствие;
	NNTable = Неопределено;
	Для каждого Документ Из МассивДокументов Цикл
		СтрокаРезультат = ТаблицаРезультат.Добавить();
		СтрокаРезультат.Документ = Документ;
		СтрокаРезультат.ДокументКорректен = Ложь; // Данные документа еще не проверены
		
		// 1. Определим с чем работаем
		ТипДокументаКорректен = Ложь;
		Если ТипЗнч(Документ) = Тип("ДокументОбъект.НалоговаяНакладная")
		 ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.НалоговаяНакладная") Тогда
			СтрокаРезультат.ЭтоНалоговаНакладная = Истина;
			СтрокаРезультат.ЭтоИсходящийДокумент = Истина;
			ТипДокументаКорректен = (ДляПолученияСостоянияРегистрации = Истина);
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументОбъект.Приложение2КНалоговойНакладной")
			  ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
			СтрокаРезультат.ЭтоНалоговаНакладная = Ложь;
			СтрокаРезультат.ЭтоИсходящийДокумент = Истина;
			ТипДокументаКорректен = (ДляПолученияСостоянияРегистрации = Истина);
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументОбъект."+мПараметрыРаботыЗвит1С.ИмяДокументаЗКП)
			  ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка."+мПараметрыРаботыЗвит1С.ИмяДокументаЗКП) Тогда
			Если Документ.ВидОперации = Перечисления["ВидыОпераций"+мПараметрыРаботыЗвит1С.ИмяДокументаЗКП].РасчетКорректировкиВозврат
			 ИЛИ Документ.ВидОперации = Перечисления["ВидыОпераций"+мПараметрыРаботыЗвит1С.ИмяДокументаЗКП].РасчетКорректировкиКорректировка Тогда
				СтрокаРезультат.ЭтоНалоговаНакладная = Ложь;
			Иначе
				СтрокаРезультат.ЭтоНалоговаНакладная = Истина;
			КонецЕсли;
			СтрокаРезультат.ЭтоИсходящийДокумент = Ложь;			
			ТипДокументаКорректен = Истина;

		КонецЕсли;
		
		Если Не ТипДокументаКорректен Тогда
			СтрокаРезультат.СостояниеСтр = НСтр("ru = 'Проверка состояния регистрации объектов данного типа не поддерживается'; uk = 'Перевірка станц реєстрації об''эктів даного типу не підтримуеться'");
			Продолжить;
		КонецЕсли;
		
		// 2. Проверим организацию
		МетаданныеДокумента = Документ.Метаданные();
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") = Неопределено
		 ИЛИ Не ЗначениеЗаполнено(Документ.Организация) Тогда		
			СтрокаРезультат.СостояниеСтр = НСтр("ru = 'Организация не определена'; uk = 'Організація не визначена'");
			Продолжить;
		КонецЕсли;

		Организация = Документ.Организация;

		Если Не ЗначениеЗаполнено(Организация.ДатаНачалаИспользованияЗвит1С) Тогда
			СтрокаРезультат.СостояниеСтр = НСтр("ru = '""1С:Звіт"" не используется для организации ""'; uk = '""1С:Звіт"" не використовується для організації ""'")+Строка(Организация)+"""."+Символы.ПС+
			                               НСтр("ru = 'В карточке организации не указана дата начала использования ""1С:Звіт""'; uk = 'В картці організації не вказана дата початку використання ""1С:Звіт""'");
			Продолжить;
		КонецЕсли;
		
		РеквизитыОрганизации = РеквизитыОрганизаций[Организация];
		Если РеквизитыОрганизации = Неопределено Тогда
			СписокПоказателей = Новый СписокЗначений;
			СписокПоказателей.Добавить("","КодПоЕДРПОУ");	
			Сведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, КонецДня(Документ.Дата), СписокПоказателей);
			
			РеквизитыОрганизации  = Новый Структура("КодПоЕДРПОУ", СокрЛП(Сведения.КодПоЕДРПОУ));
			РеквизитыОрганизаций[Организация] = РеквизитыОрганизации;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РеквизитыОрганизации.КодПоЕДРПОУ) Тогда
			СтрокаРезультат.СостояниеСтр = НСтр("ru = 'В карточке организации не заполнен код ЕДРПОУ'; uk = 'У картці організації не заповнений код ЄДРПОУ'");
			Если РегламентированнаяОтчетность.ИДКонфигурации() <> "УТ" Тогда
				СтрокаРезультат.СостояниеСтр = СтрокаРезультат.СостояниеСтр+" на "+Формат(Документ.Дата, """ДФ=dd.MM.yyyy");
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		// 3. Проверим Контрагента
		////////Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") = Неопределено
		//////// ИЛИ Не ЗначениеЗаполнено(Документ.Контрагент) Тогда		
		////////	СтрокаРезультат.СостояниеСтр = НСтр("ru = 'Контрагент не определен'; uk = 'Контрагент не визначен'");
		////////	Продолжить;
		////////КонецЕсли;
		
		Контрагент  = Документ.Контрагент;

		РеквизитыКонтрагента = РеквизитыКонтрагентов[Контрагент];
		Если РеквизитыКонтрагента = Неопределено Тогда
			ИННКонтрагента = "";
			Если ЗначениеЗаполнено(Контрагент) Тогда
				ИННКонтрагента = СокрЛП(Контрагент.ИНН);
			КонецЕсли;
			РеквизитыКонтрагента  = Новый Структура("ИНН", ИННКонтрагента);
			РеквизитыКонтрагентов[Контрагент] = РеквизитыКонтрагента;
		КонецЕсли;
		
		Если   Не ЗначениеЗаполнено(РеквизитыКонтрагента.ИНН) 
			 И Не СтрокаРезультат.ЭтоИсходящийДокумент = Истина Тогда
			СтрокаРезультат.СостояниеСтр = НСтр("ru = 'В карточке контрагента не заполнен ИНН'; uk = 'У картці контрагента не заповнений ІПН'");
			Продолжить;
		КонецЕсли;

		// 4. Проверим основания для документа "Приложение 2 к налоговой накладной"
		////////Если СтрокаРезультат.ЭтоИсходящийДокумент И Не СтрокаРезультат.ЭтоНалоговаНакладная И Не ЗначениеЗаполнено(Документ.НалоговаяНакладная) Тогда
		////////	// Для приложения 2 обязательно заполнение реквизита "Налоговая накладная"
		////////	СтрокаРезультат.СостояниеСтр = НСтр("ru = 'Налоговая накладная не определена'; uk = 'Податкова накладна не визначена'");
		////////	Продолжить;
		////////КонецЕсли;
		
		// 5. Попробуем запустить 1С:Звіт или выведем причины отказа (не установлен, не используется в этой ИБ)
		// один раз в цикле
		Если ЕстьПодключениеКЗвит1С = Неопределено Тогда
			ЕстьПодключениеКЗвит1С = ЗапуситьЗвит1С(Ложь, Организация);
			Если ЕстьПодключениеКЗвит1С Тогда				
				// Форомирование запроса
				Состояние(НСтр("ru = 'Формирование запроса состояния регистрации в ЕРНН в ""1С:Звіт""'; uk = 'Формування запиту стану реєстрації в ЄРПН в ""1С:Звіт""'"));			
				Если ДляПолученияСостоянияРегистрации Тогда
					NNTable = Компонента.CreateNNStatusQuery();	
				Иначе
					Попытка
						// Метод CreateNNRequestEx добавлен в 1.00.034 релизе 1С:Звіт
						Результат = Компонента.CreateNNRequestEx(РеквизитыОрганизации.КодПоЕДРПОУ);
						РезультатаСоздания = Результат.CreateResult;
						
						// Переберем все возможные варианты (аналогия метода OpenCreateReport)
						Если РезультатаСоздания = 0 Тогда
							NNTable = Результат;
																
						ИначеЕсли РезультатаСоздания = -1 Тогда
							РезультатФомирования.ОшибкаФормированияТаблицы = Истина;
							РезультатФомирования.ТекстОшибки = РезультатФомирования.ТекстОшибки + 
							                                   НСтр("ru = 'Общая ошибка ""1С:Звіт"" при вызове CreateNNRequestEx("""+РеквизитыОрганизации.КодПоЕДРПОУ+""")'; uk = 'Загальна помилка ""1С:Звіт"" при виклику CreateNNRequestEx("""+РеквизитыОрганизации.КодПоЕДРПОУ+""")'");
							
						ИначеЕсли РезультатаСоздания = -3 Тогда
							РезультатФомирования.ОшибкаФормированияТаблицы = Истина;
							РезультатФомирования.ТекстОшибки = РезультатФомирования.ТекстОшибки + 
							                                   НСтр("ru = 'ЕДРПОУ организации указанной в документе не совпадает с текущем ЕДРПОУ в ""1С:Звіт""
					                                                      |Переключите текущую организацию в ""1С:Звіт"" и повторите выгрузку еще раз'; uk = 'ЄДРПОУ організації зазначеної в документі не збігається з поточному ЄДРПОУ в ""1С:Звіт""
					                                                      |Переключіть поточну організацію в ""1С:Звіт"" і повторіть вивантаження ще раз'");
						КонецЕсли;
						
					Исключение
						// Для релизов до 1.00.034 используем старый метод
						NNTable = Компонента.CreateNNRequest();					
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЕстьПодключениеКЗвит1С Тогда
			СтрокаРезультат.СостояниеСтр = мПараметрыРаботыЗвит1С.ОшибкаВзаимодейсвияСЗвит1ССтр;
			Продолжить;
		КонецЕсли;		
		
		// 6. Определим полный номер документа 
		НомерДокумента = ""; СпецРежим = ""; Филиал = "";
		
		Если СтрокаРезультат.ЭтоИсходящийДокумент Тогда
			
			ИДДокумента = ПолучитьУникальныйИдентификаторДокумента(Документ);
			
			// Для проверки ключевых полей в 1С и 1С:Звіт
			НомерДокумента = СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Документ));
	
			ТекущийСпецРежимНалогообложения = ?(СтрокаРезультат.ЭтоНалоговаНакладная, Документ.СпецРежимНалогообложения, Документ.НалоговаяНакладная.СпецРежимНалогообложения);
			Если ЗначениеЗаполнено(ТекущийСпецРежимНалогообложения) Тогда
				// Или значение или пусто - пробел не выгружаем 1С:Звіт пробел не выгружается, не сохранятся, вручную не добавляется
				СпецРежим = Строка(ТекущийСпецРежимНалогообложения);
			КонецЕсли;					

			Если НЕ СтрокаРезультат.ЭтоНалоговаНакладная
				И СтрокаРезультат.Документ.Дата >= '20150101'
				И СпецРежим = "7" Тогда
				СпецРежим = "";
			КонецЕсли;
			
			Если мПараметрыРаботыЗвит1С.УчетПоОбособленнымПодразделениям Тогда
				// Или значение или пусто - если филиал не указан
				ТекущееОбособленноеПодразделение = ?(СтрокаРезультат.ЭтоНалоговаНакладная, Документ.ОбособленноеПодразделение, Документ.НалоговаяНакладная.ОбособленноеПодразделение);
				Если ЗначениеЗаполнено(ТекущееОбособленноеПодразделение) Тогда
					Префикс = ТекущееОбособленноеПодразделение.Префикс;
				
					Если ЗначениеЗаполнено(Префикс) Тогда
						Если Документ.Дата >= '2014-03-01' Тогда
						    НомерФилиала = Прав("" + СокрЛП(Формат(Число(Префикс),"ЧЦ=4; ЧГ=0")),4);
						Иначе	
							НомерФилиала = Прав("0000" + СокрЛП(Префикс),4);
						КонецЕсли;
					Иначе
						НомерФилиала = "";
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НомерФилиала) Тогда
						Филиал = НомерФилиала;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
				
		Иначе
			Если Не ЗначениеЗаполнено(Документ.НомерВходящегоДокумента) Тогда
				СтрокаРезультат.СостояниеСтр = НСтр("ru = 'Не указан номер входящего документа'; uk = 'Не вказаний номер вхідного документа'");
				Продолжить;
			КонецЕсли;
			
			ПозицияСпецСимвола = Найти(Документ.НомерВходящегоДокумента, "\");
			Если ПозицияСпецСимвола = 0 Тогда
				ПозицияСпецСимвола = Найти(Документ.НомерВходящегоДокумента, "/");
			КонецЕсли;
			
			Если ПозицияСпецСимвола > 0 Тогда
				НомерДокумента = СокрЛП(Лев(Документ.НомерВходящегоДокумента, ПозицияСпецСимвола-1));
				СпецРежимФилиал = СокрП(Сред(Документ.НомерВходящегоДокумента, ПозицияСпецСимвола + 1)); // Слева может быть пробел спец.режима
			Иначе
				НомерДокумента = СокрЛП(Документ.НомерВходящегоДокумента);
				СпецРежимФилиал = "";
			КонецЕсли;
			
			ТекстОшибкиФормата = НСтр("ru = 'Номер входящего документа не соответсвует формату: Н, Н/С, Н/СФ или  Н/С/Ф, где Н - порядковый номер документа, С - спец.режим или пробел (один символ), Ф - номер филиала (от одного до четырех символов)'; 
					                  |uk = 'Номер вхідного документа не відповідає формату: Н, Н/С або Н/СФ или  Н/С/Ф, де Н - порядковий номер документа, С - спец.режим або пробіл (один символ), Ф - номер філії (від одного до чотирьох символів)'");
									  
			Если ЗначениеЗаполнено(НомерДокумента) Тогда
				// В отличие от исх. документов, здесь НомерДокумента - это число
				Попытка
					НомерДокумента = Число(НомерДокумента);
				Исключение
					СтрокаРезультат.СостояниеСтр = ТекстОшибкиФормата;
					Продолжить;
				КонецПопытки;
				Если НомерДокумента = 0 Тогда
					СтрокаРезультат.СостояниеСтр = ТекстОшибкиФормата;
					Продолжить;
				КонецЕсли;
			Иначе							 
				СтрокаРезультат.СостояниеСтр = ТекстОшибкиФормата;
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СпецРежимФилиал) Тогда					
				// формат номеров налоговых с 03.2014, с двумя слэшами
				Если Найти(СпецРежимФилиал, "/") > 0 Тогда
					
					СпецРежим = СокрЛП(Сред(СпецРежимФилиал, 1, Найти(СпецРежимФилиал, "/")-1));
					Филиал    = СокрЛП(Сред(СпецРежимФилиал,    Найти(СпецРежимФилиал, "/")+1));
					
				Иначе
					// Номер должен быть в формате ПорядковыйНомер[/СпецРежим[НомерФилиала]] где
					//  СпецРежим - число или пробел
					//  НомерФилиала - строка приводимая к числу c длиной не более 4-х символов
					Если СтрДлина(СпецРежимФилиал) > 5 Тогда
						СтрокаРезультат.СостояниеСтр = ТекстОшибкиФормата;
						Продолжить;
					КонецЕсли;
					
					СпецРежим = СокрЛП(Лев(СпецРежимФилиал, 1)); // Если без спец.режима, то указан пробел, убираем				
					Если СпецРежим = "0" Тогда
						// Случай, когда забыли поставить пробел
						СтрокаРезультат.СостояниеСтр = ТекстОшибкиФормата;
						Продолжить;
					КонецЕсли;
				
					Филиал = СокрЛП(Сред(СпецРежимФилиал, 2));
				
				КонецЕсли;
				
				Если Не ПустаяСтрока(СпецРежим) Тогда
					Попытка
						ВремЧисло = Число(СпецРежим);
					Исключение
						СтрокаРезультат.СостояниеСтр = ТекстОшибкиФормата;
						Продолжить;
					КонецПопытки;
				КонецЕсли;
				
				Если Не ПустаяСтрока(Филиал) Тогда
					Попытка
						ВремЧисло = Число(Филиал);
					Исключение
						СтрокаРезультат.СостояниеСтр = ТекстОшибкиФормата;
						Продолжить;
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;

		// 7. Определим дату документа
		Если СтрокаРезультат.ЭтоИсходящийДокумент Тогда
			ДатаДокумента = Документ.Дата;
		Иначе
			Если Не ЗначениеЗаполнено(Документ.ДатаВходящегоДокумента) Тогда
				СтрокаРезультат.СостояниеСтр = НСтр("ru = 'Не указана дата входящего документа'; uk = 'Не вказано дату вхідного документа'");
				Продолжить;
			КонецЕсли;
			ДатаДокумента = Документ.ДатаВходящегоДокумента;
		КонецЕсли;	
		
		// 8. Добавление документа в запрос
		СтрокаРезультат.ДокументКорректен = Истина;
		
		Если ДляПолученияСостоянияРегистрации Тогда		
		 	СтрокаРезультат._1С_Документ_Контрагент_ИНН     = РеквизитыКонтрагента.ИНН;
		 	СтрокаРезультат._1С_Документ_Организация_ЕДРПОУ = РеквизитыОрганизации.КодПоЕДРПОУ;
		 	СтрокаРезультат._1С_Документ_Номер              = НомерДокумента;
		 	СтрокаРезультат._1С_Документ_СпецРежим          = СпецРежим;
		 	СтрокаРезультат._1С_Документ_Филиал             = Филиал;
		 	СтрокаРезультат._1С_Документ_Дата               = ДатаДокумента;
			СтрокаРезультат._1С_СуммаНДС                    = Документ.СуммаНДСДокумента;			
			Если СтрокаРезультат.ЭтоИсходящийДокумент Тогда
				СтрокаРезультат._1С_ТипПричиныНевыдачиПокупателю = Документ.ТипПричиныНевыдачиПокупателю;			
			КонецЕсли;
			Если СтрокаРезультат.ЭтоИсходящийДокумент = Истина Тогда                                                          
				СтрокаРезультат._1С_ПолнаяПроверка				= НЕ ЗначениеЗаполнено(Документ.ТипПричиныНевыдачиПокупателю)
																   И (      СтрокаРезультат.ЭтоНалоговаНакладная
																       И НЕ ЗначениеЗаполнено(Документ.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены));	
			Иначе	
				СтрокаРезультат._1С_ПолнаяПроверка				= Истина;
			КонецЕсли;
			
		КонецЕсли;

		Если NNTable <> Неопределено Тогда
			
			NNTable.NewRow("TAB1");
			
			Если ДляПолученияСостоянияРегистрации Тогда		
				NNTable.SetValue("TAB1", "DOC_TYPE",       ?(СтрокаРезультат.ЭтоНалоговаНакладная, 1, 2));  // 1 – НН, 2 – П2
				NNTable.SetValue("TAB1", "DOC_MOVE",       ?(СтрокаРезультат.ЭтоИсходящийДокумент, 1, 2));  // 1 - Исходящие 2 - Входящие
				Если СтрокаРезультат.ЭтоИсходящийДокумент Тогда
					NNTable.SetValue("TAB1", "DOC_ID",         ИДДокумента);
				Иначе
					NNTable.SetValue("TAB1", "PATRNER_IPN",    РеквизитыКонтрагента.ИНН);
					NNTable.SetValue("TAB1", "FIRM_EDRPOU",    РеквизитыОрганизации.КодПоЕДРПОУ);
					NNTable.SetValue("TAB1", "DOC_NUM",        НомерДокумента);
					NNTable.SetValue("TAB1", "DOC_VD",         СпецРежим);
					NNTable.SetValue("TAB1", "DOC_DEPT",       Филиал);
					NNTable.SetValue("TAB1", "DOC_DATE",       ДатаДокумента);
				КонецЕсли;
			Иначе
				// Заполняем реквизиты по полям соответсвующей схемы J1300101 
                NNTable.SetValue("MAIN", "N2",  0);
                NNTable.SetValue("MAIN", "N3",  1);
				NNTable.SetValue("MAIN", "N4",  1);
				NNTable.SetValue("TAB1", "TAB1_A21",   НомерДокумента);
				Если ЗначениеЗаполнено(СпецРежим) Тогда
					NNTable.SetValue("TAB1", "TAB1_A22",   СпецРежим);	// Может быть не заполнен			
				КонецЕсли;
				Если ЗначениеЗаполнено(Филиал) Тогда
					NNTable.SetValue("TAB1", "TAB1_A23",   Филиал);		// Может быть не заполнен		
				КонецЕсли;
				NNTable.SetValue("TAB1", "TAB1_A3",    ДатаДокумента);
				NNTable.SetValue("TAB1", "TAB1_A4",    ?(СтрокаРезультат.ЭтоНалоговаНакладная, "ПН", "РК"));
				NNTable.SetValue("TAB1", "TAB1_A5",    РеквизитыКонтрагента.ИНН);
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	Если ЕстьПодключениеКЗвит1С = Неопределено Тогда
		РезультатФомирования.ОшибкаПодключенияКЗвит1С = Ложь; // Попытка подключения не выполнялась
	Иначе
		РезультатФомирования.ОшибкаПодключенияКЗвит1С = Не ЕстьПодключениеКЗвит1С;
	КонецЕсли;
	Если ДляПолученияСостоянияРегистрации Тогда
		РезультатФомирования.NNStatusQuery = NNTable;
	Иначе
		РезультатФомирования.NNRequest = NNTable;
	КонецЕсли;
	
	Возврат РезультатФомирования;
	
КонецФункции

// Функция возвращает состояние для переданного списка документов
// 
Функция ПолучитьСостояниеРегистрацииДокументов(МассивДокументов) Экспорт
	
	// 1.Формирование таблицы ТаблицаРезультат и параллельно заполнение отбора NNStatusQuery	
	РезультатФомирования = СформироватьТаблицыДляЗапросаСостоянияРегистрации(МассивДокументов, Истина);
	
	ОшибкаПодключенияКЗвит1С = РезультатФомирования.ОшибкаПодключенияКЗвит1С;
	ТаблицаРезультат         = РезультатФомирования.ТаблицаРезультат;
	NNStatusQuery            = РезультатФомирования.NNStatusQuery;
	
	ТаблицаРезультат.Колонки.Добавить("Звит1С_ДокументКорректен");               // Булево - ложь в случае когда документ не может быть однозначно определен 
	ТаблицаРезультат.Колонки.Добавить("Звит1С_СовпадаютКлючевыеПоля");           // только исх. Если документ не выгружен то Неопределено, иначе Булево - ложь в случае когда документ выгружен из 1С и в 1С:Звіт различаются ключевые поля
	ТаблицаРезультат.Колонки.Добавить("Звит1С_ДокументЗарегистрирован");         // Булево - признак регистрации документа в ЕРНН 
	ТаблицаРезультат.Колонки.Добавить("Звит1С_СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));                        // Сумма НДС по данным 1С:Звіт
	ТаблицаРезультат.Колонки.Добавить("Звит1С_ДатаРегистрации");                 // Дата регистрации по данным 1С:Звіт
	ТаблицаРезультат.Колонки.Добавить("Звит1С_Состояние");                       // Если ошибка в 1С, то Звит1С_Состояние = Неопределено, иначе число возвращенное из 1С:Звіт
	ТаблицаРезультат.Колонки.Добавить("Звит1С_КтоВыписалНалоговуюНакладную"); 	  // для входящих НН - кто выписал налоговую накладную
	
	РезультатФомирования = Новый Структура("ОшибкаПодключенияКЗвит1С, ТаблицаРезультат", ОшибкаПодключенияКЗвит1С, ТаблицаРезультат);

	Если ОшибкаПодключенияКЗвит1С ИЛИ ТаблицаРезультат.Найти(Истина, "ДокументКорректен") = Неопределено Тогда
		// Если к звиту не удалось подключиться или все документы некорректны
		Возврат РезультатФомирования;
	КонецЕсли;
	
	// 2. Исполнение запроса для корректных документов 
	Состояние(НСтр("ru = 'Исполнение запроса состояния регистрации в ЕРНН в ""1С:Звіт""'; uk = 'Виконання запиту стану реєстрації в ЄРПН в ""1С:Звіт""'"));
	NNStatusResult = Компонента.ExecNNStatusQuery(NNStatusQuery);
	
	// 3. Обработка запроса
	Состояние(НСтр("ru = 'Обработка состояния регистрации в ЕРНН в ""1С:Звіт""'; uk = 'Обробка запиту стану реєстрації в ЄРПН в ""1С:Звіт""'"));
	Для каждого СтрокаРезультат Из ТаблицаРезультат Цикл
		
		Если СтрокаРезультат.ДокументКорректен = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		NNStatusResult.Next("TAB1"); // Количество строк в результате равно количеству строк в запросе

		СтрокаРезультат.Звит1С_Состояние       = NNStatusResult.GetValue("TAB1", "STATUS");		
		Если СтрокаРезультат.ЭтоИсходящийДокумент Тогда		
			СтрокаРезультат.СостояниеСтр = мПараметрыРаботыЗвит1С.ПредставлениеСостоянийДляИсходящихНалоговыхДокументов[СтрокаРезультат.Звит1С_Состояние];			
		Иначе
			СтрокаРезультат.СостояниеСтр = мПараметрыРаботыЗвит1С.ПредставлениеСостоянийДляВходящихНалоговыхДокументов[СтрокаРезультат.Звит1С_Состояние];			
		КонецЕсли;
		
		СтрокаРезультат.Звит1С_ДокументКорректен = (СтрокаРезультат.Звит1С_Состояние > -2);
		Если Не СтрокаРезультат.Звит1С_ДокументКорректен Тогда
			Продолжить; // Документ не может быть идентифицирован. Продолжнение бессмысленно
		КонецЕсли;
		СтрокаРезультат.Звит1С_ДокументЗарегистрирован = (СтрокаРезультат.Звит1С_Состояние = 4);
		
		Звит1С_ДатаРегистрации  = NNStatusResult.GetValue("TAB1", "REGDATE");
		Если Не ЗначениеЗаполнено(Звит1С_ДатаРегистрации) Тогда
			Звит1С_ДатаРегистрации = '00010101';
		КонецЕсли;
		СтрокаРезультат.Звит1С_ДатаРегистрации = Звит1С_ДатаРегистрации;		
		
		СтрокаРезультат.Звит1С_СуммаНДС = NNStatusResult.GetValue("TAB1", "VATSUM");		
		
		// Дополнительно проверим ключевые поля исходящих документов
		Если (СтрокаРезультат.ЭтоИсходящийДокумент) 
		   И (СтрокаРезультат.Звит1С_Состояние > -1) Тогда	// Документ выгружен	
			ДанныеДокументаЗвит1С = Новый Структура();
			ДанныеДокументаЗвит1С.Вставить("Контрагент_ИНН",     NNStatusResult.GetValue("TAB1", "PATRNER_IPN"));
			ДанныеДокументаЗвит1С.Вставить("Организация_ЕДРПОУ", NNStatusResult.GetValue("TAB1", "FIRM_EDRPOU"));
			ДанныеДокументаЗвит1С.Вставить("Номер",              NNStatusResult.GetValue("TAB1", "DOC_NUM"));
			ДанныеДокументаЗвит1С.Вставить("СпецРежим",          NNStatusResult.GetValue("TAB1", "DOC_VD"));
			ДанныеДокументаЗвит1С.Вставить("Филиал",             NNStatusResult.GetValue("TAB1", "DOC_DEPT"));
			ДанныеДокументаЗвит1С.Вставить("Дата",               NNStatusResult.GetValue("TAB1", "DOC_DATE"));			
			Для Каждого КлючИЗначение Из ДанныеДокументаЗвит1С Цикл // Приводим незаполненные значения к строкам
				Если КлючИЗначение.Значение = Неопределено Тогда
					ДанныеДокументаЗвит1С[КлючИЗначение.Ключ] = "";
				ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Строка") Тогда
					ДанныеДокументаЗвит1С[КлючИЗначение.Ключ] = СокрЛП(КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			// В режиме отладки в числовые поля документа 1С:Звіт вместо пустых значений выгружаются нули
			Если ДанныеДокументаЗвит1С.СпецРежим = "0" Тогда
				ДанныеДокументаЗвит1С.СпецРежим = "";
			КонецЕсли;
			
			ТекстОшибки = "";
			Если СтрокаРезультат._1С_Документ_Контрагент_ИНН <> ДанныеДокументаЗвит1С.Контрагент_ИНН Тогда
				Если СтрокаРезультат._1С_ПолнаяПроверка = Истина Тогда
					ТекстОшибки = ТекстОшибки + НСтр("ru = 'ИНН контрагента'; uk = 'ІПН контрагента'")+", ";
				КонецЕсли;
			КонецЕсли;
			//Если СтрокаРезультат._1С_Документ_Организация_ЕДРПОУ <> ДанныеДокументаЗвит1С.Организация_ЕДРПОУ Тогда
			//	ТекстОшибки = ТекстОшибки + НСтр("ru = 'ЕДРПОУ организации'; uk = 'ЄДРПОУ організації'")+", ";
			//КонецЕсли;
			Попытка
				Если Число(СтрокаРезультат._1С_Документ_Номер) <> Число(ДанныеДокументаЗвит1С.Номер) Тогда
					ТекстОшибки = ТекстОшибки + НСтр("ru = 'номер'; uk = 'номер'")+", ";
				КонецЕсли;
			Исключение
				Если СокрЛП(СтрокаРезультат._1С_Документ_Номер) <> СокрЛП(ДанныеДокументаЗвит1С.Номер) Тогда
					ТекстОшибки = ТекстОшибки + НСтр("ru = 'номер'; uk = 'номер'")+", ";
				КонецЕсли;
			КонецПопытки;
			Если СтрокаРезультат._1С_Документ_СпецРежим <> ДанныеДокументаЗвит1С.СпецРежим Тогда
				Если  НЕ (СтрокаРезультат._1С_Документ_СпецРежим = 0 И ДанныеДокументаЗвит1С.СпецРежим = 5) 
					И НЕ (СтрокаРезультат._1С_Документ_СпецРежим = "" И ДанныеДокументаЗвит1С.СпецРежим = "5") Тогда
					ТекстОшибки = ТекстОшибки + НСтр("ru = 'спец.режим'; uk = 'спец.режим'")+", ";
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				Звит_1С_Документ_Филиал = ?(НЕ ЗначениеЗаполнено(СтрокаРезультат._1С_Документ_Филиал),0, Число(СтрокаРезультат._1С_Документ_Филиал));
			Исключение
				Звит_1С_Документ_Филиал = "";
			КонецПопытки;
			Попытка
				_1С_Документ_Филиал = ?(НЕ ЗначениеЗаполнено(ДанныеДокументаЗвит1С.Филиал), 0, Число(ДанныеДокументаЗвит1С.Филиал));
			Исключение
				_1С_Документ_Филиал = "";
			КонецПопытки;
			Если Звит_1С_Документ_Филиал <> _1С_Документ_Филиал Тогда
				Если НЕ (СтрокаРезультат._1С_ТипПричиныНевыдачиПокупателю = 14) Тогда
					ТекстОшибки = ТекстОшибки + НСтр("ru = 'филиал'; uk = 'філія'")+", ";
				КонецЕсли;
			КонецЕсли;
			         
			Если ЗначениеЗаполнено(ДанныеДокументаЗвит1С.Дата)
				// перестало работать для Приложения 2
				И НачалоДня(СтрокаРезультат._1С_Документ_Дата) <> НачалоДня(ДанныеДокументаЗвит1С.Дата) Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru = 'дата'; uk = 'дата'")+", ";
			КонецЕсли;
			Если СтрокаРезультат._1С_ПолнаяПроверка И СтрокаРезультат._1С_СуммаНДС <> СтрокаРезультат.Звит1С_СуммаНДС Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru = 'сумма НДС'; uk = 'сума ПДВ'")+", ";
			КонецЕсли;
			
			Если ПустаяСтрока(ТекстОшибки) Тогда
				СтрокаРезультат.Звит1С_СовпадаютКлючевыеПоля = Истина;
			Иначе
				СтрокаРезультат.Звит1С_СовпадаютКлючевыеПоля = Ложь;
				СтрокаРезультат.СостояниеСтр = СтрокаРезультат.СостояниеСтр + НСтр("ru = '. Не совпадают ключевые поля: '; uk = '. Не збігаються ключові поля: '")+
				                               Лев(ТекстОшибки, СтрДлина(ТекстОшибки) - СтрДлина(", "));
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаРезультат.ЭтоИсходящийДокумент = Ложь Тогда
			СтрокаРезультат.Звит1С_КтоВыписалНалоговуюНакладную = NNStatusResult.GetValue ("TAB1", "OSOBFIO")				
		КонецЕсли;
		
    КонецЦикла;
	
	Возврат РезультатФомирования;
	
КонецФункции

// Функция формирует запрос состояния исходящих налоговых документов
// 
Функция СформироватьЗапросСостоянияРегистрацииДокументов(МассивДокументов) Экспорт
		
	// 1.Формирование таблицы ТаблицаРезультат и параллельно заполнение отбора NNRequest
	РезультатФомирования = СформироватьТаблицыДляЗапросаСостоянияРегистрации(МассивДокументов, Ложь);
	
	ОшибкаПодключенияКЗвит1С = РезультатФомирования.ОшибкаПодключенияКЗвит1С;
	ТаблицаРезультат         = РезультатФомирования.ТаблицаРезультат;
	NNRequest                = РезультатФомирования.NNRequest;
	
	// Прочие ошибки, за исключением ошибки подключения к 1С:Звіт
	ОшибкаФормированияТаблицы = РезультатФомирования.ОшибкаФормированияТаблицы;
	ТекстОшибки               = РезультатФомирования.ТекстОшибки;
	
	// Для СформироватьЗапросСостоянияРегистрацииДокументов(...) собственный РезультатФомирования
	РезультатФомирования = Новый Структура("ОшибкаПодключенияКЗвит1С, ТаблицаРезультат, РезультатВыполненияОперации, ТекстОшибки", ОшибкаПодключенияКЗвит1С, ТаблицаРезультат, Не ОшибкаФормированияТаблицы, ТекстОшибки);
	
	Если ОшибкаПодключенияКЗвит1С ИЛИ ОшибкаФормированияТаблицы ИЛИ (ТаблицаРезультат.Найти(Истина, "ДокументКорректен") = Неопределено)  Тогда
		Возврат РезультатФомирования;
	КонецЕсли;
	
	// 2. Исполнение запроса
	Состояние(НСтр("ru = 'Формирование и отправка запроса состояния регистрации в ЕРНН в ""1С:Звіт""'; uk = 'Формування та відправлення запиту стану реєстрації в ЄРПН в ""1С:Звіт""'"));
	ОшибкаФормированияЗапроса = Ложь;
	ТекстОшибки = "";
	Попытка
		Компонента.BringZvitToFront();		
		Результат = Компонента.SendNNRequest(NNRequest);
		Компонента.Bring1CToFront();
		
		Если Результат <> 0 Тогда
			ОшибкаФормированияЗапроса = Истина;
		КонецЕсли;
		
	Исключение
		ОшибкаФормированияЗапроса = Истина;
		// На случай исключения при работе метода SendNNRequest()
		ТекстОшибки = ОписаниеОшибки();
		Для каждого СтрокаТаблицыРезультатов Из ТаблицаРезультат Цикл
			Если СтрокаТаблицыРезультатов.ДокументКорректен Тогда
				СтрокаТаблицыРезультатов.ДокументКорректен = Ложь;
				СтрокаТаблицыРезультатов.СостояниеСтр = мПараметрыРаботыЗвит1С.ОшибкаВзаимодейсвияСЗвит1ССтр;
			КонецЕсли;
		КонецЦикла;
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
			Сообщить("1С:Звіт. Ошибка отправки запроса НН: "+ТекстОшибки);
		КонецЕсли;
		
	КонецПопытки;
	РезультатФомирования.РезультатВыполненияОперации = Не ОшибкаФормированияЗапроса;
	РезультатФомирования.ТекстОшибки                 = ТекстОшибки;
	
	Возврат РезультатФомирования;
	
КонецФункции

// Функция открывает налоговый документ в 1С:Звіт
// 
Функция ОткрытьДокументВЗвит1С(ДокументСсылка) Экспорт
		
	Если Не ЗапуситьЗвит1С(Неопределено, ДокументСсылка.Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Компонента.ShowReport(ПолучитьУникальныйИдентификаторДокумента(ДокументСсылка));
	
	Если Результат = 0 Тогда
		Компонента.Bring1CToFront();		
		Возврат Ложь;
	КонецЕсли;

	Компонента.BringZvitToFront();
	Возврат Истина;
	
КонецФункции

Функция ПолучитьКодОрганизации(Организация, Дата, ИмяКода, ЗначениеКода)
	
	Попытка
		
		Если НЕ Метаданные.РегистрыСведений.Найти("КодыОрганизации") = Неопределено Тогда
		
			Данные = Новый Структура("Организация",Организация); 
			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(Дата, Данные);
			
			Если    КодыОрганизации.Количество() = 0
				ИЛИ КодыОрганизации.Колонки.Найти(ИмяКода) = Неопределено Тогда
				
				Если ФлагОтладки Тогда
					Сообщить("Заполнение карточки предприятия. Код не найден: " + ИмяКода, СтатусСообщения.Внимание); 
				КонецЕсли;

				Возврат Ложь
				
			Иначе	
				
				ЗначениеКода = КодыОрганизации[0][ИмяКода];
								
			КонецЕсли;
			
		Иначе	
			
			Если    Метаданные.Справочники.Организации.Реквизиты.Найти(ИмяКода) = Неопределено Тогда
				
				Если ФлагОтладки Тогда
					Сообщить("Заполнение карточки предприятия. Код не найден: " + ИмяКода, СтатусСообщения.Внимание); 
				КонецЕсли;

				Возврат Ложь
				
			Иначе	
				
				ЗначениеКода = Организация[ИмяКода];
				
			КонецЕсли;
			
		КонецЕсли;
				
		Если ТипЗнч(ЗначениеКода) = Тип("Строка") Тогда
			ЗначениеКода = СокрЛП(ЗначениеКода);
		КонецЕсли;
		
		Если ФлагОтладки Тогда
			Сообщить("Заполнение карточки предприятия. Получение Кода: " + ИмяКода + ". Значение: " + ЗначениеКода);
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		
		Если ФлагОтладки Тогда
			Сообщить("Заполнение карточки предприятия. Получение кода: " + ИмяКода + ". Ошибка: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки;

КонецФункции // ()

Процедура УстановитьЗначенияПоляКарточкиОрганизации(Карточка, ИмяТаблицы, ИмяПоля, ЗначениеПоля)
	
	Попытка
		
		Карточка.SetValue(ИмяТаблицы, ИмяПоля, ЗначениеПоля);
		
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
			Сообщить("Заполнение карточки предприятия.  Переданы данные. Имя таблицы: " + ИмяТаблицы + ". Имя поля: " + ИмяПоля + ". Значение: " + ЗначениеПоля);	
		КонецЕсли;
		
	Исключение
		
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
			Сообщить("Ошибка при заполнении карточки предприятия.  Имя таблицы: " + ИмяТаблицы + ". Имя поля: " + ИмяПоля + ". Значение: " + ЗначениеПоля, СтатусСообщения.Внимание);	
		КонецЕсли;
		
	КонецПопытки;

КонецПроцедуры

// Функция открывает форму для пакетной проверки статуса регистрации входящих налоговых документов
//
Функция ОткрытьФормуЗагрузкиВходящихПервичныхДокументов(ТипДокумента) Экспорт
	
	Форма = ПолучитьФорму("ФормаЗагрузкиПервичныхДокументов");
	Форма.ТипДокумента = ТипДокумента;
	Форма.Открыть();
	РегламентированнаяОтчетность.ДобавитьНадписьВнешнийОтчет(Форма);
	
	Возврат Форма;
		
КонецФункции

// Функция открывает форму для пакетной проверки статуса регистрации входящих налоговых документов
//
Функция ОткрытьФормуВыгрузкиПервичныхДокументов(ТипДокумента) Экспорт
	
	Форма = ПолучитьФорму("ФормаВыгрузкиПервичныхДокументов",,ТипДокумента);
	Форма.ТипДокумента = ТипДокумента;
	Форма.Открыть();
	РегламентированнаяОтчетность.ДобавитьНадписьВнешнийОтчет(Форма);
	
	Возврат Форма;
		
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
ЗаполнитьПараметрыРаботыЗвит1С();

мМинимальнаяВерсия1СЗвит = "1.00.028";

#КонецЕсли 