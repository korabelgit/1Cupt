Перем СохраненнаяНастройка Экспорт;

#Если Клиент ИЛИ ВнешнееСоединение Тогда
	
// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеПараметра.Значение = '00010101' Тогда
		ЗначениеПараметра.Значение = КонецДня(ТекущаяДата());
		ЗначениеПараметра.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры


Процедура СформироватьОтчет(ФормаОтчета) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = КомпоновщикНастроек.Настройки;
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;

	КомпоновщикМакета  = Новый КомпоновщикМакетаКомпоновкиДанных;

	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
	
	ДокументРезультат = ФормаОтчета.ЭлементыФормы.Результат;
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Данные = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(Данные);
	
	Данные = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
		
	ВывестиМакет(ДокументРезультат, Данные, ФормаОтчета)
		

КонецПроцедуры	

Процедура ВывестиМакет(ДокументРезультат, Данные, ФормаОтчета) Экспорт
	
	Период = ФормаОтчета.Период;
	Если Период < Дата(2015,11,1) Тогда
		Макет = ПолучитьМакет("Макет");
	Иначе
		Макет = ПолучитьМакет("Макет_от_04_11_2015");
	КонецЕсли;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтроки = Макет.ПолучитьОбласть("Строки");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");

	Для Каждого ДанныеОтчетаОрганизации Из Данные.Строки Цикл
		Для Каждого ДанныеОтчета Из ДанныеОтчетаОрганизации.Строки Цикл

		ОбластьШапка.Параметры.Заполнить(ДанныеОтчета);
		ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ДанныеОтчета.Организация,Период);
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("","ОрганСоциальнойЗащитыНаселения");	
        ОрганСоциальнойЗащитыНаселения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(ДанныеОтчета.Организация, Период, СписокПоказателей).ОрганСоциальнойЗащитыНаселения;
		
		ОбластьШапка.Параметры.Организация = ДанныеОтчета.Организация.НаименованиеПолное;
		ОбластьШапка.Параметры.ОрганСоциальнойЗащитыНаселения = ОрганСоциальнойЗащитыНаселения;
		ОбластьШапка.Параметры.Период =	Период;
		ДокументРезультат.Вывести(ОбластьШапка);
		Для Каждого ДанныеСтроки Из ДанныеОтчета.Строки Цикл
			ОбластьСтроки.Параметры.Заполнить(ДанныеСтроки);
			ДокументРезультат.Вывести(ОбластьСтроки);
		КонецЦикла;
		ОбластьПодвал.Параметры.Руководитель = ОтветственныеЛица.Руководитель;
		ОбластьПодвал.Параметры.ГлавныйБухгалтер = ОтветственныеЛица.ГлавныйБухгалтер;
		ДокументРезультат.Вывести(ОбластьПодвал);
		
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла
	КонецЦикла;
КонецПроцедуры	


#КонецЕсли

#Если Клиент Тогда
	
// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	ТиповыеОтчеты.ИнициализацияТиповогоОтчета(ЭтотОбъект);
	
КонецПроцедуры


НастройкаПериода = Новый НастройкаПериода;
#КонецЕсли