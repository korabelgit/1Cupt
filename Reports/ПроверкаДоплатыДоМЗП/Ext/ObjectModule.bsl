Перем СохраненнаяНастройка Экспорт;
Перем ЭлементыНастройки    Экспорт; // Массив элементов структуры СКД         
Перем Расшифровки          Экспорт; 

#Если Клиент ИЛИ ВнешнееСоединение Тогда
	
// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеПараметра.Значение = '00010101' Тогда
		ЗначениеПараметра.Значение = КонецДня(ТекущаяДата());
		ЗначениеПараметра.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтчет(ФормаОтчета) Экспорт
	
	Настройки = КомпоновщикНастроек.Настройки;
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	НачатьТранзакцию();
	ДокументОбъект = Документы.НачислениеЗарплатыРаботникамОрганизаций.СоздатьДокумент();
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Организации") Тогда
			Организация = ЭлементОтбора.ПравоеЗначение;
		    Если ЭлементОтбора.ПравоеЗначение = Справочники.Организации.ПустаяСсылка() Тогда 
				Сообщить("Не указана организация!");
            	Возврат;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;	
	Период = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")).Значение;
	ДокументОбъект.ПериодРегистрации = Период;
	ДокументОбъект.Организация = Организация;
	ДокументОбъект.Дата = ДокументОбъект.ПериодРегистрации;
	
    Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР	КОГДА РаботникиОрганизаций.Сотрудник.ОсновноеНазначение=ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) 
	|				ТОГДА РаботникиОрганизаций.Сотрудник.Ссылка 
	|			ИНАЧЕ РаботникиОрганизаций.Сотрудник.ОсновноеНазначение 
	|	КОНЕЦ КАК Сотрудник,
	|	РаботникиОрганизаций.Сотрудник КАК Назначение
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоМесяца, Организация = &Организация) КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР	КОГДА РаботникиОрганизаций.Сотрудник.ОсновноеНазначение=ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) 
	|				ТОГДА РаботникиОрганизаций.Сотрудник.Ссылка 
	|			ИНАЧЕ РаботникиОрганизаций.Сотрудник.ОсновноеНазначение 
	|	КОНЕЦ,
	|	РаботникиОрганизаций.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Организация = &Организация
	|	И РаботникиОрганизаций.Период > &НачалоМесяца
	|	И РаботникиОрганизаций.Период <= &КонецМесяца
	|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоМесяца", Период);
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Период));
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаДоМЗП;
	СотрудникиИНазначения = Новый ТаблицаЗначений;
	СотрудникиИНазначения = ТаблицаРезультат.Скопировать(,"Сотрудник,Назначение");
	Сотрудники = ТаблицаРезультат.ВыгрузитьКолонку("Сотрудник");
	
	ТаблицаНачислений = ПроведениеРасчетов.ГрафикиИНормыПоСотрудникам(Организация,СотрудникиИНазначения,ДокументОбъект.ПериодРегистрации); 
	ТаблицаНачислений.Колонки.Добавить("Авторасчет");
	ТаблицаНачислений.ЗаполнитьЗначения(Истина,"Авторасчет");
	ТаблицаНачислений.Колонки.Добавить("ВидРасчета");
	ТаблицаНачислений.ЗаполнитьЗначения(ВидРасчета,"ВидРасчета");
	ТаблицаНачислений.Колонки.Добавить("БазовыйПериодНачало");
	ТаблицаНачислений.ЗаполнитьЗначения(ДокументОбъект.ПериодРегистрации,"БазовыйпериодНачало");
	ТаблицаНачислений.Колонки.Добавить("БазовыйПериодКонец");
	ТаблицаНачислений.ЗаполнитьЗначения(КонецМесяца(ДокументОбъект.ПериодРегистрации),"БазовыйпериодКонец");
	ТаблицаНачислений.Колонки.Добавить("ДатаНачала");
	ТаблицаНачислений.ЗаполнитьЗначения(ДокументОбъект.ПериодРегистрации,"ДатаНачала");
	ТаблицаНачислений.Колонки.Добавить("ДатаОкончания");
	ТаблицаНачислений.ЗаполнитьЗначения(КонецМесяца(ДокументОбъект.ПериодРегистрации),"ДатаОкончания");
	ДокументОбъект.Начисления.Загрузить(ТаблицаНачислений);
	ДокументОбъект.Записать();
	ДокументОбъект.РассчитатьНачисления(ТаблицаНачислений.ВыгрузитьКолонку("Сотрудник"),Ложь);
	ТаблицаРассчитанныхНачислений = ДокументОбъект.Начисления.Выгрузить();
	
	МассивТипов=Новый Массив();
	МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
 	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	ТаблицаРассчитанныхНачислений.Колонки.Добавить("Организация",ОписаниеТипов);
	ТаблицаРассчитанныхНачислений.ЗаполнитьЗначения(Организация,"Организация");
	ОтменитьТранзакцию();
	

	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	КомпоновщикМакета  = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Организация,
	|	Начисления.Назначение,
	|	Начисления.Результат КАК НачисленоПланово
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&ТаблицаРассчитанныхНачислений КАК Начисления
	|;
	|ВЫБРАТЬ
	|	ВТНачисления.Организация,
	|	ВТНачисления.Назначение,
	|	ВТНачисления.НачисленоПланово КАК НачисленоПланово
	|ИЗ
	|	ВТНачисления КАК ВТНачисления";
	Запрос.УстановитьПараметр("ТаблицаРассчитанныхНачислений",ТаблицаРассчитанныхНачислений);
	ТаблицаПлановыхНачислений = Запрос.Выполнить().Выгрузить();
	 
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ПлановыеНачисления", ТаблицаПлановыхНачислений);
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,ВнешниеНаборыДанных);
	
	ДокументРезультат = ФормаОтчета.ЭлементыФормы.Результат;
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДокументРезультат.Показать();
		
КонецПроцедуры	

#КонецЕсли

#Если Клиент Тогда
	
// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	ТиповыеОтчеты.ИнициализацияТиповогоОтчета(ЭтотОбъект);
	
КонецПроцедуры

// Запоминание элементов структуры отчета компоновщика настроек
//
Процедура ЗапомнитьНастройку() Экспорт 
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() <> 0 тогда
		Если ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) <> Тип("ТаблицаКомпоновкиДанных") тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыНастройки[0] = КомпоновщикНастроек.Настройки.Структура[0].Колонки[0];
	ЭлементыНастройки[1] = КомпоновщикНастроек.Настройки.Структура[0].Колонки[1];
	ЭлементыНастройки[2] = КомпоновщикНастроек.Настройки.Структура[0].Колонки[2];
	ЭлементыНастройки[3] = КомпоновщикНастроек.Настройки.Структура[0].Колонки[1].Структура[0];
	
	КомпоновщикНастроек.Настройки.Структура[0].Колонки.Удалить(ЭлементыНастройки[0]);
	КомпоновщикНастроек.Настройки.Структура[0].Колонки.Удалить(ЭлементыНастройки[1]);
	КомпоновщикНастроек.Настройки.Структура[0].Колонки.Удалить(ЭлементыНастройки[2]);
	
КонецПроцедуры

// Добавление настройки структуры в колонки таблицы
//
Процедура ВосстановитьНастройку() Экспорт  
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() <> 0 тогда
		Если ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) <> Тип("ТаблицаКомпоновкиДанных") тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементГруппировки = КомпоновщикНастроек.Настройки.Структура[0].Колонки.Добавить();
	ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(ЭлементГруппировки, ЭлементыНастройки[0]);
	
	ЭлементГруппировки = КомпоновщикНастроек.Настройки.Структура[0].Колонки.Добавить();
	ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(ЭлементГруппировки, ЭлементыНастройки[1]);
	
	//ЭлементГруппировки = ЭлементГруппировки.Структура.Добавить();
	//ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(ЭлементГруппировки, ЭлементыНастройки[3]);
	
	ЭлементГруппировки = КомпоновщикНастроек.Настройки.Структура[0].Колонки.Добавить();
	ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(ЭлементГруппировки, ЭлементыНастройки[2]);
	
КонецПроцедуры


НастройкаПериода = Новый НастройкаПериода;
#КонецЕсли